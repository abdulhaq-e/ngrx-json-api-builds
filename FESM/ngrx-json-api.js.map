{"version":3,"file":"ngrx-json-api.js","sources":["../../ngrx-json-api.ts","../../src/module.ts","../../src/reducers.ts","../../src/effects.ts","../../src/selectors.ts","../../src/api.ts","../../src/pipes.ts","../../src/services.ts","../../src/utils.ts","../../src/actions.ts","../../src/interfaces.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {SelectStoreResourcePipe,DenormaliseStoreResourcePipe,GetDenormalisedValuePipe,FindOptions,NgrxJsonApiService,PutQueryOptions,PostResourceOptions,PatchResourceOptions,NewResourceOptions,DeleteResourceOptions,NgrxJsonApiModule,NgrxJsonApiSelectors,uuid,Direction,Document,FilteringParam,FilteringOperator,ManyResourceRelationship,TypedManyResourceRelationship,TypedOneResourceRelationship,NgrxJsonApiConfig,NgrxJsonApiStore,NgrxJsonApiStoreData,NgrxJsonApiStoreQueries,NgrxJsonApiStoreResources,NgrxJsonApiFilteringConfig,NgrxJsonApiUrlBuilder,OperationType,OneResourceRelationship,ErrorModificationType,ModifyStoreResourceErrorsPayload,Payload,Query,QueryParams,Resource,ResourceAttributeDefinition,ResourceDefinition,ResourceError,ResourceErrorSource,ResourceIdentifier,ResourceRelationship,ResourceRelationDefinition,ResourceRelationType,ResourceState,SortingParam,QueryResult,ManyQueryResult,OneQueryResult,StoreQuery,StoreResource,NgrxJsonApiActionTypes,ApiApplyInitPayload,ApiApplyRollbackPayload,ApiApplyInitAction,ApiApplySuccessAction,ApiApplyFailAction,ApiPostInitAction,ApiPostSuccessAction,ApiPostFailAction,ApiDeleteInitAction,ApiDeleteSuccessAction,ApiDeleteFailAction,ApiGetInitAction,ApiGetSuccessAction,ApiGetFailAction,ApiRollbackAction,ApiPatchInitAction,ApiPatchSuccessAction,ApiPatchFailAction,DeleteStoreResourceAction,PatchStoreResourceAction,NewStoreResourceAction,PostStoreResourceAction,RemoveQueryAction,LocalQueryInitAction,LocalQuerySuccessAction,LocalQueryFailAction,CompactStoreAction,ClearStoreAction,ApiQueryRefreshAction,ModifyStoreResourceErrorsAction,NgrxJsonApiActions} from './index';\n\nexport {NgrxJsonApi as ɵg} from './src/api';\nexport {NgrxJsonApiEffects as ɵf} from './src/effects';\nexport {NGRX_JSON_API_CONFIG as ɵa,apiFactory as ɵb,configure as ɵe,selectorsFactory as ɵc,serviceFactory as ɵd} from './src/module';\nexport {NgrxJsonApiStoreReducer as ɵh,reducer as ɵi} from './src/reducers';","import { ModuleWithProviders, NgModule, OpaqueToken } from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\n\nimport { Store, StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { NgrxJsonApi } from './api';\nimport { NgrxJsonApiEffects } from './effects';\nimport { NgrxJsonApiSelectors } from './selectors';\nimport { NgrxJsonApiService } from './services';\nimport { reducer } from './reducers';\nimport {\n  DenormaliseStoreResourcePipe,\n  GetDenormalisedValuePipe,\n  SelectStoreResourcePipe,\n} from './pipes';\n\nimport { NgrxJsonApiConfig } from './interfaces';\n\nexport const /** @type {?} */ NGRX_JSON_API_CONFIG = new OpaqueToken('NGRX_JSON_API_CONFIG');\n/**\n * @param {?} http\n * @param {?} config\n * @return {?}\n */\nexport function apiFactory(http: HttpClient, config: NgrxJsonApiConfig) {\n  return new NgrxJsonApi(http, config);\n}\n/**\n * @param {?} config\n * @return {?}\n */\nexport function selectorsFactory(config: NgrxJsonApiConfig) {\n  return new NgrxJsonApiSelectors(config);\n}\n/**\n * @param {?} store\n * @param {?} selectors\n * @return {?}\n */\nexport function serviceFactory(\n  store: Store<any>,\n  selectors: NgrxJsonApiSelectors\n) {\n  return new NgrxJsonApiService(store, selectors);\n}\n/**\n * @param {?} config\n * @return {?}\n */\nexport function configure(config: NgrxJsonApiConfig): Array<any> {\n  return [\n    {\n      provide: NgrxJsonApi,\n      useFactory: apiFactory,\n      deps: [HttpClient, NGRX_JSON_API_CONFIG],\n    },\n    {\n      provide: NgrxJsonApiSelectors,\n      useFactory: selectorsFactory,\n      deps: [NGRX_JSON_API_CONFIG],\n    },\n    {\n      provide: NgrxJsonApiService,\n      useFactory: serviceFactory,\n      deps: [Store, NgrxJsonApiSelectors],\n    },\n    {\n      provide: NGRX_JSON_API_CONFIG,\n      useValue: config,\n    },\n  ];\n}\nexport class NgrxJsonApiModule {\n/**\n * @param {?} config\n * @return {?}\n */\nstatic configure(config: NgrxJsonApiConfig): ModuleWithProviders {\n    return {\n      ngModule: NgrxJsonApiModule,\n      providers: configure(config),\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    DenormaliseStoreResourcePipe,\n    GetDenormalisedValuePipe,\n    SelectStoreResourcePipe,\n  ],\n  imports: [\n    EffectsModule.forFeature([NgrxJsonApiEffects]),\n    StoreModule.forFeature('NgrxJsonApi', reducer, {}),\n  ],\n  exports: [\n    DenormaliseStoreResourcePipe,\n    GetDenormalisedValuePipe,\n    SelectStoreResourcePipe,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgrxJsonApiModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgrxJsonApiModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Action, ActionReducerMap } from '@ngrx/store';\n\nimport {\n  ApiApplyInitAction,\n  ApiRollbackAction,\n  NgrxJsonApiActionTypes,\n} from './actions';\nimport {\n  ModifyStoreResourceErrorsPayload,\n  NgrxJsonApiStore,\n  Query,\n  ResourceIdentifier,\n  StoreResource,\n} from './interfaces';\nimport {\n  clearQueryResult,\n  compactStore,\n  deleteStoreResources,\n  getPendingChanges,\n  removeQuery,\n  removeStoreResource,\n  rollbackStoreResources,\n  updateQueriesForDeletedResource,\n  updateQueryErrors,\n  updateQueryParams,\n  updateQueryResults,\n  updateResourceErrors,\n  updateResourceErrorsForQuery,\n  updateResourceState,\n  updateStoreDataFromPayload,\n  updateStoreDataFromResource,\n} from './utils';\n\nexport const /** @type {?} */ initialNgrxJsonApiState: NgrxJsonApiStore = {\n  isCreating: 0,\n  isReading: 0,\n  isUpdating: 0,\n  isDeleting: 0,\n  isApplying: 0,\n  data: {},\n  queries: {},\n};\n/**\n * @param {?=} state\n * @param {?=} action\n * @return {?}\n */\nexport function NgrxJsonApiStoreReducer(\n  state: NgrxJsonApiStore = initialNgrxJsonApiState,\n  action: any\n): NgrxJsonApiStore {\n  let /** @type {?} */ newState;\n\n  switch (action.type) {\n    case NgrxJsonApiActionTypes.API_POST_INIT: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        true\n      );\n      newState = {\n        ...state,\n        data: updatedData,\n        isCreating: state.isCreating + 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_GET_INIT: {\n      let /** @type {?} */ query = /** @type {?} */(( action.payload as Query));\n      newState = {\n        ...state,\n        queries: updateQueryParams(state.queries, query),\n        isReading: state.isReading + 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_INIT: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        false\n      );\n      newState = {\n        ...state,\n        data: updatedData,\n        isUpdating: state.isUpdating + 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_INIT: {\n      newState = {\n        ...state,\n        data: updateResourceState(state.data, action.payload, 'DELETED'),\n        isDeleting: state.isDeleting + 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_POST_SUCCESS: {\n      newState = {\n        ...state,\n        data: updateStoreDataFromPayload(\n          state.data,\n          action.payload.jsonApiData\n        ),\n        isCreating: state.isCreating - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_GET_SUCCESS: {\n      newState = {\n        ...state,\n        data: updateStoreDataFromPayload(\n          state.data,\n          action.payload.jsonApiData\n        ),\n        queries: updateQueryResults(\n          state.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n        isReading: state.isReading - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_SUCCESS: {\n      newState = {\n        ...state,\n        data: updateStoreDataFromPayload(\n          state.data,\n          action.payload.jsonApiData\n        ),\n        isUpdating: state.isUpdating - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_SUCCESS: {\n      newState = {\n        ...state,\n        data: deleteStoreResources(state.data, action.payload.query),\n        queries: updateQueriesForDeletedResource(state.queries, {\n          id: action.payload.query.id,\n          type: action.payload.query.type,\n        }),\n        isDeleting: state.isDeleting - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_QUERY_REFRESH: {\n      // clear result ids and wait until new data is fetched (triggered by effect)\n      newState = {\n        ...state,\n        queries: clearQueryResult(state.queries, action.payload),\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_POST_FAIL: {\n      newState = {\n        ...state,\n        data: updateResourceErrorsForQuery(\n          state.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isCreating: state.isCreating - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_GET_FAIL: {\n      newState = {\n        ...state,\n        queries: updateQueryErrors(\n          state.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n        isReading: state.isReading - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_FAIL: {\n      newState = {\n        ...state,\n        data: updateResourceErrorsForQuery(\n          state.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isUpdating: state.isUpdating - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_FAIL: {\n      newState = {\n        ...state,\n        data: updateResourceErrorsForQuery(\n          state.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isDeleting: state.isDeleting - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.REMOVE_QUERY: {\n      let /** @type {?} */ queryId = /** @type {?} */(( action.payload as string));\n      newState = { ...state, queries: removeQuery(state.queries, queryId) };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.LOCAL_QUERY_INIT: {\n      let /** @type {?} */ query = /** @type {?} */(( action.payload as Query));\n      newState = { ...state, queries: updateQueryParams(state.queries, query) };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.MODIFY_STORE_RESOURCE_ERRORS: {\n      let /** @type {?} */ payload = /** @type {?} */(( action.payload as ModifyStoreResourceErrorsPayload));\n      newState = {\n        ...state,\n        data: updateResourceErrors(\n          state.data,\n          payload.resourceId,\n          payload.errors,\n          payload.modificationType\n        ),\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.LOCAL_QUERY_SUCCESS: {\n      newState = {\n        ...state,\n        queries: updateQueryResults(\n          state.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.PATCH_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        false\n      );\n      if (updatedData !== state.data) {\n        newState = { ...state, data: updatedData };\n        return newState;\n      } else {\n        return state;\n      }\n    }\n    case NgrxJsonApiActionTypes.POST_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        true\n      );\n      if (updatedData !== state.data) {\n        newState = { ...state, data: updatedData };\n        return newState;\n      } else {\n        return state;\n      }\n    }\n    case NgrxJsonApiActionTypes.NEW_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        true\n      );\n      updatedData = updateResourceState(updatedData, action.payload, 'NEW');\n      if (updatedData !== state.data) {\n        newState = { ...state, data: updatedData };\n        return newState;\n      } else {\n        return state;\n      }\n    }\n    case NgrxJsonApiActionTypes.DELETE_STORE_RESOURCE: {\n      let /** @type {?} */ resourceId = /** @type {?} */(( action.payload as ResourceIdentifier));\n      if (\n        state.data[resourceId.type] &&\n        state.data[resourceId.type][resourceId.id]\n      ) {\n        let /** @type {?} */ resource = state.data[resourceId.type][resourceId.id];\n\n        if (resource.state === 'NEW' || resource.state === 'CREATED') {\n          // not yet stored on server-side, just delete\n          newState = {\n            ...state,\n            data: removeStoreResource(state.data, resourceId),\n          };\n          return newState;\n        } else {\n          // stored on server, mark for deletion\n          newState = {\n            ...state,\n            data: updateResourceState(state.data, action.payload, 'DELETED'),\n          };\n          return newState;\n        }\n      }\n      return state;\n    }\n    case NgrxJsonApiActionTypes.API_APPLY_INIT: {\n      let /** @type {?} */ payload = ( /** @type {?} */((action as ApiApplyInitAction))).payload;\n      let /** @type {?} */ pending: Array<StoreResource> = getPendingChanges(\n        state.data,\n        payload.ids,\n        payload.include\n      );\n      newState = { ...state, isApplying: state.isApplying + 1 };\n      for (let /** @type {?} */ pendingChange of pending) {\n        if (pendingChange.state === 'CREATED') {\n          newState.isCreating++;\n        } else if (pendingChange.state === 'UPDATED') {\n          newState.isUpdating++;\n        } else if (pendingChange.state === 'DELETED') {\n          newState.isDeleting++;\n        } else {\n          throw new Error('unknown state ' + pendingChange.state);\n        }\n      }\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_APPLY_SUCCESS:\n    case NgrxJsonApiActionTypes.API_APPLY_FAIL: {\n      // apply all the committed or failed changes\n      let /** @type {?} */ actions = /** @type {?} */(( action.payload as Array<Action>));\n      newState = state;\n      for (let /** @type {?} */ commitAction of actions) {\n        newState = NgrxJsonApiStoreReducer(newState, commitAction);\n      }\n      newState = { ...newState, isApplying: state['isApplying'] - 1 };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_ROLLBACK: {\n      let /** @type {?} */ payload = ( /** @type {?} */((action as ApiRollbackAction))).payload;\n      newState = {\n        ...state,\n        data: rollbackStoreResources(state.data, payload.ids, payload.include),\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.CLEAR_STORE: {\n      return initialNgrxJsonApiState;\n    }\n    case NgrxJsonApiActionTypes.COMPACT_STORE: {\n      return compactStore(state);\n    }\n    default:\n      return state;\n  }\n}\n\nexport const /** @type {?} */ reducer: ActionReducerMap<any> = {\n  api: NgrxJsonApiStoreReducer,\n};\n","import { Injectable, OnDestroy } from '@angular/core';\n\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n\nimport * as _ from 'lodash/index';\n\nimport { Action, Store } from '@ngrx/store';\nimport { Actions, Effect } from '@ngrx/effects';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/concatAll';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/mapTo';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/switchMapTo';\nimport'rxjs/add/operator/take';\nimport'rxjs/add/operator/toArray';\nimport'rxjs/add/operator/withLatestFrom';\nimport'rxjs/add/operator/takeWhile';\nimport'rxjs/add/operator/takeUntil';\n\nimport {\n  ApiApplyFailAction,\n  ApiApplyInitAction,\n  ApiApplySuccessAction,\n  ApiDeleteFailAction,\n  ApiDeleteInitAction,\n  ApiDeleteSuccessAction,\n  ApiGetFailAction,\n  ApiGetInitAction,\n  ApiGetSuccessAction,\n  ApiPatchFailAction,\n  ApiPatchInitAction,\n  ApiPatchSuccessAction,\n  ApiPostFailAction,\n  ApiPostInitAction,\n  ApiPostSuccessAction,\n  ApiQueryRefreshAction,\n  LocalQueryFailAction,\n  LocalQueryInitAction,\n  LocalQuerySuccessAction,\n  NgrxJsonApiActionTypes,\n} from './actions';\nimport { NgrxJsonApi } from './api';\nimport { NgrxJsonApiSelectors } from './selectors';\nimport {\n  NgrxJsonApiStore,\n  OperationType,\n  Payload,\n  Query,\n  Resource,\n  ResourceError,\n  ResourceIdentifier,\n  StoreResource,\n} from './interfaces';\nimport {\n  generatePayload,\n  getPendingChanges,\n  sortPendingChanges,\n} from './utils';\nexport class NgrxJsonApiEffects implements OnDestroy {\n  \n  createResource$: Observable<Action> = this.actions$\n    .ofType<ApiPostInitAction>(NgrxJsonApiActionTypes.API_POST_INIT)\n    .map(it => this.generatePayload(it.payload, 'POST'))\n    .mergeMap((payload: Payload) => {\n      return this.jsonApi\n        .create(payload.query, payload.jsonApiData)\n        .map(\n          (response: HttpResponse<any>) =>\n            new ApiPostSuccessAction({\n              jsonApiData: response.body,\n              query: payload.query,\n            })\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiPostFailAction(this.toErrorPayload(payload.query, error))\n          )\n        );\n    });\n\n  \n  updateResource$ = this.actions$\n    .ofType<ApiPatchInitAction>(NgrxJsonApiActionTypes.API_PATCH_INIT)\n    .map(it => this.generatePayload(it.payload, 'PATCH'))\n    .mergeMap((payload: Payload) => {\n      return this.jsonApi\n        .update(payload.query, payload.jsonApiData)\n        .map(\n          (response: HttpResponse<any>) =>\n            new ApiPatchSuccessAction({\n              jsonApiData: response.body,\n              query: payload.query,\n            })\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiPatchFailAction(this.toErrorPayload(payload.query, error))\n          )\n        );\n    });\n\n  \n  readResource$ = this.actions$\n    .ofType<ApiGetInitAction>(NgrxJsonApiActionTypes.API_GET_INIT)\n    .map(it => it.payload)\n    .mergeMap((query: Query) => {\n      return this.jsonApi\n        .find(query)\n        .map((response: HttpResponse<any>) => response.body)\n        .map(\n          data =>\n            new ApiGetSuccessAction({\n              jsonApiData: data,\n              query: query,\n            })\n        )\n        .catch(error =>\n          Observable.of(new ApiGetFailAction(this.toErrorPayload(query, error)))\n        );\n    });\n/**\n * @param {?} query\n * @return {?}\n */\nprivate localQueryInitEventFor(query: Query) {\n    return this.actions$\n      .ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.LOCAL_QUERY_INIT)\n      .map(action => /** @type {?} */(( action as LocalQueryInitAction)))\n      .filter(action => query.queryId == action.payload.queryId);\n  }\n/**\n * @param {?} query\n * @return {?}\n */\nprivate removeQueryEventFor(query: Query) {\n    return this.actions$\n      .ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.REMOVE_QUERY)\n      .map(action => /** @type {?} */(( action as LocalQueryInitAction)))\n      .filter(action => query.queryId == action.payload);\n  }\n\n  \n  queryStore$ = this.actions$\n    .ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.LOCAL_QUERY_INIT)\n    .map(it => it.payload)\n    .mergeMap((query: Query) => {\n      return this.store\n        .let(this.selectors.getNgrxJsonApiStore$())\n        .let(this.selectors.queryStore$(query))\n        .map(\n          results =>\n            new LocalQuerySuccessAction({\n              jsonApiData: { data: results },\n              query: query,\n            })\n        )\n        .catch(error =>\n          Observable.of(\n            new LocalQueryFailAction(this.toErrorPayload(query, error))\n          )\n        )\n        .takeUntil(this.localQueryInitEventFor(query))\n        .takeUntil(this.removeQueryEventFor(query));\n    });\n\n  \n  deleteResource$ = this.actions$\n    .ofType<ApiDeleteInitAction>(NgrxJsonApiActionTypes.API_DELETE_INIT)\n    .map(it => it.payload)\n    .map<ResourceIdentifier, Payload>(it => this.generatePayload(it, 'DELETE'))\n    .mergeMap((payload: Payload) => {\n      return this.jsonApi\n        .delete(payload.query)\n        .map((response: HttpResponse<any>) => response.body)\n        .map(\n          data =>\n            new ApiDeleteSuccessAction({\n              jsonApiData: data,\n              query: payload.query,\n            })\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiDeleteFailAction(this.toErrorPayload(payload.query, error))\n          )\n        );\n    });\n\n  \n  triggerReadOnQueryRefresh$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_QUERY_REFRESH)\n    .withLatestFrom(this.store, (action: any, store) => {\n      let /** @type {?} */ queryId = action.payload;\n      let /** @type {?} */ state = /** @type {?} */(( store['NgrxJsonApi']['api'] as NgrxJsonApiStore));\n      let /** @type {?} */ query = state.queries[queryId].query;\n      return new ApiGetInitAction(query);\n    });\n\n  \n  refreshQueriesOnDelete$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_DELETE_SUCCESS)\n    .withLatestFrom(this.store, (action: any, store) => {\n      let /** @type {?} */ id = { id: action.payload.query.id, type: action.payload.query.type };\n      if (!id.id || !id.type) {\n        throw new Error(\n          'API_DELETE_SUCCESS did not carry resource id and type information'\n        );\n      }\n\n      let /** @type {?} */ state = /** @type {?} */(( store['NgrxJsonApi']['api'] as NgrxJsonApiStore));\n\n      let /** @type {?} */ actions = [];\n      for (let /** @type {?} */ queryId in state.queries) {\n        if (state.queries.hasOwnProperty(queryId)) {\n          let /** @type {?} */ query = state.queries[queryId];\n          if (query.resultIds) {\n            let /** @type {?} */ needsRefresh =\n              _.findIndex(query.resultIds, function(o) {\n                return _.isEqual(id, o);\n              }) !== -1;\n\n            let /** @type {?} */ sameIdRequested =\n              query.query.id === id.id && query.query.type === id.type;\n            if (sameIdRequested && (needsRefresh || _.isEmpty(query.errors))) {\n              throw new Error(\n                'store is in invalid state, queries for deleted' +\n                  ' resource should have been emptied and marked with 404 error'\n              );\n            }\n\n            if (needsRefresh) {\n              actions.push(new ApiQueryRefreshAction(queryId));\n            }\n          }\n        }\n      }\n      return actions;\n    })\n    .flatMap(actions => Observable.of(...actions));\n\n  \n  applyResources$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_APPLY_INIT)\n    .filter(() => this.jsonApi.config.applyEnabled !== false)\n    .withLatestFrom(\n      this.store.select(this.selectors.getNgrxJsonApiStore$()),\n      (action, ngrxstore: NgrxJsonApiStore) => {\n        let /** @type {?} */ payload = ( /** @type {?} */((action as ApiApplyInitAction))).payload;\n        const /** @type {?} */ pending: Array<StoreResource> = getPendingChanges(\n          ngrxstore.data,\n          payload.ids,\n          payload.include\n        );\n        return pending;\n      }\n    )\n    .flatMap(pending => {\n      if (pending.length === 0) {\n        return Observable.of(new ApiApplySuccessAction([]));\n      }\n      pending = sortPendingChanges(pending);\n\n      let /** @type {?} */ actions: Array<Observable<Action>> = [];\n      for (let /** @type {?} */ pendingChange of pending) {\n        if (pendingChange.state === 'CREATED') {\n          let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'POST');\n          actions.push(\n            this.jsonApi\n              .create(payload.query, payload.jsonApiData)\n              .map(\n                response =>\n                  new ApiPostSuccessAction({\n                    jsonApiData: response.body,\n                    query: payload.query,\n                  })\n              )\n              .catch(error =>\n                Observable.of(\n                  new ApiPostFailAction(\n                    this.toErrorPayload(payload.query, error)\n                  )\n                )\n              )\n          );\n        } else if (pendingChange.state === 'UPDATED') {\n          // prepare payload, omit links and meta information\n          let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'PATCH');\n          actions.push(\n            this.jsonApi\n              .update(payload.query, payload.jsonApiData)\n              .map(\n                response =>\n                  new ApiPatchSuccessAction({\n                    jsonApiData: response.body,\n                    query: payload.query,\n                  })\n              )\n              .catch(error =>\n                Observable.of(\n                  new ApiPatchFailAction(\n                    this.toErrorPayload(payload.query, error)\n                  )\n                )\n              )\n          );\n        } else if (pendingChange.state === 'DELETED') {\n          let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'DELETE');\n          actions.push(\n            this.jsonApi\n              .delete(payload.query)\n              .map(\n                response =>\n                  new ApiDeleteSuccessAction({\n                    jsonApiData: response.body,\n                    query: payload.query,\n                  })\n              )\n              .catch(error =>\n                Observable.of(\n                  new ApiDeleteFailAction(\n                    this.toErrorPayload(payload.query, error)\n                  )\n                )\n              )\n          );\n        } else {\n          throw new Error('unknown state ' + pendingChange.state);\n        }\n      }\n\n      return Observable.of(...actions)\n        .concatAll()\n        .toArray()\n        .map(actions => this.toApplyAction(actions));\n    });\n/**\n * @param {?} actions$\n * @param {?} jsonApi\n * @param {?} store\n * @param {?} selectors\n */\nconstructor(\nprivate actions$: Actions,\nprivate jsonApi: NgrxJsonApi,\nprivate store: Store<any>,\nprivate selectors: NgrxJsonApiSelectors\n  ) {}\n/**\n * @return {?}\n */\nngOnDestroy() {}\n/**\n * @param {?} actions\n * @return {?}\n */\nprivate toApplyAction(actions: Array<Action>): any {\n    for (let /** @type {?} */ action of actions) {\n      if (\n        action.type === NgrxJsonApiActionTypes.API_POST_FAIL ||\n        action.type === NgrxJsonApiActionTypes.API_PATCH_FAIL ||\n        action.type === NgrxJsonApiActionTypes.API_DELETE_FAIL\n      ) {\n        return new ApiApplyFailAction(actions);\n      }\n    }\n    return new ApiApplySuccessAction(actions);\n  }\n/**\n * @param {?} query\n * @param {?} response\n * @return {?}\n */\nprivate toErrorPayload(\n    query: Query,\n    response: HttpErrorResponse | any\n  ): Payload {\n    let /** @type {?} */ contentType: String = null;\n    if (response && response.headers) {\n      contentType = response.headers.get('Content-Type');\n    }\n    let /** @type {?} */ document = null;\n    if (\n      contentType != null &&\n      contentType.startsWith('application/vnd.api+json')\n    ) {\n      document = response;\n    }\n    if (\n      document &&\n      document.error &&\n      document.error.errors &&\n      document.error.errors.length > 0\n    ) {\n      return {\n        query: query,\n        jsonApiData: document.error,\n      };\n    } else {\n      // transform http to json api error\n      let /** @type {?} */ errors: Array<ResourceError> = [];\n      let /** @type {?} */ error: ResourceError = {\n        status: String(response.status),\n        code: response.statusText,\n      };\n\n      errors.push(error);\n      // got json api errors\n\n      return {\n        query: query,\n        jsonApiData: {\n          errors: errors,\n        },\n      };\n    }\n  }\n/**\n * @param {?} resource\n * @param {?} operation\n * @return {?}\n */\nprivate generatePayload(\n    resource: Resource,\n    operation: OperationType\n  ): Payload {\n    return generatePayload(resource, operation);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Actions, },\n{type: NgrxJsonApi, },\n{type: Store, },\n{type: NgrxJsonApiSelectors, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'createResource$': [{ type: Effect },],\n'updateResource$': [{ type: Effect },],\n'readResource$': [{ type: Effect },],\n'queryStore$': [{ type: Effect },],\n'deleteResource$': [{ type: Effect },],\n'triggerReadOnQueryRefresh$': [{ type: Effect },],\n'refreshQueriesOnDelete$': [{ type: Effect },],\n'applyResources$': [{ type: Effect },],\n};\n}\n\nfunction NgrxJsonApiEffects_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiEffects.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgrxJsonApiEffects.ctorParameters;\n/** @type {?} */\nNgrxJsonApiEffects.propDecorators;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.createResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.updateResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.readResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.queryStore$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.deleteResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.triggerReadOnQueryRefresh$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.refreshQueriesOnDelete$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.applyResources$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.actions$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.jsonApi;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.store;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.selectors;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import * as _ from 'lodash/index';\n\nimport { Observable } from 'rxjs/Observable';\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport'rxjs/add/observable/concat';\nimport'rxjs/add/observable/throw';\nimport'rxjs/add/operator/combineLatest';\nimport'rxjs/add/operator/concat';\nimport'rxjs/add/operator/concatMap';\nimport'rxjs/add/operator/distinctUntilChanged';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/let';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/observable/zip';\n\nimport { Store } from '@ngrx/store';\n\nimport {\n  NgrxJsonApiConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  NgrxJsonApiStoreResources,\n  NgrxJsonApiStoreQueries,\n  Resource,\n  ResourceIdentifier,\n  ResourceError,\n  Query,\n  StoreResource,\n  ManyQueryResult,\n  OneQueryResult,\n  StoreQuery,\n} from './interfaces';\nimport {\n  filterResources,\n  denormaliseStoreResource,\n  denormaliseStoreResources,\n} from './utils';\nexport class NgrxJsonApiSelectors {\n/**\n * @param {?} config\n */\nconstructor(public config: NgrxJsonApiConfig) {}\n/**\n * @return {?}\n */\npublic getNgrxJsonApiStore$(): (\n    state$: Store<any>\n  ) => Observable<NgrxJsonApiStore> {\n    return (state$: Store<any>): Observable<NgrxJsonApiStore> => {\n      // note that upon setup the store may not yet be initialized\n      return state$\n        .select('NgrxJsonApi')\n        .map(it => (it ? it['api'] : undefined));\n    };\n  }\n/**\n * @return {?}\n */\npublic getStoreData$(): (\n    state$: Store<NgrxJsonApiStore>\n  ) => Observable<NgrxJsonApiStoreData> {\n    return (\n      state$: Store<NgrxJsonApiStore>\n    ): Observable<NgrxJsonApiStoreData> => {\n      return state$.select('data');\n    };\n  }\n/**\n * @param {?} type\n * @return {?}\n */\npublic getStoreResourceOfType$(type: string) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreData$())\n        .map(resources => (resources ? resources[type] : undefined));\n    };\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic queryStore$(query: Query) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      let /** @type {?} */ selected$: Observable<any>;\n      if (!query.type) {\n        return state$.map(() => Observable.throw('Unknown query'));\n      } else if (query.type && query.id) {\n        selected$ = state$.let(\n          this.getStoreResource$({ type: query.type, id: query.id })\n        );\n      } else {\n        selected$ = state$\n          .let(this.getStoreResourceOfType$(query.type))\n          .combineLatest(\n            state$.let(this.getStoreData$()),\n            (\n              resources: NgrxJsonApiStoreResources,\n              storeData: NgrxJsonApiStoreData\n            ) =>\n              filterResources(\n                resources,\n                storeData,\n                query,\n                this.config.resourceDefinitions,\n                this.config.filteringConfig\n              )\n          );\n      }\n      return selected$.distinctUntilChanged();\n    };\n  }\n/**\n * @return {?}\n */\npublic getStoreQueries$() {\n    return (state$: Store<NgrxJsonApiStore>) => {\n      return state$.select('queries');\n    };\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic getResourceQuery$(queryId: string) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreQueries$())\n        .map(it => (it ? it[queryId] : undefined));\n    };\n  }\n/**\n * @param {?} identifier\n * @return {?}\n */\npublic getStoreResource$(identifier: ResourceIdentifier) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreResourceOfType$(identifier.type))\n        .map(\n          resources => /** @type {?} */((\n            (resources ? resources[identifier.id] : undefined) as StoreResource))\n        );\n    };\n  }\n/**\n * @param {?} queryId\n * @param {?} denormalize\n * @return {?}\n */\npublic getManyResults$(queryId: string, denormalize: boolean) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$.map(state => {\n        let /** @type {?} */ storeQuery = state.queries[queryId];\n        if (!storeQuery) {\n          return undefined;\n        }\n\n        if (_.isEmpty(storeQuery.resultIds)) {\n          let /** @type {?} */ queryResult: ManyQueryResult = {\n            ...storeQuery,\n            data: _.isUndefined(storeQuery.resultIds) ? undefined : [],\n          };\n          return queryResult;\n        } else {\n          let /** @type {?} */ results = storeQuery.resultIds.map(\n            id => (state.data[id.type] ? state.data[id.type][id.id] : undefined)\n          );\n          if (denormalize) {\n            results = denormaliseStoreResources(results, state.data);\n          }\n          return {\n            ...storeQuery,\n            data: /** @type {?} */(( results as Array<StoreResource>)),\n          };\n        }\n      });\n    };\n  }\n/**\n * @param {?} queryId\n * @param {?} denormalize\n * @return {?}\n */\npublic getOneResult$(queryId: string, denormalize: boolean) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$.map(state => {\n        let /** @type {?} */ storeQuery = state.queries[queryId];\n        if (!storeQuery) {\n          return undefined;\n        }\n\n        if (_.isEmpty(storeQuery.resultIds)) {\n          let /** @type {?} */ queryResult: ManyQueryResult = {\n            ...storeQuery,\n            data: _.isUndefined(storeQuery.resultIds) ? undefined : null,\n          };\n          return queryResult;\n        } else {\n          if (storeQuery.resultIds.length >= 2) {\n            throw new Error(\n              'expected single result for query ' + storeQuery.query.queryId\n            );\n          }\n\n          let /** @type {?} */ resultId = storeQuery.resultIds[0];\n          let /** @type {?} */ result = state.data[resultId.type]\n            ? state.data[resultId.type][resultId.id]\n            : undefined;\n          if (denormalize) {\n            result = denormaliseStoreResource(result, state.data);\n          }\n          return {\n            ...storeQuery,\n            data: result,\n          };\n        }\n      });\n    };\n  }\n/**\n * @param {?} identifier\n * @return {?}\n */\npublic getPersistedResource$(identifier: ResourceIdentifier) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreResource$(identifier))\n        .map(it => (it ? it.persistedResource : undefined));\n    };\n  }\n}\n\nfunction NgrxJsonApiSelectors_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiSelectors.prototype.config;\n}\n\n","import * as _ from 'lodash/index';\n\nimport {\n  HttpHeaders,\n  HttpClient,\n  HttpRequest,\n  // required for building\n  HttpHeaderResponse,\n  HttpProgressEvent,\n  HttpResponse,\n  HttpSentEvent,\n  HttpUserEvent,\n} from '@angular/common/http';\n\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/observable/throw';\n\nimport {\n  Document,\n  NgrxJsonApiConfig,\n  OperationType,\n  ResourceDefinition,\n  Query,\n  QueryParams,\n} from './interfaces';\nimport {\n  generateIncludedQueryParams,\n  generateFieldsQueryParams,\n  generateFilteringQueryParams,\n  generateSortingQueryParams,\n  generateQueryParams,\n} from './utils';\nexport class NgrxJsonApi {\npublic headers: HttpHeaders = new HttpHeaders({\n    'Content-Type': 'application/vnd.api+json',\n    Accept: 'application/vnd.api+json',\n  });\npublic requestUrl: string;\npublic definitions = this.config.resourceDefinitions;\n/**\n * @param {?} http\n * @param {?} config\n */\nconstructor(private http: HttpClient,\npublic config: NgrxJsonApiConfig) {}\n/**\n * @param {?} query\n * @param {?} operation\n * @return {?}\n */\nprivate urlBuilder(query: Query, operation: OperationType) {\n    switch (operation) {\n      case 'GET': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        } else if (query.type) {\n          return this.collectionUrlFor(query.type);\n        }\n      }\n      case 'DELETE': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        }\n      }\n      case 'PATCH': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        }\n      }\n      case 'POST': {\n        return this.collectionUrlFor(query.type);\n      }\n    }\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate collectionPathFor(type: string) {\n    // assume that type == collectionPath if not configured otherwise\n    let /** @type {?} */ definition = _.find(this.definitions, { type: type });\n    if (definition) {\n      return `${definition.collectionPath}`;\n    } else {\n      return type;\n    }\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate collectionUrlFor(type: string) {\n    let /** @type {?} */ collectionPath = this.collectionPathFor(type);\n    return `${this.config.apiUrl}/${collectionPath}`;\n  }\n/**\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nprivate resourcePathFor(type: string, id: string) {\n    let /** @type {?} */ collectionPath = this.collectionPathFor(type);\n    return `${collectionPath}/${encodeURIComponent(id)}`;\n  }\n/**\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nprivate resourceUrlFor(type: string, id: string) {\n    let /** @type {?} */ resourcePath = this.resourcePathFor(type, id);\n    return `${this.config.apiUrl}/${resourcePath}`;\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic find(query: Query) {\n    let /** @type {?} */ _generateIncludedQueryParams = generateIncludedQueryParams;\n    let /** @type {?} */ _generateFilteringQueryParams = generateFilteringQueryParams;\n    let /** @type {?} */ _generateFieldsQueryParams = generateFieldsQueryParams;\n    let /** @type {?} */ _generateSortingQueryParams = generateSortingQueryParams;\n    let /** @type {?} */ _generateQueryParams = generateQueryParams;\n\n    if (this.config.hasOwnProperty('urlBuilder')) {\n      let /** @type {?} */ urlBuilder = this.config.urlBuilder;\n\n      if (urlBuilder.generateIncludedQueryParams) {\n        _generateIncludedQueryParams = urlBuilder.generateIncludedQueryParams;\n      }\n      if (urlBuilder.generateFilteringQueryParams) {\n        _generateFilteringQueryParams = urlBuilder.generateFilteringQueryParams;\n      }\n      if (urlBuilder.generateFieldsQueryParams) {\n        _generateFieldsQueryParams = urlBuilder.generateFieldsQueryParams;\n      }\n      if (urlBuilder.generateSortingQueryParams) {\n        _generateSortingQueryParams = urlBuilder.generateSortingQueryParams;\n      }\n      if (urlBuilder.generateQueryParams) {\n        _generateQueryParams = urlBuilder.generateQueryParams;\n      }\n    }\n\n    let /** @type {?} */ queryParams = '';\n    let /** @type {?} */ includedParam = '';\n    let /** @type {?} */ filteringParams = '';\n    let /** @type {?} */ sortingParams = '';\n    let /** @type {?} */ fieldsParams = '';\n    let /** @type {?} */ offsetParams = '';\n    let /** @type {?} */ limitParams = '';\n\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (query.hasOwnProperty('params') && !_.isEmpty(query.params)) {\n      if (_.hasIn(query.params, 'include')) {\n        includedParam = _generateIncludedQueryParams(query.params.include);\n      }\n      if (_.hasIn(query.params, 'filtering')) {\n        filteringParams = _generateFilteringQueryParams(query.params.filtering);\n      }\n      if (_.hasIn(query.params, 'sorting')) {\n        sortingParams = _generateSortingQueryParams(query.params.sorting);\n      }\n      if (_.hasIn(query.params, 'fields')) {\n        fieldsParams = _generateFieldsQueryParams(query.params.fields);\n      }\n      if (_.hasIn(query.params, 'limit')) {\n        limitParams = 'page[limit]=' + query.params.limit;\n      }\n      if (_.hasIn(query.params, 'offset')) {\n        offsetParams = 'page[offset]=' + query.params.offset;\n      }\n    }\n    queryParams = _generateQueryParams(\n      includedParam,\n      filteringParams,\n      sortingParams,\n      fieldsParams,\n      offsetParams,\n      limitParams\n    );\n\n    let /** @type {?} */ requestOptions = {\n      method: 'GET',\n      url: this.urlBuilder(query, 'GET') + queryParams,\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @param {?} document\n * @return {?}\n */\npublic create(query: Query, document: Document) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (typeof document === undefined) {\n      return Observable.throw('Data not found');\n    }\n\n    let /** @type {?} */ requestOptions = {\n      method: 'POST',\n      url: this.urlBuilder(query, 'POST'),\n      body: JSON.stringify({ data: document.data }),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @param {?} document\n * @return {?}\n */\npublic update(query: Query, document: Document) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (typeof document === undefined) {\n      return Observable.throw('Data not found');\n    }\n    let /** @type {?} */ requestOptions = {\n      method: 'PATCH',\n      url: this.urlBuilder(query, 'PATCH'),\n      body: JSON.stringify({ data: document.data }),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic delete(query: Query) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    let /** @type {?} */ requestOptions = {\n      method: 'DELETE',\n      url: this.urlBuilder(query, 'DELETE'),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} requestOptions\n * @return {?}\n */\nprivate request(requestOptions: any) {\n    let /** @type {?} */ request: HttpRequest<any>;\n    let /** @type {?} */ newRequestOptions = {\n      ...requestOptions,\n      headers: this.headers,\n      observe: 'response',\n    };\n\n    if (requestOptions.method === 'GET') {\n      let { method, url, ...init } = newRequestOptions;\n      return this.http.get(url, init);\n    } else if (requestOptions.method === 'POST') {\n      let { method, url, body, ...init } = newRequestOptions;\n      return this.http.post(url, body, init);\n    } else if (requestOptions.method === 'PATCH') {\n      let { method, url, body, ...init } = newRequestOptions;\n      return this.http.patch(url, body, init);\n    } else if (requestOptions.method === 'DELETE') {\n      let { method, url, ...init } = newRequestOptions;\n      return this.http.delete(url, init);\n    }\n  }\n}\n\nfunction NgrxJsonApi_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApi.prototype.headers;\n/** @type {?} */\nNgrxJsonApi.prototype.requestUrl;\n/** @type {?} */\nNgrxJsonApi.prototype.definitions;\n/** @type {?} */\nNgrxJsonApi.prototype.http;\n/** @type {?} */\nNgrxJsonApi.prototype.config;\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/let';\n\nimport { NgrxJsonApiService } from './services';\nimport { Resource, ResourceIdentifier, StoreResource } from './interfaces';\nexport class SelectStoreResourcePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} id\n * @return {?}\n */\ntransform(id: ResourceIdentifier): Observable<StoreResource> {\n    return this.service.selectStoreResource(id);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'jaSelectStoreResource' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction SelectStoreResourcePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectStoreResourcePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectStoreResourcePipe.ctorParameters;\n/** @type {?} */\nSelectStoreResourcePipe.prototype.service;\n}\n\nexport class DenormaliseStoreResourcePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} obs\n * @return {?}\n */\ntransform(\n    obs: Observable<StoreResource> | Observable<StoreResource[]>\n  ): Observable<StoreResource> | Observable<StoreResource[]> {\n    return this.service.denormaliseResource(obs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'denormaliseStoreResource' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction DenormaliseStoreResourcePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDenormaliseStoreResourcePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDenormaliseStoreResourcePipe.ctorParameters;\n/** @type {?} */\nDenormaliseStoreResourcePipe.prototype.service;\n}\n\nexport class GetDenormalisedValuePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} path\n * @param {?} storeResource\n * @return {?}\n */\ntransform(path: string, storeResource: StoreResource): any {\n    return this.service.getDenormalisedValue(path, storeResource);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'getDenormalisedValue' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction GetDenormalisedValuePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nGetDenormalisedValuePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGetDenormalisedValuePipe.ctorParameters;\n/** @type {?} */\nGetDenormalisedValuePipe.prototype.service;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import * as _ from 'lodash/index';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/finally';\n\nimport { Store } from '@ngrx/store';\n\nimport { NgrxJsonApiSelectors } from './selectors';\nimport {\n  ApiApplyInitAction,\n  ApiPostInitAction,\n  ApiGetInitAction,\n  ApiPatchInitAction,\n  ApiDeleteInitAction,\n  DeleteStoreResourceAction,\n  PatchStoreResourceAction,\n  PostStoreResourceAction,\n  RemoveQueryAction,\n  LocalQueryInitAction,\n  ClearStoreAction,\n  CompactStoreAction,\n  ApiQueryRefreshAction,\n  ModifyStoreResourceErrorsAction,\n  NewStoreResourceAction,\n} from './actions';\nimport {\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  Resource,\n  ResourceIdentifier,\n  Query,\n  QueryResult,\n  OneQueryResult,\n  ManyQueryResult,\n  StoreResource,\n  ResourceError,\n} from './interfaces';\nimport {\n  denormaliseStoreResource,\n  denormaliseStoreResources,\n  getDenormalisedPath,\n  getDenormalisedValue,\n  uuid,\n} from './utils';\n\nexport interface FindOptions {\n  query: Query;\n  fromServer?: boolean;\n  denormalise?: boolean;\n}\n\nexport interface PutQueryOptions {\n  query: Query;\n  fromServer?: boolean;\n}\n\nexport interface PostResourceOptions {\n  resource: Resource;\n  toRemote?: boolean;\n}\n\nexport interface PatchResourceOptions {\n  resource: Resource;\n  toRemote?: boolean;\n}\n\nexport interface NewResourceOptions {\n  resource: Resource;\n}\n\nexport interface DeleteResourceOptions {\n  resourceId: ResourceIdentifier;\n  toRemote?: boolean;\n}\n\n/**\n * This internface is deprecated, do no longer use.\n */\nexport interface Options {\n  query?: Query;\n  denormalise?: boolean;\n  fromServer?: boolean;\n  resource?: Resource;\n  toRemote?: boolean;\n  resourceId?: ResourceIdentifier;\n}\nexport class NgrxJsonApiService {\nprivate test = true;\n/**\n * Keeps current snapshot of the store to allow fast access to resources.\n */\nprivate _storeSnapshot: NgrxJsonApiStore;\n/**\n * @param {?} store\n * @param {?} selectors\n */\nconstructor(\nprivate store: Store<any>,\nprivate selectors: NgrxJsonApiSelectors\n  ) {}\n/**\n * @param {?} options\n * @return {?}\n */\npublic findOne(options: FindOptions): Observable<OneQueryResult> {\n    return /** @type {?} */(( <Observable<OneQueryResult>>this.findInternal(options, false)));\n  }\n/**\n * @param {?} options\n * @return {?}\n */\npublic findMany(options: FindOptions): Observable<ManyQueryResult> {\n    return /** @type {?} */(( <Observable<ManyQueryResult>>this.findInternal(options, true)));\n  }\n/**\n * @return {?}\n */\npublic get storeSnapshot() {\n    if (!this._storeSnapshot) {\n      this.store\n        .let(this.selectors.getNgrxJsonApiStore$())\n        .subscribe(it => (this._storeSnapshot = /** @type {?} */(( it as NgrxJsonApiStore))));\n\n      if (!this._storeSnapshot) {\n        throw new Error('failed to initialize store snapshot');\n      }\n    }\n    return this._storeSnapshot;\n  }\n/**\n * Adds the given query to the store. Any existing query with the same queryId is replaced.\n * Make use of selectResults(...) to fetch the data.\n * @param {?} options\n * @return {?}\n */\npublic putQuery(options: PutQueryOptions) {\n    let /** @type {?} */ query = options.query;\n    let /** @type {?} */ fromServer = _.isUndefined(options.fromServer)\n      ? true\n      : options.fromServer;\n\n    if (!query.queryId) {\n      throw new Error('to query must have a queryId');\n    }\n\n    if (fromServer) {\n      this.store.dispatch(new ApiGetInitAction(query));\n    } else {\n      this.store.dispatch(new LocalQueryInitAction(query));\n    }\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic refreshQuery(queryId: string) {\n    this.store.dispatch(new ApiQueryRefreshAction(queryId));\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic removeQuery(queryId: string) {\n    this.store.dispatch(new RemoveQueryAction(queryId));\n  }\n/**\n * @param {?} options\n * @param {?} multi\n * @return {?}\n */\nprivate findInternal(\n    options: FindOptions,\n    multi: boolean\n  ): Observable<QueryResult> {\n    let /** @type {?} */ query = options.query;\n    let /** @type {?} */ fromServer = _.isUndefined(options.fromServer)\n      ? true\n      : options.fromServer;\n    let /** @type {?} */ denormalise = _.isUndefined(options.denormalise)\n      ? false\n      : options.denormalise;\n\n    let /** @type {?} */ newQuery: Query;\n    if (!query.queryId) {\n      newQuery = { ...query, queryId: this.uuid() };\n    } else {\n      newQuery = query;\n    }\n\n    this.putQuery({ query: newQuery, fromServer });\n\n    let /** @type {?} */ queryResult$: Observable<QueryResult>;\n    if (multi) {\n      queryResult$ = this.selectManyResults(newQuery.queryId, denormalise);\n    } else {\n      queryResult$ = this.selectOneResults(newQuery.queryId, denormalise);\n    }\n\n    return /** @type {?} */(( <Observable<QueryResult>>queryResult$.finally(() =>\n      this.removeQuery(newQuery.queryId)\n    )));\n  }\n/**\n * @return {?}\n */\nprivate uuid() {\n    return uuid();\n  }\n/**\n * Gets the current persisted state of the given resources.\n * Consider the use of selectResource(...) to get an observable of the resource.\n * \n * @param {?} identifier\n * @return {?}\n */\npublic getPersistedResourceSnapshot(identifier: ResourceIdentifier) {\n    let /** @type {?} */ snapshot = this.storeSnapshot;\n    if (\n      snapshot.data[identifier.type] &&\n      snapshot.data[identifier.type][identifier.id]\n    ) {\n      return snapshot.data[identifier.type][identifier.id].persistedResource;\n    }\n    return null;\n  }\n/**\n * Gets the current state of the given resources in the store.\n * Consider the use of selectResource(...) to get an observable of the resource.\n * \n * @param {?} identifier\n * @return {?}\n */\npublic getResourceSnapshot(identifier: ResourceIdentifier) {\n    let /** @type {?} */ snapshot = this.storeSnapshot;\n    if (\n      snapshot.data[identifier.type] &&\n      snapshot.data[identifier.type][identifier.id]\n    ) {\n      return snapshot.data[identifier.type][identifier.id];\n    }\n    return null;\n  }\n/**\n * Selects the data of the given query.\n * \n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?} observable holding the data as array of resources.\n */\npublic selectManyResults(\n    queryId: string,\n    denormalize = false\n  ): Observable<ManyQueryResult> {\n    let /** @type {?} */ queryResult$ = this.store\n      .let(this.selectors.getNgrxJsonApiStore$())\n      .let(this.selectors.getManyResults$(queryId, denormalize));\n    return queryResult$;\n  }\n/**\n * Selects the data of the given query.\n * \n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?} observable holding the data as array of resources.\n */\npublic selectOneResults(\n    queryId: string,\n    denormalize = false\n  ): Observable<OneQueryResult> {\n    let /** @type {?} */ queryResult$ = this.store\n      .let(this.selectors.getNgrxJsonApiStore$())\n      .let(this.selectors.getOneResult$(queryId, denormalize));\n    return /** @type {?} */(( queryResult$ as Observable<OneQueryResult>));\n  }\n/**\n * @param {?} identifier of the resource\n * @return {?} observable of the resource\n */\npublic selectStoreResource(\n    identifier: ResourceIdentifier\n  ): Observable<StoreResource> {\n    return this.store\n      .let(this.selectors.getNgrxJsonApiStore$())\n      .let(this.selectors.getStoreResource$(identifier));\n  }\n/**\n * @param {?} storeResource$\n * @return {?}\n */\npublic denormaliseResource(\n    storeResource$: Observable<StoreResource> | Observable<StoreResource[]>\n  ): Observable<StoreResource> | Observable<StoreResource[]> {\n    return /** @type {?} */(( <\n      | Observable<StoreResource>\n      | Observable<StoreResource[]>>storeResource$.combineLatest(\n      this.store\n        .let(this.selectors.getNgrxJsonApiStore$())\n        .let(this.selectors.getStoreData$()),\n      (\n        storeResource: StoreResource | StoreResource[],\n        storeData: NgrxJsonApiStoreData\n      ) => {\n        if (_.isArray(storeResource)) {\n          return denormaliseStoreResources( /** @type {?} */((\n            storeResource as Array<StoreResource>)),\n            storeData\n          );\n        } else {\n          let /** @type {?} */ resource = /** @type {?} */(( storeResource as StoreResource));\n          return /** @type {?} */(( denormaliseStoreResource(resource, storeData) as StoreResource));\n        }\n      }\n    )));\n  }\n/**\n * @param {?} path\n * @param {?} resourceType\n * @return {?}\n */\npublic getDenormalisedPath(path: string, resourceType: string): string {\n    let /** @type {?} */ pathSeparator = /** @type {?} */(( _.get(\n      this.selectors.config,\n      'filteringConfig.pathSeparator'\n    ) as string));\n    return getDenormalisedPath(\n      path,\n      resourceType,\n      this.selectors.config.resourceDefinitions,\n      pathSeparator\n    );\n  }\n/**\n * @param {?} path\n * @param {?} storeResource\n * @return {?}\n */\npublic getDenormalisedValue(path: string, storeResource: StoreResource): any {\n    let /** @type {?} */ pathSeparator = /** @type {?} */(( _.get(\n      this.selectors.config,\n      'filteringConfig.pathSeparator'\n    ) as string));\n    return getDenormalisedValue(\n      path,\n      storeResource,\n      this.selectors.config.resourceDefinitions,\n      pathSeparator\n    );\n  }\n/**\n * Updates the given resource in the store with the provided data.\n * Use commit() to send the changes to the remote JSON API endpoint.\n * \n * @param {?} options\n * @return {?}\n */\npublic patchResource(options: PatchResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiPatchInitAction(resource));\n    } else {\n      this.store.dispatch(new PatchStoreResourceAction(resource));\n    }\n  }\n/**\n * Creates a new resources that is hold locally in the store\n * and my later be posted.\n * \n * @param {?} options\n * @return {?}\n */\npublic newResource(options: NewResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    this.store.dispatch(new NewStoreResourceAction(resource));\n  }\n/**\n * Adds the given resource to the store. Any already existing\n * resource with the same id gets replaced. Use commit() to send\n * the changes to the remote JSON API endpoint.\n * \n * @param {?} options\n * @return {?}\n */\npublic postResource(options: PostResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiPostInitAction(resource));\n    } else {\n      this.store.dispatch(new PostStoreResourceAction(resource));\n    }\n  }\n/**\n * Marks the given resource for deletion.\n * \n * @param {?} options\n * @return {?}\n */\npublic deleteResource(options: DeleteResourceOptions) {\n    let /** @type {?} */ resourceId = options.resourceId;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiDeleteInitAction(resourceId));\n    } else {\n      this.store.dispatch(new DeleteStoreResourceAction(resourceId));\n    }\n  }\n/**\n * Applies all pending changes to the remote JSON API endpoint.\n * @return {?}\n */\npublic apply() {\n    this.store.dispatch(new ApiApplyInitAction({}));\n  }\n/**\n * Clear all the contents from the store.\n * @return {?}\n */\npublic clear() {\n    this.store.dispatch(new ClearStoreAction());\n  }\n/**\n * Compacts the store by removing unreferences and unchanges resources.\n * @return {?}\n */\npublic compact() {\n    this.store.dispatch(new CompactStoreAction());\n  }\n/**\n * Adds the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic addResourceErrors(\n    id: ResourceIdentifier,\n    errors: Array<ResourceError>\n  ) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'ADD',\n      })\n    );\n  }\n/**\n * Removes the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic removeResourceErrors(\n    id: ResourceIdentifier,\n    errors: Array<ResourceError>\n  ) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'REMOVE',\n      })\n    );\n  }\n/**\n * Sets the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic setResourceErrors(\n    id: ResourceIdentifier,\n    errors: Array<ResourceError>\n  ) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'SET',\n      })\n    );\n  }\n}\n\nfunction NgrxJsonApiService_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiService.prototype.test;\n/**\n * Keeps current snapshot of the store to allow fast access to resources.\n * @type {?}\n */\nNgrxJsonApiService.prototype._storeSnapshot;\n/** @type {?} */\nNgrxJsonApiService.prototype.store;\n/** @type {?} */\nNgrxJsonApiService.prototype.selectors;\n}\n\n","import * as _ from 'lodash/index';\n\nimport { Actions } from '@ngrx/effects';\n\nimport {\n  Direction,\n  Document,\n  FilteringOperator,\n  FilteringParam,\n  NgrxJsonApiFilteringConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  NgrxJsonApiStoreResources,\n  NgrxJsonApiStoreQueries,\n  OperationType,\n  Payload,\n  Query,\n  Resource,\n  ResourceDefinition,\n  ResourceIdentifier,\n  ResourceError,\n  ResourceState,\n  StoreQuery,\n  SortingParam,\n  StoreResource,\n  ErrorModificationType,\n} from './interfaces';\n\nexport const /** @type {?} */ denormaliseObject = (\n  resource: Resource,\n  storeData: NgrxJsonApiStoreData,\n  bag: NgrxJsonApiStoreData\n): any => {\n  // this function MUST MUTATE resource\n  let /** @type {?} */ denormalised = resource;\n\n  if (resource.hasOwnProperty('relationships')) {\n    Object.keys(resource.relationships).forEach(relation => {\n      resource.relationships[relation]['reference'] = /** @type {?} */(( {} as Resource));\n      let /** @type {?} */ data: ResourceIdentifier | Array<ResourceIdentifier> =\n        resource.relationships[relation].data;\n      // denormalised relation\n      let /** @type {?} */ relationDenorm;\n\n      if (data === null || _.isEqual(data, [])) {\n        relationDenorm = data;\n      } else if (_.isPlainObject(data)) {\n        // hasOne relation\n        let /** @type {?} */ relatedRS = getSingleStoreResource( /** @type {?} */((\n          <ResourceIdentifier>data)),\n          storeData\n        );\n        relationDenorm = denormaliseStoreResource(relatedRS, storeData, bag);\n      } else if (_.isArray(data)) {\n        // hasMany relation\n        let /** @type {?} */ relatedRSs: Array<StoreResource> = getMultipleStoreResource( /** @type {?} */((\n          <ResourceIdentifier[]>data)),\n          storeData\n        );\n        relationDenorm = relatedRSs.map(r =>\n          denormaliseStoreResource(r, storeData, bag)\n        );\n      }\n      let /** @type {?} */ relationDenormPath = 'relationships.' + relation + '.reference';\n      denormalised = /** @type {?} */(( <Resource>_.set(\n        denormalised,\n        relationDenormPath,\n        relationDenorm\n      )));\n    });\n  }\n\n  return denormalised;\n};\n\nexport const /** @type {?} */ denormaliseStoreResources = (\n  items: Array<StoreResource>,\n  storeData: NgrxJsonApiStoreData,\n  bag: any = {}\n): Array<StoreResource> => {\n  let /** @type {?} */ results: Array<StoreResource> = [];\n  for (let /** @type {?} */ item of items) {\n    results.push(denormaliseStoreResource(item, storeData, bag));\n  }\n  return results;\n};\n\nexport const /** @type {?} */ denormaliseStoreResource = (\n  item: StoreResource,\n  storeData: NgrxJsonApiStoreData,\n  bag: any = {}\n): any => {\n  if (!item) {\n    return null;\n  }\n  let /** @type {?} */ storeResource = _.cloneDeep( /** @type {?} */((<StoreResource>item)));\n\n  if (_.isUndefined(bag[storeResource.type])) {\n    bag[storeResource.type] = {};\n  }\n  if (_.isUndefined(bag[storeResource.type][storeResource.id])) {\n    bag[storeResource.type][storeResource.id] = storeResource;\n    storeResource = denormaliseObject(storeResource, storeData, bag);\n    if (storeResource.persistedResource) {\n      storeResource.persistedResource = denormaliseObject(\n        storeResource.persistedResource,\n        storeData,\n        bag\n      );\n    }\n  }\n\n  return bag[storeResource.type][storeResource.id];\n};\n\nexport const /** @type {?} */ getSingleStoreResource = (\n  resourceId: ResourceIdentifier,\n  storeData: NgrxJsonApiStoreData\n): StoreResource => {\n  return _.get(storeData, [resourceId.type, resourceId.id], null);\n};\n\nexport const /** @type {?} */ getMultipleStoreResource = (\n  resourceIds: Array<ResourceIdentifier>,\n  resources: NgrxJsonApiStoreData\n): Array<StoreResource> => {\n  return resourceIds.map(id => getSingleStoreResource(id, resources));\n};\n\nexport const /** @type {?} */ getDenormalisedPath = (\n  path: string,\n  baseResourceType: string,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n): string => {\n  let /** @type {?} */ denormPath: string[] = [];\n  if (_.isUndefined(pathSeparator)) {\n    pathSeparator = '.';\n  }\n  let /** @type {?} */ fields: Array<string> = path.split(pathSeparator);\n  let /** @type {?} */ currentResourceType = baseResourceType;\n  for (let /** @type {?} */ i = 0; i < fields.length; i++) {\n    let /** @type {?} */ definition = _.find(resourceDefinitions, { type: currentResourceType });\n\n    if (_.isUndefined(definition)) {\n      throw new Error('Definition not found');\n    }\n    // if both attributes and relationships are missing, raise an error\n    if (\n      _.isUndefined(definition.attributes) &&\n      _.isUndefined(definition.relationships)\n    ) {\n      throw new Error('Attributes or Relationships must be provided');\n    }\n\n    if (definition.attributes.hasOwnProperty(fields[i])) {\n      denormPath.push('attributes', fields[i]);\n      break;\n    } else if (definition.relationships.hasOwnProperty(fields[i])) {\n      let /** @type {?} */ resourceRelation = definition.relationships[fields[i]];\n      if (resourceRelation.relationType === 'hasMany') {\n        if (i !== fields.length - 1) {\n          throw new Error('Cannot filter past a hasMany relation');\n        } else {\n          denormPath.push('relationships', fields[i], 'reference');\n        }\n      } else {\n        currentResourceType = resourceRelation.type;\n        denormPath.push('relationships', fields[i], 'reference');\n      }\n    } else {\n      throw new Error('Cannot find field in attributes or relationships');\n    }\n  }\n  return denormPath.join(pathSeparator);\n};\n\nexport const /** @type {?} */ getDenormalisedValue = (\n  path: string,\n  storeResource: StoreResource,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n) => {\n  let /** @type {?} */ denormalisedPath = getDenormalisedPath(\n    path,\n    storeResource.type,\n    resourceDefinitions,\n    pathSeparator\n  );\n  return _.get(storeResource, denormalisedPath);\n};\n/**\n * Given two objects, it will merge the second in the first.\n * \n */\nexport const updateResourceObject = (\n  original: Resource,\n  source: Resource\n): Resource => {\n  // by default arrays would make use of concat.\n  function customizer(objValue: any, srcValue: any) {\n    if (_.isArray(objValue)) {\n      return srcValue;\n    }\n  }\n\n  return _.mergeWith({}, original, source, customizer);\n};\n/**\n * Insert a StoreResource given the Resource and the StoreResources\n * \n */\nexport const insertStoreResource = (\n  storeResources: NgrxJsonApiStoreResources,\n  resource: Resource,\n  fromServer: boolean\n): NgrxJsonApiStoreResources => {\n  let newStoreResources = { ...storeResources };\n  if (fromServer) {\n    newStoreResources[resource.id] = {\n      ...resource,\n      persistedResource: resource,\n      state: 'IN_SYNC',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n  } else {\n    newStoreResources[resource.id] = {\n      ...resource,\n      persistedResource: null,\n      state: 'CREATED',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n  }\n  return _.isEqual(storeResources, newStoreResources)\n    ? storeResources\n    : newStoreResources;\n};\n/**\n * Removes a StoreResource given the Resource and the StoreResources\n * \n */\nexport const removeStoreResource = (\n  storeData: NgrxJsonApiStoreData,\n  resourceId: ResourceIdentifier\n): NgrxJsonApiStoreData => {\n  if (storeData[resourceId.type][resourceId.id]) {\n    let newState: NgrxJsonApiStoreData = { ...storeData };\n    newState[resourceId.type] = { ...newState[resourceId.type] };\n    delete newState[resourceId.type][resourceId.id];\n    return newState;\n  }\n  return storeData;\n};\n/**\n * Updates the state of a StoreResource in the store.\n * \n * @param storeData\n * @param resourceId\n * @param resourceState\n * @param loading\n */\nexport const updateResourceState = (\n  storeData: NgrxJsonApiStoreData,\n  resourceId: ResourceIdentifier,\n  resourceState?: ResourceState,\n  loading?: OperationType\n): NgrxJsonApiStoreData => {\n  if (\n    _.isUndefined(storeData[resourceId.type]) ||\n    _.isUndefined(storeData[resourceId.type][resourceId.id])\n  ) {\n    if (resourceState === 'DELETED') {\n      let newState: NgrxJsonApiStoreData = { ...storeData };\n      newState[resourceId.type] = { ...newState[resourceId.type] };\n      newState[resourceId.type][resourceId.id] = {\n        ...newState[resourceId.type][resourceId.id],\n      };\n      newState[resourceId.type][resourceId.id] = {\n        type: resourceId.type,\n        id: resourceId.id,\n        persistedResource: null,\n      } as StoreResource;\n      newState[resourceId.type][resourceId.id].state = 'NOT_LOADED';\n      return newState;\n    } else {\n      return storeData;\n    }\n  }\n  let newState: NgrxJsonApiStoreData = { ...storeData };\n  newState[resourceId.type] = { ...newState[resourceId.type] };\n  newState[resourceId.type][resourceId.id] = {\n    ...newState[resourceId.type][resourceId.id],\n  };\n  if (resourceState !== null) {\n    newState[resourceId.type][resourceId.id].state = resourceState;\n  }\n  if (loading != null) {\n    newState[resourceId.type][resourceId.id].loading = loading;\n  }\n  return newState;\n};\n/**\n * Check equality of resource and ignore additional contents used by the\n * store (state, persistedResource, etc.)\n * @param resource0\n * @param resource1\n */\nexport const isEqualResource = (\n  resource0: Resource,\n  resource1: Resource\n): boolean => {\n  if (resource0 === resource1) {\n    return true;\n  }\n  if (resource0 !== null !== (resource1 !== null)) {\n    return false;\n  }\n\n  return (\n    _.isEqual(resource0.id, resource1.id) &&\n    _.isEqual(resource0.type, resource1.type) &&\n    _.isEqual(resource0.attributes, resource1.attributes) &&\n    _.isEqual(resource0.meta, resource1.meta) &&\n    _.isEqual(resource0.links, resource1.links) &&\n    _.isEqual(resource0.relationships, resource1.relationships)\n  );\n};\n\nexport const /** @type {?} */ updateStoreResource = (\n  state: NgrxJsonApiStoreResources,\n  resource: Resource,\n  fromServer: boolean\n): NgrxJsonApiStoreResources => {\n  let /** @type {?} */ foundStoreResource = state[resource.id];\n  let /** @type {?} */ persistedResource = state[resource.id].persistedResource;\n\n  let /** @type {?} */ newResource: Resource;\n  let /** @type {?} */ newResourceState: ResourceState;\n  if (fromServer) {\n    // form server, override everything\n    // TODO need to handle check and keep local updates?\n    newResource = resource;\n    persistedResource = resource;\n    newResourceState = 'IN_SYNC';\n  } else {\n    let /** @type {?} */ mergedResource = updateResourceObject(foundStoreResource, resource);\n    if (isEqualResource(mergedResource, persistedResource)) {\n      // no changes anymore, do nothing\n      newResource = persistedResource;\n      newResourceState = 'IN_SYNC';\n    } else {\n      // merge changes and mark as CREATED or UPDATED depending on whether\n      // an original version is available\n      newResource = mergedResource;\n      if (persistedResource !== null) {\n        newResourceState = 'UPDATED';\n      } else if (foundStoreResource.state === 'NEW') {\n        newResourceState = 'NEW';\n      } else {\n        newResourceState = 'CREATED';\n      }\n    }\n  }\n\n  let /** @type {?} */ newState = { ...state };\n  newState[resource.id] = /** @type {?} */(( {\n    ...newResource,\n    persistedResource: persistedResource,\n    state: newResourceState,\n    errors: [],\n    loading: false,\n  } as StoreResource));\n\n  return _.isEqual(newState[resource.id], state[resource.id])\n    ? state\n    : newState;\n};\n\nexport const /** @type {?} */ updateQueriesForDeletedResource = (\n  state: NgrxJsonApiStoreQueries,\n  deletedId: ResourceIdentifier\n): NgrxJsonApiStoreQueries => {\n  let /** @type {?} */ newState: NgrxJsonApiStoreQueries = state;\n  for (let /** @type {?} */ queryId in state) {\n    if (state.hasOwnProperty(queryId)) {\n      let /** @type {?} */ queryState = state[queryId];\n      if (\n        queryState.query.id === deletedId.id &&\n        queryState.query.type === deletedId.type\n      ) {\n        // found a query for a resource that was deleted => modify to 404\n        newState = clearQueryResult(newState, queryState.query.queryId);\n        let /** @type {?} */ notFoundError: ResourceError = { code: '404', status: 'Not Found' };\n        newState[queryState.query.queryId].errors = [notFoundError];\n      }\n    }\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ updateResourceErrorsForQuery = (\n  storeData: NgrxJsonApiStoreData,\n  query: Query,\n  document: Document\n): NgrxJsonApiStoreData => {\n  if (!query.type || !query.id || document.data instanceof Array) {\n    throw new Error('invalid parameters');\n  }\n  return updateResourceErrors(\n    storeData,\n    { id: query.id, type: query.type },\n    document.errors,\n    'SET'\n  );\n};\n\nexport const /** @type {?} */ updateResourceErrors = (\n  storeData: NgrxJsonApiStoreData,\n  id: ResourceIdentifier,\n  errors: Array<ResourceError>,\n  modificationType: ErrorModificationType\n): NgrxJsonApiStoreData => {\n  if (!storeData[id.type] || !storeData[id.type][id.id]) {\n    return storeData;\n  }\n  let /** @type {?} */ newState: NgrxJsonApiStoreData = { ...storeData };\n  newState[id.type] = { ...newState[id.type] };\n  let /** @type {?} */ storeResource = { ...newState[id.type][id.id] };\n\n  if (modificationType === 'SET') {\n    storeResource.errors = [];\n    if (errors) {\n      storeResource.errors.push(...errors);\n    }\n  } else if (modificationType === 'ADD') {\n    let /** @type {?} */ currentErrors = storeResource.errors;\n    storeResource.errors = [];\n    if (currentErrors) {\n      storeResource.errors.push(...currentErrors);\n    }\n    if (errors) {\n      storeResource.errors.push(...errors);\n    }\n  } else {\n    let /** @type {?} */ currentErrors = storeResource.errors;\n    storeResource.errors = [];\n    if (currentErrors) {\n      for (let /** @type {?} */ currentError of currentErrors) {\n        let /** @type {?} */ remove =\n          errors && errors.filter(it => _.isEqual(it, currentError)).length > 0;\n        if (!remove) {\n          storeResource.errors.push(currentError);\n        }\n      }\n    }\n  }\n  newState[id.type][id.id] = storeResource;\n  return newState;\n};\n/**\n * @param {?} newState\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nfunction rollbackResource(\n  newState: NgrxJsonApiStoreData,\n  type: string,\n  id: string\n) {\n  let /** @type {?} */ storeResource = newState[type][id];\n  if (!storeResource.persistedResource) {\n    delete newState[type][id];\n  } else if (storeResource.state !== 'IN_SYNC') {\n    newState[type][id] = /** @type {?} */(( <StoreResource>{\n      ...newState[type][id],\n      state: 'IN_SYNC',\n      resource: newState[type][id].persistedResource,\n    }));\n  }\n}\n\nexport const /** @type {?} */ rollbackStoreResources = (\n  storeData: NgrxJsonApiStoreData,\n  ids: Array<ResourceIdentifier>,\n  include: Array<string>\n): NgrxJsonApiStoreData => {\n  let /** @type {?} */ newState: NgrxJsonApiStoreData = { ...storeData };\n\n  if (_.isUndefined(ids)) {\n    Object.keys(newState).forEach(type => {\n      newState[type] = { ...newState[type] };\n      Object.keys(newState[type]).forEach(id => {\n        rollbackResource(newState, type, id);\n      });\n    });\n  } else {\n    let /** @type {?} */ modifiedResources = getPendingChanges(newState, ids, include, true);\n    for (let /** @type {?} */ modifiedResource of modifiedResources) {\n      rollbackResource(newState, modifiedResource.type, modifiedResource.id);\n    }\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ deleteStoreResources = (\n  storeData: NgrxJsonApiStoreData,\n  query: Query\n) => {\n  let /** @type {?} */ newState = { ...storeData };\n  // if an id is not provided, all resources of the provided type will be deleted\n  if (typeof query.id === 'undefined') {\n    newState[query.type] = {};\n  } else {\n    newState[query.type] = /** @type {?} */(( _.omit(newState[query.type], [\n      query.id,\n    ]) as NgrxJsonApiStoreResources));\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ clearQueryResult = (\n  storeData: NgrxJsonApiStoreQueries,\n  queryId: string\n) => {\n  let /** @type {?} */ newQuery = { ...storeData[queryId] };\n  delete newQuery.resultIds;\n  delete newQuery.errors;\n  delete newQuery.meta;\n  delete newQuery.links;\n\n  let /** @type {?} */ newState = { ...storeData };\n  newState[queryId] = newQuery;\n  return newState;\n};\n/**\n * Updates a given storeData by either inserting a resource or updating\n * an existing resource.\n * \n * @param storeData\n * @param resource\n * @param fromServer\n * @param override \n * \n * @return a new NgrxJsonApiStoreData with an inserted/updated resource.\n */\nexport const updateStoreDataFromResource = (\n  storeData: NgrxJsonApiStoreData,\n  resource: Resource,\n  fromServer: boolean,\n  override: boolean\n): NgrxJsonApiStoreData => {\n  if (_.isUndefined(storeData[resource.type])) {\n    let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n    newStoreData[resource.type] = {};\n    newStoreData[resource.type] = insertStoreResource(\n      newStoreData[resource.type],\n      resource,\n      fromServer\n    );\n    return newStoreData;\n  } else if (_.isUndefined(storeData[resource.type][resource.id]) || override) {\n    let updatedStoreResources = insertStoreResource(\n      storeData[resource.type],\n      resource,\n      fromServer\n    );\n\n    // check if nothing has changed\n    if (updatedStoreResources !== storeData[resource.type]) {\n      let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n      newStoreData[resource.type] = updatedStoreResources;\n      return newStoreData;\n    }\n    return storeData;\n  } else {\n    let updatedStoreResources = updateStoreResource(\n      storeData[resource.type],\n      resource,\n      fromServer\n    );\n\n    // check if nothing has changed\n    if (updatedStoreResources !== storeData[resource.type]) {\n      let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n      newStoreData[resource.type] = updatedStoreResources;\n      return newStoreData;\n    }\n    return storeData;\n  }\n};\n\nexport const /** @type {?} */ updateStoreDataFromPayload = (\n  storeData: NgrxJsonApiStoreData,\n  payload: Document\n): NgrxJsonApiStoreData => {\n  let /** @type {?} */ data = /** @type {?} */(( <Array<Resource> | Resource>_.get(payload, 'data')));\n\n  if (_.isUndefined(data)) {\n    return storeData;\n  }\n\n  data = _.isArray(data) ? /** @type {?} */(( <Resource[]>data)) : /** @type {?} */(( <Resource[]>[data]));\n\n  let /** @type {?} */ included = /** @type {?} */(( <Array<Resource>>_.get(payload, 'included')));\n\n  if (!_.isUndefined(included)) {\n    data = [...data, ...included];\n  }\n\n  return /** @type {?} */(( <NgrxJsonApiStoreData>_.reduce(\n    data,\n    (result: NgrxJsonApiStoreData, resource: Resource) => {\n      // let resourcePath: string = getResourcePath(\n      //   result.resourcesDefinitions, resource.type);\n      // Extremely ugly, needs refactoring!\n      // let newPartialState = { data: {} };\n      // newPartialState.data[resourcePath] = { data: {} } ;\n      // newPartialState.data = updateOrInsertResource(\n      // result.data, resource);\n      return updateStoreDataFromResource(result, resource, true, true);\n      // result.data[resourcePath].data = updateOrInsertResource(\n      // result.data[resourcePath].data, resource);\n      // return <NgrxJsonApiStore>_.merge({}, result, newPartialState);\n    },\n    storeData\n  )));\n};\n/**\n * Updates the storeQueries by either adding a new ResourceQueryStore\n * or modifying an existing one.\n * \n * @param storeQueries\n * @param query \n * \n * @return a new NgrxJsonApiStoreQueries with the inserted/modified\n * ResourceQueryStore\n */\nexport const updateQueryParams = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  query: Query\n): NgrxJsonApiStoreQueries => {\n  if (!query.queryId) {\n    return storeQueries;\n  }\n\n  let newStoreQuery = { ...storeQueries[query.queryId] };\n  newStoreQuery.loading = true;\n  newStoreQuery.query = _.cloneDeep(query);\n\n  if (_.isUndefined(newStoreQuery.errors)) {\n    newStoreQuery.errors = [];\n  }\n\n  let newStoreQueries: NgrxJsonApiStoreQueries = { ...storeQueries };\n  newStoreQueries[newStoreQuery.query.queryId] = newStoreQuery;\n  return newStoreQueries;\n};\n/**\n * Updates the query results for given a queryId and the results.\n */\nexport const updateQueryResults = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string,\n  document: Document\n): NgrxJsonApiStoreQueries => {\n  let storeQuery: StoreQuery = storeQueries[queryId];\n  if (storeQuery) {\n    let data = _.isArray(document.data) ? document.data : [document.data];\n    let newQueryStore = {\n      ...storeQuery,\n      resultIds: data.map(it => (it ? toResourceIdentifier(it) : [])),\n      meta: document.meta,\n      links: document.links,\n      loading: false,\n    };\n\n    let newState: NgrxJsonApiStoreQueries = { ...storeQueries };\n    newState[queryId] = <StoreQuery>newQueryStore;\n    return newState;\n  }\n  return storeQueries;\n};\n/**\n * Update the query errors given the queryId and a storeQueries and the\n * document containing the error\n * \n * \n */\nexport const updateQueryErrors = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string,\n  document: Document\n): NgrxJsonApiStoreQueries => {\n  if (!queryId || !storeQueries[queryId]) {\n    return storeQueries;\n  }\n  let newState = { ...storeQueries };\n  let newStoreQuery = { ...newState[queryId] };\n  newStoreQuery.errors = [];\n  if (document.errors) {\n    newStoreQuery.errors.push(...document.errors);\n  }\n  newState[queryId] = newStoreQuery;\n  return newState;\n};\n/**\n * Removes a query given its queryId from the NgrxJsonApiStoreQueries.\n */\nexport const removeQuery = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string\n): NgrxJsonApiStoreQueries => {\n  let newState: NgrxJsonApiStoreQueries = { ...storeQueries };\n  delete newState[queryId];\n  return newState;\n};\n/**\n * Given a resource, it will return an object containing the resource id and type.\n */\nexport const toResourceIdentifier = (\n  resource: Resource\n): ResourceIdentifier => {\n  return { type: resource.type, id: resource.id };\n};\n/**\n * Get the value for the last field in a given fitering path.\n * \n * @param path\n * @param baseStoreResource\n * @param storeData\n * @param resourceDefinitions\n * @param pathSepartor\n * @return the value of the last field in the path.\n */\nexport const getResourceFieldValueFromPath = (\n  path: string,\n  baseStoreResource: StoreResource,\n  storeData: NgrxJsonApiStoreData,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n) => {\n  if (_.isUndefined(pathSeparator)) {\n    pathSeparator = '.';\n  }\n  let fields: Array<string> = path.split(pathSeparator);\n  let currentStoreResource = baseStoreResource;\n  for (let i = 0; i < fields.length; i++) {\n    let definition = _.find(resourceDefinitions, {\n      type: currentStoreResource.type,\n    });\n\n    if (_.isUndefined(definition)) {\n      throw new Error('Definition not found');\n    }\n    // if both attributes and relationships are missing, raise an error\n    if (\n      _.isUndefined(definition.attributes) &&\n      _.isUndefined(definition.relationships)\n    ) {\n      throw new Error('Attributes or Relationships must be provided');\n    }\n    if (definition.attributes.hasOwnProperty(fields[i])) {\n      return _.get(currentStoreResource, 'attributes.' + fields[i], null);\n    } else if (definition.relationships.hasOwnProperty(fields[i])) {\n      if (i === fields.length - 1) {\n        throw new Error(\n          'The last field in the filtering path cannot be a relation'\n        );\n      }\n      let resourceRelation = definition.relationships[fields[i]];\n      if (resourceRelation.relationType === 'hasMany') {\n        throw new Error('Cannot filter past a hasMany relation');\n      } else {\n        let relation = _.get(\n          currentStoreResource,\n          'relationships.' + fields[i],\n          null\n        );\n        if (!relation || !relation.data) {\n          return null;\n        } else {\n          let relatedPath = [resourceRelation.type, relation.data.id];\n          currentStoreResource = <StoreResource>_.get(storeData, relatedPath);\n        }\n      }\n    } else {\n      throw new Error('Cannot find field in attributes or relationships');\n    }\n    if (_.isUndefined(currentStoreResource)) {\n      return null;\n    }\n  }\n};\n\nexport const /** @type {?} */ filterResources = (\n  resources: NgrxJsonApiStoreResources,\n  storeData: NgrxJsonApiStoreData,\n  query: Query,\n  resourceDefinitions: Array<ResourceDefinition>,\n  filteringConfig?: NgrxJsonApiFilteringConfig\n) => {\n  return _.filter(resources, resource => {\n    if (\n      query.hasOwnProperty('params') &&\n      query.params.hasOwnProperty('filtering')\n    ) {\n      return query.params.filtering.every(element => {\n        let /** @type {?} */ pathSeparator;\n        let /** @type {?} */ filteringOperators;\n\n        if (!_.isUndefined(filteringConfig)) {\n          pathSeparator = /** @type {?} */(( <string>_.get(filteringConfig, 'pathSeparator')));\n          filteringOperators = /** @type {?} */(( <Array<FilteringOperator>>_.get(\n            filteringConfig,\n            'filteringOperators'\n          )));\n        }\n        // resource type and attribute\n        let /** @type {?} */ resourceFieldValue = getResourceFieldValueFromPath(\n          element.path,\n          resource,\n          storeData,\n          resourceDefinitions,\n          pathSeparator\n        );\n        if (!resourceFieldValue) {\n          return false;\n        }\n\n        let /** @type {?} */ operator = /** @type {?} */(( <FilteringOperator>_.find(filteringOperators, {\n          name: element.operator,\n        })));\n\n        if (operator) {\n          return operator.comparison(element.value, resourceFieldValue);\n        }\n\n        element.operator = element.hasOwnProperty('operator')\n          ? element.operator\n          : 'iexact';\n\n        switch (element.operator) {\n          case 'iexact':\n            if (_.isString(element.value) && _.isString(resourceFieldValue)) {\n              return (\n                element.value.toLowerCase() === resourceFieldValue.toLowerCase()\n              );\n            } else {\n              return element.value === resourceFieldValue;\n            }\n\n          case 'exact':\n            return element.value === resourceFieldValue;\n\n          case 'contains':\n            return _.includes(resourceFieldValue, element.value);\n\n          case 'icontains':\n            return _.includes(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          case 'in':\n            if (_.isArray(element.value)) {\n              return _.includes(element.value, resourceFieldValue);\n            } else {\n              return _.includes([element.value], resourceFieldValue);\n            }\n          case 'gt':\n            return element.value > resourceFieldValue;\n\n          case 'gte':\n            return element.value >= resourceFieldValue;\n\n          case 'lt':\n            return element.value < resourceFieldValue;\n\n          case 'lte':\n            return element.value <= resourceFieldValue;\n\n          case 'startswith':\n            return _.startsWith(resourceFieldValue, element.value);\n\n          case 'istartswith':\n            return _.startsWith(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          case 'endswith':\n            return _.endsWith(resourceFieldValue, element.value);\n\n          case 'iendswith':\n            return _.endsWith(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          default:\n            return true;\n        }\n      });\n    } else {\n      return true;\n    }\n  });\n};\n\nexport const /** @type {?} */ generateIncludedQueryParams = (\n  included: Array<string>\n): string => {\n  if (_.isEmpty(included)) {\n    return '';\n  }\n\n  return 'include=' + included.join();\n};\n\nexport const /** @type {?} */ generateFieldsQueryParams = (fields: Array<string>): string => {\n  if (_.isEmpty(fields)) {\n    return '';\n  }\n\n  return 'fields=' + fields.join();\n};\n\nexport const /** @type {?} */ generateFilteringQueryParams = (\n  filtering: Array<FilteringParam>\n): string => {\n  if (_.isEmpty(filtering)) {\n    return '';\n  }\n  let /** @type {?} */ filteringParams = filtering.map(f => {\n    return (\n      'filter[' +\n      f.path +\n      ']' +\n      (f.operator ? '[' + f.operator + ']' : '') +\n      '=' +\n      encodeURIComponent(f.value)\n    );\n  });\n  return filteringParams.join('&');\n};\n\nexport const /** @type {?} */ generateSortingQueryParams = (\n  sorting: Array<SortingParam>\n): string => {\n  if (_.isEmpty(sorting)) {\n    return '';\n  }\n  return (\n    'sort=' +\n    sorting\n      .map(f => (f.direction === Direction.ASC ? '' : '-') + f.api)\n      .join(',')\n  );\n};\n\nexport const /** @type {?} */ generateQueryParams = (...params: Array<string>) => {\n  let /** @type {?} */ newParams = params.filter(p => p !== '');\n  if (newParams.length !== 0) {\n    return '?' + newParams.join('&');\n  } else {\n    return '';\n  }\n};\n\nexport const /** @type {?} */ generatePayload = (\n  resource: StoreResource,\n  operation: OperationType\n): Payload => {\n  let /** @type {?} */ payload: Payload = {\n    query: {\n      type: resource.type,\n    },\n  };\n\n  // the data to be updated or created\n  if (operation === 'POST' || operation === 'PATCH') {\n    payload.jsonApiData = {\n      data: {\n        id: resource.id,\n        type: resource.type,\n        attributes: resource.attributes,\n        relationships: resource.relationships,\n      },\n    };\n  }\n\n  if (operation === 'POST' && resource.hasTemporaryId) {\n    delete payload.jsonApiData.data.id;\n  }\n\n  // 'DELETE' only needs a query and it also needs an id in its query\n  // 'PATCH' also needs an id in its query\n  // 'POST' needed locally to allow to write back errors to store if id is available\n  if (operation === 'PATCH' || operation === 'DELETE' || operation === 'POST') {\n    payload.query.id = resource.id;\n  }\n\n  return payload;\n};\n\n/* tslint:disable */\nexport const /** @type {?} */ uuid = () => {\n  let /** @type {?} */ lut = [];\n  for (let /** @type {?} */ i = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n  }\n  let /** @type {?} */ d0 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d1 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d2 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d3 = (Math.random() * 0xffffffff) | 0;\n  return (\n    lut[d0 & 0xff] +\n    lut[(d0 >> 8) & 0xff] +\n    lut[(d0 >> 16) & 0xff] +\n    lut[(d0 >> 24) & 0xff] +\n    '-' +\n    lut[d1 & 0xff] +\n    lut[(d1 >> 8) & 0xff] +\n    '-' +\n    lut[((d1 >> 16) & 0x0f) | 0x40] +\n    lut[(d1 >> 24) & 0xff] +\n    '-' +\n    lut[(d2 & 0x3f) | 0x80] +\n    lut[(d2 >> 8) & 0xff] +\n    '-' +\n    lut[(d2 >> 16) & 0xff] +\n    lut[(d2 >> 24) & 0xff] +\n    lut[d3 & 0xff] +\n    lut[(d3 >> 8) & 0xff] +\n    lut[(d3 >> 16) & 0xff] +\n    lut[(d3 >> 24) & 0xff]\n  );\n};\n/* tslint:enable */\n\nconst /** @type {?} */ toKey = (id: ResourceIdentifier) => {\n  return id.id + '@' + id.type;\n};\n\nconst /** @type {?} */ collectQueryResults = (state: NgrxJsonApiStore, usedResources: any) => {\n  for (let /** @type {?} */ queryName in state.queries) {\n    if (state.queries.hasOwnProperty(queryName)) {\n      let /** @type {?} */ query = state.queries[queryName];\n      if (query.resultIds) {\n        for (let /** @type {?} */ resultId of query.resultIds) {\n          usedResources[toKey(resultId)] = true;\n        }\n      }\n    }\n  }\n};\n\nconst /** @type {?} */ collectPendingChanges = (state: NgrxJsonApiStore, usedResources: any) => {\n  for (let /** @type {?} */ type in state.data) {\n    if (state.data.hasOwnProperty(type)) {\n      let /** @type {?} */ resources = state.data[type];\n      for (let /** @type {?} */ id in resources) {\n        if (resources.hasOwnProperty(id)) {\n          let /** @type {?} */ resource = resources[id];\n          if (resource.state !== 'IN_SYNC') {\n            usedResources[toKey(resource)] = true;\n          }\n        }\n      }\n    }\n  }\n};\n\nconst /** @type {?} */ collectReferencesForResource = (\n  state: NgrxJsonApiStore,\n  usedResources: any,\n  resource: Resource\n) => {\n  let /** @type {?} */ hasChanges: boolean;\n  for (let /** @type {?} */ relationshipName in resource.relationships) {\n    if (resource.relationships.hasOwnProperty(relationshipName)) {\n      let /** @type {?} */ data = resource.relationships[relationshipName].data;\n      if (data) {\n        let /** @type {?} */ dependencyIds: Array<ResourceIdentifier> =\n          data instanceof Array ? data : [data];\n        for (let /** @type {?} */ dependencyId of dependencyIds) {\n          let /** @type {?} */ dependencyKey = toKey(dependencyId);\n          if (!usedResources[dependencyKey]) {\n            // change found, an other iteration will be necssary to detect\n            // transitive dependencies\n            hasChanges = true;\n            usedResources[dependencyKey] = true;\n          }\n        }\n      }\n    }\n  }\n  return hasChanges;\n};\n\nconst /** @type {?} */ collectReferences = (state: NgrxJsonApiStore, usedResources: any) => {\n  while (true) {\n    let /** @type {?} */ hasChanges = false;\n    for (let /** @type {?} */ type in state.data) {\n      if (state.data.hasOwnProperty(type)) {\n        let /** @type {?} */ resources = state.data[type];\n        for (let /** @type {?} */ id in resources) {\n          if (resources.hasOwnProperty(id)) {\n            let /** @type {?} */ resource = resources[id];\n            if (usedResources[toKey(resource)]) {\n              // in use, do not collect its relations\n              hasChanges =\n                hasChanges ||\n                collectReferencesForResource(state, usedResources, resource);\n            }\n          }\n        }\n      }\n    }\n    if (!hasChanges) {\n      break;\n    }\n  }\n};\n\nconst /** @type {?} */ sweepUnusedResources = (state: NgrxJsonApiStore, usedResources: any) => {\n  let /** @type {?} */ hasDeletions = false;\n  let /** @type {?} */ newState = _.cloneDeep(state);\n  for (let /** @type {?} */ type in newState.data) {\n    if (newState.data.hasOwnProperty(type)) {\n      let /** @type {?} */ resources = newState.data[type];\n      for (let /** @type {?} */ id in resources) {\n        if (resources.hasOwnProperty(id)) {\n          let /** @type {?} */ resource = resources[id];\n          if (!usedResources[toKey(resource)]) {\n            hasDeletions = true;\n            delete resources[id];\n          }\n        }\n      }\n\n      if (_.isEmpty(resources)) {\n        delete newState.data[type];\n      }\n    }\n  }\n  return hasDeletions ? newState : state;\n};\n\nexport const /** @type {?} */ compactStore = (state: NgrxJsonApiStore) => {\n  let /** @type {?} */ usedResources = {};\n\n  // query results can not be collected\n  collectQueryResults(state, usedResources);\n\n  // pending changes cannot be collected\n  collectPendingChanges(state, usedResources);\n\n  // references from non-collected objects cannot be collected as well\n  collectReferences(state, usedResources);\n\n  // remove everything that is not collected\n  return sweepUnusedResources(state, usedResources);\n};\n\ninterface TopologySortContext {\n  pendingResources: Array<StoreResource>;\n  cursor: number;\n  sorted: Array<StoreResource>;\n  visited: Array<boolean>;\n  dependencies: { [id: string]: Array<StoreResource> };\n}\n\nexport const /** @type {?} */ sortPendingChanges = (\n  pendingResources: Array<StoreResource>\n): Array<StoreResource> => {\n  // allocate dependency\n  let /** @type {?} */ dependencies: any = {};\n  let /** @type {?} */ pendingMap: any = {};\n  for (let /** @type {?} */ pendingResource of pendingResources) {\n    let /** @type {?} */ resource = pendingResource;\n    let /** @type {?} */ key = toKey(resource);\n    dependencies[key] = [];\n    pendingMap[key] = pendingResource;\n  }\n\n  // extract dependencies\n  for (let /** @type {?} */ pendingResource of pendingResources) {\n    let /** @type {?} */ resource = pendingResource;\n    if (resource.relationships) {\n      let /** @type {?} */ key = toKey(resource);\n      Object.keys(resource.relationships).forEach(relationshipName => {\n        let /** @type {?} */ data = resource.relationships[relationshipName].data;\n        if (data) {\n          let /** @type {?} */ dependencyIds: Array<ResourceIdentifier> =\n            data instanceof Array ? data : [data];\n          for (let /** @type {?} */ dependencyId of dependencyIds) {\n            let /** @type {?} */ dependencyKey = toKey(dependencyId);\n            if (\n              pendingMap[dependencyKey] &&\n              pendingMap[dependencyKey].state === 'CREATED'\n            ) {\n              // we have a dependency between two unsaved objects\n              dependencies[key].push(pendingMap[dependencyKey]);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  // order\n  let /** @type {?} */ context = {\n    pendingResources: pendingResources,\n    cursor: pendingResources.length,\n    sorted: new Array(pendingResources.length),\n    dependencies: dependencies,\n    visited: /** @type {?} */(( <any[]>[])),\n  };\n\n  let /** @type {?} */ i = context.cursor;\n  while (i--) {\n    if (!context.visited[i]) {\n      visitPending(pendingResources[i], i, [], context);\n    }\n  }\n\n  return context.sorted;\n};\n\nconst /** @type {?} */ visitPending = (\n  pendingResource: StoreResource,\n  i: any,\n  predecessors: any,\n  context: TopologySortContext\n) => {\n  let /** @type {?} */ key = toKey(pendingResource);\n  if (predecessors.indexOf(key) >= 0) {\n    throw new Error(\n      'Cyclic dependency: ' + key + ' with ' + JSON.stringify(predecessors)\n    );\n  }\n\n  if (context.visited[i]) {\n    return;\n  }\n  context.visited[i] = true;\n\n  // outgoing edges\n  let /** @type {?} */ outgoing: Array<StoreResource> = context.dependencies[key];\n\n  let /** @type {?} */ preds = predecessors.concat(key);\n  for (let /** @type {?} */ child of outgoing) {\n    visitPending(\n      child,\n      context.pendingResources.indexOf(child),\n      preds,\n      context\n    );\n  }\n\n  context.sorted[--context.cursor] = pendingResource;\n};\n/**\n * @param {?} state\n * @param {?} pending\n * @param {?} id\n * @param {?} include\n * @param {?} includeNew\n * @return {?}\n */\nfunction collectPendingChange(\n  state: NgrxJsonApiStoreData,\n  pending: Array<StoreResource>,\n  id: ResourceIdentifier,\n  include: Array<Array<string>>,\n  includeNew: boolean\n) {\n  let /** @type {?} */ storeResource = state[id.type][id.id];\n  if (\n    storeResource.state !== 'IN_SYNC' &&\n    (storeResource.state !== 'NEW' || includeNew)\n  ) {\n    pending.push(storeResource);\n  }\n\n  for (let /** @type {?} */ includeElement of include) {\n    if (includeElement.length > 0) {\n      let /** @type {?} */ relationshipName = includeElement[0];\n      if (\n        storeResource.relationships &&\n        storeResource.relationships[relationshipName]\n      ) {\n        let /** @type {?} */ data = storeResource.relationships[relationshipName].data;\n        if (data) {\n          let /** @type {?} */ relationInclude: Array<Array<string>> = [];\n          include\n            .filter(\n              relIncludeElem =>\n                relIncludeElem.length >= 2 &&\n                relIncludeElem[0] == relationshipName\n            )\n            .forEach(relIncludeElem =>\n              relationInclude.push(relIncludeElem.slice(1))\n            );\n\n          if (_.isArray(data)) {\n            let /** @type {?} */ relationIds = /** @type {?} */(( data as Array<ResourceIdentifier>));\n            relationIds.forEach(relationId =>\n              collectPendingChange(\n                state,\n                pending,\n                relationId,\n                relationInclude,\n                includeNew\n              )\n            );\n          } else {\n            let /** @type {?} */ relationId = /** @type {?} */(( data as ResourceIdentifier));\n            collectPendingChange(\n              state,\n              pending,\n              relationId,\n              relationInclude,\n              includeNew\n            );\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * @param {?} state\n * @param {?} ids\n * @param {?} include\n * @param {?=} includeNew\n * @return {?}\n */\nexport function getPendingChanges(\n  state: NgrxJsonApiStoreData,\n  ids: Array<ResourceIdentifier>,\n  include: Array<string>,\n  includeNew?: boolean\n): Array<StoreResource> {\n  let /** @type {?} */ pending: Array<StoreResource> = [];\n\n  if (_.isUndefined(ids)) {\n    // check all\n    Object.keys(state).forEach(type => {\n      Object.keys(state[type]).forEach(id => {\n        let /** @type {?} */ storeResource = state[type][id];\n        if (\n          storeResource.state !== 'IN_SYNC' &&\n          (storeResource.state !== 'NEW' || includeNew)\n        ) {\n          pending.push(storeResource);\n        }\n      });\n    });\n  } else {\n    let /** @type {?} */ relationshipInclusions = [];\n    if (include) {\n      for (let /** @type {?} */ includeElement of include) {\n        relationshipInclusions.push(includeElement.split('.'));\n      }\n    }\n    for (let /** @type {?} */ id of ids) {\n      collectPendingChange(\n        state,\n        pending,\n        id,\n        relationshipInclusions,\n        includeNew\n      );\n    }\n    pending = _.uniqBy(pending, function(e) {\n      return e.type + '####' + e.id;\n    });\n  }\n\n  return pending;\n}\n","import { Injectable } from '@angular/core';\n\nimport { Action } from '@ngrx/store';\n\nimport {\n  Payload,\n  Resource,\n  ResourceIdentifier,\n  Query,\n  ModifyStoreResourceErrorsPayload,\n} from './interfaces';\n\nexport const /** @type {?} */ NgrxJsonApiActionTypes = {\n  API_POST_INIT: '[NgrxJsonApi] API_POST_INIT',\n  API_POST_SUCCESS: '[NgrxJsonApi] API_POST_SUCCESS',\n  API_POST_FAIL: '[NgrxJsonApi] API_POST_FAIL',\n  API_GET_INIT: '[NgrxJsonApi] API_GET_INIT',\n  API_GET_SUCCESS: '[NgrxJsonApi] API_GET_SUCCESS',\n  API_GET_FAIL: '[NgrxJsonApi] API_GET_FAIL',\n  API_PATCH_INIT: '[NgrxJsonApi] API_PATCH_INIT',\n  API_PATCH_SUCCESS: '[NgrxJsonApi] API_PATCH_SUCCESS',\n  API_PATCH_FAIL: '[NgrxJsonApi] API_PATCH_FAIL',\n  API_DELETE_INIT: '[NgrxJsonApi] API_DELETE_INIT',\n  API_DELETE_SUCCESS: '[NgrxJsonApi] API_DELETE_SUCCESS',\n  API_DELETE_FAIL: '[NgrxJsonApi] API_DELETE_FAIL',\n  API_APPLY_INIT: '[NgrxJsonApi] API_APPLY_INIT',\n  API_APPLY_SUCCESS: '[NgrxJsonApi] API_APPLY_SUCCESS',\n  API_APPLY_FAIL: '[NgrxJsonApi] API_APPLY_FAIL',\n  API_ROLLBACK: '[NgrxJsonApi] API_ROLLBACK',\n  API_QUERY_REFRESH: '[NgrxJsonApi] API_QUERY_REFRESH',\n  LOCAL_QUERY_INIT: '[NgrxJsonApi] LOCAL_QUERY_INIT',\n  LOCAL_QUERY_SUCCESS: '[NgrxJsonApi] LOCAL_QUERY_SUCCESS',\n  LOCAL_QUERY_FAIL: '[NgrxJsonApi] LOCAL_QUERY_FAIL',\n  DELETE_STORE_RESOURCE: '[NgrxJsonApi] DELETE_STORE_RESOURCE',\n  PATCH_STORE_RESOURCE: '[NgrxJsonApi] PATCH_STORE_RESOURCE',\n  NEW_STORE_RESOURCE: '[NgrxJsonApi] NEW_STORE_RESOURCE',\n  POST_STORE_RESOURCE: '[NgrxJsonApi] POST_STORE_RESOURCE',\n  MODIFY_STORE_RESOURCE_ERRORS: '[NgrxJsonApi] MODIFY_STORE_RESOURCE_ERRORS',\n  REMOVE_QUERY: '[NgrxJsonApi] REMOVE_QUERY',\n  COMPACT_STORE: '[NgrxJsonApi] COMPACT_STORE',\n  CLEAR_STORE: '[NgrxJsonApi] CLEAR_STORE',\n};\n\nexport interface ApiApplyInitPayload {\n  /**\n   * optional list of resource identifiers to perform apply. If not specified all change will be applied\n   * to the backend.\n   */\n  ids?: Array<ResourceIdentifier>;\n\n  /**\n   * if the apply action is restricted to a set of resources with the ids parameter. The include flag allows to\n   * specify which relationships to apply as well. Nested relationships are separated by a dot.\n   */\n  include?: Array<string>;\n}\n\nexport interface ApiApplyRollbackPayload extends ApiApplyInitPayload {}\nexport class ApiApplyInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: ApiApplyInitPayload) {}\n}\n\nfunction ApiApplyInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplyInitAction.prototype.type;\n/** @type {?} */\nApiApplyInitAction.prototype.payload;\n}\n\nexport class ApiApplySuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Array<Action>) {}\n}\n\nfunction ApiApplySuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplySuccessAction.prototype.type;\n/** @type {?} */\nApiApplySuccessAction.prototype.payload;\n}\n\nexport class ApiApplyFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Array<Action>) {}\n}\n\nfunction ApiApplyFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplyFailAction.prototype.type;\n/** @type {?} */\nApiApplyFailAction.prototype.payload;\n}\n\nexport class ApiPostInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_POST_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction ApiPostInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostInitAction.prototype.type;\n/** @type {?} */\nApiPostInitAction.prototype.payload;\n}\n\nexport class ApiPostSuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_POST_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiPostSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostSuccessAction.prototype.type;\n/** @type {?} */\nApiPostSuccessAction.prototype.payload;\n}\n\nexport class ApiPostFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_POST_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiPostFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostFailAction.prototype.type;\n/** @type {?} */\nApiPostFailAction.prototype.payload;\n}\n\nexport class ApiDeleteInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: ResourceIdentifier) {}\n}\n\nfunction ApiDeleteInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteInitAction.prototype.type;\n/** @type {?} */\nApiDeleteInitAction.prototype.payload;\n}\n\nexport class ApiDeleteSuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiDeleteSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteSuccessAction.prototype.type;\n/** @type {?} */\nApiDeleteSuccessAction.prototype.payload;\n}\n\nexport class ApiDeleteFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiDeleteFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteFailAction.prototype.type;\n/** @type {?} */\nApiDeleteFailAction.prototype.payload;\n}\n\nexport class ApiGetInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_GET_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Query) {}\n}\n\nfunction ApiGetInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetInitAction.prototype.type;\n/** @type {?} */\nApiGetInitAction.prototype.payload;\n}\n\nexport class ApiGetSuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_GET_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiGetSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetSuccessAction.prototype.type;\n/** @type {?} */\nApiGetSuccessAction.prototype.payload;\n}\n\nexport class ApiGetFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_GET_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiGetFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetFailAction.prototype.type;\n/** @type {?} */\nApiGetFailAction.prototype.payload;\n}\n\nexport class ApiRollbackAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_ROLLBACK;\n/**\n * @param {?} payload\n */\nconstructor(public payload: ApiApplyRollbackPayload) {}\n}\n\nfunction ApiRollbackAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiRollbackAction.prototype.type;\n/** @type {?} */\nApiRollbackAction.prototype.payload;\n}\n\nexport class ApiPatchInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction ApiPatchInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchInitAction.prototype.type;\n/** @type {?} */\nApiPatchInitAction.prototype.payload;\n}\n\nexport class ApiPatchSuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiPatchSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchSuccessAction.prototype.type;\n/** @type {?} */\nApiPatchSuccessAction.prototype.payload;\n}\n\nexport class ApiPatchFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiPatchFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchFailAction.prototype.type;\n/** @type {?} */\nApiPatchFailAction.prototype.payload;\n}\n\nexport class DeleteStoreResourceAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.DELETE_STORE_RESOURCE;\n/**\n * @param {?} payload\n */\nconstructor(public payload: ResourceIdentifier) {}\n}\n\nfunction DeleteStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nDeleteStoreResourceAction.prototype.type;\n/** @type {?} */\nDeleteStoreResourceAction.prototype.payload;\n}\n\nexport class PatchStoreResourceAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.PATCH_STORE_RESOURCE;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction PatchStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nPatchStoreResourceAction.prototype.type;\n/** @type {?} */\nPatchStoreResourceAction.prototype.payload;\n}\n\nexport class NewStoreResourceAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.NEW_STORE_RESOURCE;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction NewStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nNewStoreResourceAction.prototype.type;\n/** @type {?} */\nNewStoreResourceAction.prototype.payload;\n}\n\nexport class PostStoreResourceAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.POST_STORE_RESOURCE;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction PostStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nPostStoreResourceAction.prototype.type;\n/** @type {?} */\nPostStoreResourceAction.prototype.payload;\n}\n\nexport class RemoveQueryAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.REMOVE_QUERY;\n/**\n * @param {?} payload\n */\nconstructor(public payload: string) {}\n}\n\nfunction RemoveQueryAction_tsickle_Closure_declarations() {\n/** @type {?} */\nRemoveQueryAction.prototype.type;\n/** @type {?} */\nRemoveQueryAction.prototype.payload;\n}\n\nexport class LocalQueryInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Query) {}\n}\n\nfunction LocalQueryInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQueryInitAction.prototype.type;\n/** @type {?} */\nLocalQueryInitAction.prototype.payload;\n}\n\nexport class LocalQuerySuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction LocalQuerySuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQuerySuccessAction.prototype.type;\n/** @type {?} */\nLocalQuerySuccessAction.prototype.payload;\n}\n\nexport class LocalQueryFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction LocalQueryFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQueryFailAction.prototype.type;\n/** @type {?} */\nLocalQueryFailAction.prototype.payload;\n}\n\nexport class CompactStoreAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.COMPACT_STORE;\nconstructor() {}\n}\n\nfunction CompactStoreAction_tsickle_Closure_declarations() {\n/** @type {?} */\nCompactStoreAction.prototype.type;\n}\n\nexport class ClearStoreAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.CLEAR_STORE;\nconstructor() {}\n}\n\nfunction ClearStoreAction_tsickle_Closure_declarations() {\n/** @type {?} */\nClearStoreAction.prototype.type;\n}\n\nexport class ApiQueryRefreshAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_QUERY_REFRESH;\n/**\n * @param {?} payload\n */\nconstructor(public payload: string) {\n    if (!payload) {\n      throw new Error('no query id provided for ApiQueryRefreshAction');\n    }\n  }\n}\n\nfunction ApiQueryRefreshAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiQueryRefreshAction.prototype.type;\n/** @type {?} */\nApiQueryRefreshAction.prototype.payload;\n}\n\nexport class ModifyStoreResourceErrorsAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.MODIFY_STORE_RESOURCE_ERRORS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: ModifyStoreResourceErrorsPayload) {}\n}\n\nfunction ModifyStoreResourceErrorsAction_tsickle_Closure_declarations() {\n/** @type {?} */\nModifyStoreResourceErrorsAction.prototype.type;\n/** @type {?} */\nModifyStoreResourceErrorsAction.prototype.payload;\n}\n\n\nexport type NgrxJsonApiActions =\n  | ApiApplyInitAction\n  | ApiApplySuccessAction\n  | ApiApplyFailAction\n  | ApiPostInitAction\n  | ApiPostSuccessAction\n  | ApiPostFailAction\n  | ApiDeleteInitAction\n  | ApiDeleteSuccessAction\n  | ApiDeleteFailAction\n  | ApiGetInitAction\n  | ApiGetSuccessAction\n  | ApiGetFailAction\n  | ApiRollbackAction\n  | ApiPatchInitAction\n  | ApiPatchSuccessAction\n  | ApiPatchFailAction\n  | DeleteStoreResourceAction\n  | PatchStoreResourceAction\n  | PostStoreResourceAction\n  | NewStoreResourceAction\n  | RemoveQueryAction\n  | ApiQueryRefreshAction\n  | LocalQueryInitAction\n  | LocalQuerySuccessAction\n  | LocalQueryFailAction\n  | ModifyStoreResourceErrorsAction\n  | CompactStoreAction\n  | ClearStoreAction;\n","import { Observable } from 'rxjs/Observable';\nimport { AnonymousSubscription } from 'rxjs/Subscription';\nexport type Direction = number;\nexport let Direction: any = {};\nDirection.ASC = 0;\nDirection.DESC = 1;\nDirection[Direction.ASC] = \"ASC\";\nDirection[Direction.DESC] = \"DESC\";\n\n\nexport interface Document {\n  data?: any;\n  included?: any;\n  meta?: any;\n  links?: any;\n  errors?: Array<ResourceError>;\n}\n\nexport interface FilteringParam {\n  path?: string;\n  operator?: string;\n  value?: any;\n}\n\nexport interface FilteringOperator {\n  name: string;\n  apiName?: string;\n  comparison: (value: any, resourceFieldValue: any) => boolean;\n}\n\nexport interface ManyResourceRelationship {\n  data?: Array<ResourceIdentifier>;\n  reference?: Array<StoreResource>;\n}\n\n/**\n * Used by code generators to navigate relationships in a type-safe manner.\n * See crnk.io for a first such generator.\n */\nexport interface TypedManyResourceRelationship<T extends StoreResource>\n  extends ManyResourceRelationship {\n  reference?: Array<T>;\n}\n\n/**\n * Used by code generators to navigate relationships in a type-safe manner.\n * See crnk.io for a first such generator.\n */\nexport interface TypedOneResourceRelationship<T extends StoreResource>\n  extends OneResourceRelationship {\n  reference?: T;\n}\n\nexport interface NgrxJsonApiConfig {\n  apiUrl: string;\n  initialState?: any;\n  resourceDefinitions?: Array<ResourceDefinition>;\n  urlBuilder?: NgrxJsonApiUrlBuilder;\n  filteringConfig?: NgrxJsonApiFilteringConfig;\n\n  /**\n   * Allows to disable the apply action and replace it with a custom one. For example\n   * have a look at www.crnk.io that makes use of JSON PATCH to perform bulk updates.\n   */\n  applyEnabled?: boolean;\n}\n\nexport interface NgrxJsonApiStore {\n  data: NgrxJsonApiStoreData;\n  queries: NgrxJsonApiStoreQueries;\n  isCreating: number;\n  isReading: number;\n  isUpdating: number;\n  isDeleting: number;\n  isApplying: number;\n}\n\nexport interface NgrxJsonApiStoreData {\n  [id: string]: NgrxJsonApiStoreResources;\n}\n\nexport interface NgrxJsonApiStoreQueries {\n  [id: string]: StoreQuery;\n}\n\nexport interface NgrxJsonApiStoreResources {\n  [id: string]: StoreResource;\n}\n\nexport interface NgrxJsonApiFilteringConfig {\n  pathSeparator?: string;\n  filteringOperators?: Array<FilteringOperator>;\n}\n\nexport interface NgrxJsonApiUrlBuilder {\n  generateFilteringQueryParams?: (params: Array<FilteringParam>) => string;\n  generateFieldsQueryParams?: (params: Array<string>) => string;\n  generateIncludedQueryParams?: (params: Array<string>) => string;\n  generateSortingQueryParams?: (params: Array<SortingParam>) => string;\n  generateQueryParams?: (...params: Array<string>) => string;\n}\n\nexport type OperationType = 'GET' | 'DELETE' | 'PATCH' | 'POST' | false;\n\nexport interface OneResourceRelationship {\n  data?: ResourceIdentifier;\n  reference?: StoreResource;\n}\n\nexport type ErrorModificationType = 'ADD' | 'REMOVE' | 'SET';\n\nexport interface ModifyStoreResourceErrorsPayload {\n  resourceId: ResourceIdentifier;\n  errors: Array<ResourceError>;\n  modificationType: ErrorModificationType;\n}\n\nexport interface Payload {\n  jsonApiData?: Document;\n  query?: Query;\n}\n\nexport interface Query {\n  queryId?: string;\n  type?: string;\n  id?: string;\n  params?: QueryParams;\n}\n\nexport interface QueryParams {\n  filtering?: Array<FilteringParam>;\n  sorting?: Array<SortingParam>;\n  include?: Array<string>;\n  fields?: Array<string>;\n  offset?: number;\n  limit?: number;\n}\n\nexport interface Resource extends ResourceIdentifier {\n  attributes?: { [key: string]: any };\n  relationships?: { [key: string]: ResourceRelationship };\n  meta?: any;\n  links?: any;\n}\n\nexport interface ResourceAttributeDefinition {\n  apiName?: string;\n}\n\nexport interface ResourceDefinition {\n  type: string;\n  collectionPath: string;\n  attributes?: { [key: string]: ResourceAttributeDefinition };\n  relationships?: { [key: string]: ResourceRelationDefinition };\n}\n\nexport interface ResourceError {\n  id?: string;\n  links?: any;\n  status?: string;\n  code?: string;\n  title?: string;\n  detail?: string;\n  source?: ResourceErrorSource;\n  meta?: any;\n}\n\nexport interface ResourceErrorSource {\n  pointer?: string;\n  parameter?: string;\n}\n\nexport interface ResourceIdentifier {\n  type: string;\n  id: string;\n}\n\nexport interface ResourceRelationship {\n  data?: any;\n  links?: any;\n  reference?: any;\n}\n\nexport interface ResourceRelationDefinition {\n  type: string;\n  relationType: ResourceRelationType;\n}\n\nexport type ResourceRelationType = 'hasOne' | 'hasMany';\n\nexport type ResourceState =\n  | 'NEW'\n  | 'IN_SYNC'\n  | 'CREATED'\n  | 'UPDATED'\n  | 'DELETED'\n  | 'NOT_LOADED';\n\nexport interface SortingParam {\n  api: string;\n  direction: Direction;\n}\n\nexport interface QueryResult extends StoreQuery {\n  data?: StoreResource | Array<StoreResource>;\n}\n\nexport interface ManyQueryResult extends QueryResult {\n  data?: Array<StoreResource>;\n}\n\nexport interface OneQueryResult extends QueryResult {\n  data?: StoreResource;\n}\n\nexport interface StoreQuery {\n  query: Query;\n  loading: Boolean;\n  resultIds?: Array<ResourceIdentifier>;\n  meta?: any;\n  links?: any;\n\n  /**\n   * Errors received from the server after attempting to perform a GET request.\n   */\n  errors: Array<ResourceError>;\n}\n\n/**\n* Container to hold a Resource in the store with state information.\n*/\nexport interface StoreResource extends Resource {\n  /**\n  * State of the resource to track local changes not yet\n  * published to the json api endpoint.\n  */\n  state?: ResourceState;\n  /**\n  * The original resource obtained from the server.\n  */\n  persistedResource?: Resource;\n  /**\n  * One of the operation types: reading, creating, updating or deleting.\n  */\n  loading?: OperationType;\n  /**\n  * Errors received from the server after attempting to store the resource.\n  */\n  errors?: Array<ResourceError>;\n\n  /**\n   * new resources may only obtain an id when posted to the server. Till that point\n   * a StoreResource can assign make use of a temporary id and signal this by setting\n   * this flag to true. The id will not be transmitted to the server and the resource\n   * is removed from its temporary location (given by its id) as soon as it is posted\n   * to the server.\n   */\n  hasTemporaryId?: boolean;\n}\n"],"names":["_.isEmpty","_.isEqual","_.findIndex","_.isUndefined","_.hasIn","_.find","_.get","_.isArray","_.uniqBy","_.cloneDeep","_.endsWith","_.startsWith","_.includes","_.isString","_.filter","_.reduce","_.omit","_.mergeWith","_.set","_.isPlainObject"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AUGO,IAAI,SAAS,GAAQ,EAAE,CAAC;AAC/B,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC;AAClB,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC;AACnB,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AACjC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;;ADK5B,MAAM,sBAAA,GAAyB;IACpC,aAAa,EAAE,6BAAA;IACf,gBAAgB,EAAE,gCAAA;IAClB,aAAa,EAAE,6BAAA;IACf,YAAY,EAAE,4BAAA;IACd,eAAe,EAAE,+BAAA;IACjB,YAAY,EAAE,4BAAA;IACd,cAAc,EAAE,8BAAA;IAChB,iBAAiB,EAAE,iCAAA;IACnB,cAAc,EAAE,8BAAA;IAChB,eAAe,EAAE,+BAAA;IACjB,kBAAkB,EAAE,kCAAA;IACpB,eAAe,EAAE,+BAAA;IACjB,cAAc,EAAE,8BAAA;IAChB,iBAAiB,EAAE,iCAAA;IACnB,cAAc,EAAE,8BAAA;IAChB,YAAY,EAAE,4BAAA;IACd,iBAAiB,EAAE,iCAAA;IACnB,gBAAgB,EAAE,gCAAA;IAClB,mBAAmB,EAAE,mCAAA;IACrB,gBAAgB,EAAE,gCAAA;IAClB,qBAAqB,EAAE,qCAAA;IACvB,oBAAoB,EAAE,oCAAA;IACtB,kBAAkB,EAAE,kCAAA;IACpB,mBAAmB,EAAE,mCAAA;IACrB,4BAA4B,EAAE,4CAAA;IAC9B,YAAY,EAAE,4BAAA;IACd,aAAa,EAAE,6BAAA;IACf,WAAW,EAAE,2BAAA;CACd,CAAC;AAiBF,AAAA,MAAA,kBAAA,CAAA;;;;IAKA,WAAA,CAFqB,OAAS,EAE9B;QAFqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,cAAC,CAAc;KACN;CAGjD;AAED,AAOA,MAAA,qBAAA,CAAA;;;;IAKA,WAAA,CAZqB,OAAsB,EAY3C;QAZqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAsB;QADhC,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,iBAAC,CAAiB;KACf;CAa3C;AAED,AAOA,MAAA,kBAAA,CAAA;;;;IAKA,WAAA,CAtBqB,OAAsB,EAsB3C;QAtBqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAsB;QADhC,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,cAAC,CAAc;KACZ;CAuB3C;AAED,AAOA,MAAA,iBAAA,CAAA;;;;IAKA,WAAA,CAhCqB,OAAS,EAgC9B;QAhCqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,aAAC,CAAa;KAChB;CAiCtC;AAED,AAOA,MAAA,oBAAA,CAAA;;;;IAKA,WAAA,CA1CqB,OAAS,EA0C9B;QA1CqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,gBAAC,CAAgB;KACpB;CA2CrC;AAED,AAOA,MAAA,iBAAA,CAAA;;;;IAKA,WAAA,CApDqB,OAAS,EAoD9B;QApDqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,aAAC,CAAa;KACjB;CAqDrC;AAED,AAOA,MAAA,mBAAA,CAAA;;;;IAKA,WAAA,CA9DqB,OAAS,EA8D9B;QA9DqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,eAAC,CAAe;KACR;CA+DhD;AAED,AAOA,MAAA,sBAAA,CAAA;;;;IAKA,WAAA,CAxEqB,OAAS,EAwE9B;QAxEqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,kBAAC,CAAkB;KACtB;CAyErC;AAED,AAOA,MAAA,mBAAA,CAAA;;;;IAKA,WAAA,CAlFqB,OAAS,EAkF9B;QAlFqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,eAAC,CAAe;KACnB;CAmFrC;AAED,AAOA,MAAA,gBAAA,CAAA;;;;IAKA,WAAA,CA5FqB,OAAS,EA4F9B;QA5FqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,YAAC,CAAY;KAClB;CA6FnC;AAED,AAOA,MAAA,mBAAA,CAAA;;;;IAKA,WAAA,CAtGqB,OAAS,EAsG9B;QAtGqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,eAAC,CAAe;KACnB;CAuGrC;AAED,AAOA,MAAA,gBAAA,CAAA;;;;IAKA,WAAA,CAhHqB,OAAS,EAgH9B;QAhHqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,YAAC,CAAY;KAChB;CAiHrC;AAED,AAOA,MAAA,iBAAA,CAAA;;;;IAKA,WAAA,CA1HqB,OAAS,EA0H9B;QA1HqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,YAAC,CAAY;KACA;CA2HrD;AAED,AAOA,MAAA,kBAAA,CAAA;;;;IAKA,WAAA,CApIqB,OAAS,EAoI9B;QApIqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,cAAC,CAAc;KACjB;CAqItC;AAED,AAOA,MAAA,qBAAA,CAAA;;;;IAKA,WAAA,CA9IqB,OAAS,EA8I9B;QA9IqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,iBAAC,CAAiB;KACrB;CA+IrC;AAED,AAOA,MAAA,kBAAA,CAAA;;;;IAKA,WAAA,CAxJqB,OAAS,EAwJ9B;QAxJqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,cAAC,CAAc;KAClB;CAyJrC;AAED,AAOA,MAAA,yBAAA,CAAA;;;;IAKA,WAAA,CAlKqB,OAAS,EAkK9B;QAlKqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,qBAAC,CAAqB;KACd;CAmKhD;AAED,AAOA,MAAA,wBAAA,CAAA;;;;IAKA,WAAA,CA5KqB,OAAS,EA4K9B;QA5KqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,oBAAC,CAAoB;KACvB;CA6KtC;AAED,AAOA,MAAA,sBAAA,CAAA;;;;IAKA,WAAA,CAtLqB,OAAS,EAsL9B;QAtLqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,kBAAC,CAAkB;KACrB;CAuLtC;AAED,AAOA,MAAA,uBAAA,CAAA;;;;IAKA,WAAA,CAhMqB,OAAS,EAgM9B;QAhMqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,mBAAC,CAAmB;KACtB;CAiMtC;AAED,AAOA,MAAA,iBAAA,CAAA;;;;IAKA,WAAA,CA1MqB,OAAS,EA0M9B;QA1MqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,YAAC,CAAY;KACjB;CA2MpC;AAED,AAOA,MAAA,oBAAA,CAAA;;;;IAKA,WAAA,CApNqB,OAAS,EAoN9B;QApNqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,gBAAC,CAAgB;KACtB;CAqNnC;AAED,AAOA,MAAA,uBAAA,CAAA;;;;IAKA,WAAA,CA9NqB,OAAS,EA8N9B;QA9NqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,mBAAC,CAAmB;KACvB;CA+NrC;AAED,AAOA,MAAA,oBAAA,CAAA;;;;IAKA,WAAA,CAxOqB,OAAS,EAwO9B;QAxOqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,gBAAC,CAAgB;KACpB;CAyOrC;AAED,AAOA,MAAA,kBAAA,CAAA;IAEA,WAAA,GAAA;QAhPW,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,aAAC,CAAa;KACpD;CAgPF;AAED,AAKA,MAAA,gBAAA,CAAA;IAEA,WAAA,GAAA;QArPW,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,WAAC,CAAW;KAClD;CAqPF;AAED,AAKA,MAAA,qBAAA,CAAA;;;;IAKA,WAAA,CA5PqB,OAAS,EA4P9B;QA5PqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,iBAAC,CAAiB;QA8PvD,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;SACnE;KACF;CACF;AAED,AAOA,MAAA,+BAAA,CAAA;;;;IAKA,WAAA,CAtQqB,OAAS,EAsQ9B;QAtQqB,IAArB,CAAA,OAAqB,GAAA,OAAA,CAAS;QADnB,IAAX,CAAA,IAAW,GAAO,sBAAA,CAAuB,4BAAC,CAA4B;KACP;CAuQ9D;;ADnbM,MAAM,iBAAA,GAAoB,CAC/B,QAAU,EACV,SAAW,EACX,GAAK,KAHP;;IAME,qBAAI,YAAA,GAAe,QAAA,CAAS;IAE5B,IAAI,QAAC,CAAQ,cAAC,CAAc,eAAC,CAAe,EAAE;QAC5C,MAAM,CAAC,IAAC,CAAI,QAAC,CAAQ,aAAC,CAAa,CAAC,OAAC,CAAO,QAAC,IAAjD;YACM,QAAQ,CAAC,aAAC,CAAa,QAAC,CAAQ,CAAC,WAAC,CAAW,IAAG,EAAM,CAAA,CAAS;YAC/D,qBAAI,IAAA,GACF,QAAQ,CAAC,aAAC,CAAa,QAAC,CAAQ,CAAC,IAAC,CAAI;;YAExC,qBAAI,cAAA,CAAe;YAEnB,IAAI,IAAC,KAAQ,IAAA,IAAQC,OAAG,CAAO,IAAC,EAAK,EAAA,CAAG,EAAE;gBACxC,cAAc,GAAG,IAAA,CAAK;aACvB;iBAAM,IAAAkB,aAAO,CAAa,IAAC,CAAI,EAAE;;gBAEhC,qBAAI,SAAA,GAAY,sBAAA,mBACM,IAAC,GACrB,SAAS,CACV,CAAC;gBACF,cAAc,GAAG,wBAAA,CAAyB,SAAC,EAAU,SAAA,EAAW,GAAA,CAAI,CAAC;aACtE;iBAAM,IAAAZ,OAAO,CAAO,IAAC,CAAI,EAAE;;gBAE1B,qBAAI,UAAA,GAAmC,wBAAA,mBACf,IAAC,GACvB,SAAS,CACV,CAAC;gBACF,cAAc,GAAG,UAAA,CAAW,GAAC,CAAG,CAAC,IAC/B,wBAAwB,CAAC,CAAC,EAAE,SAAA,EAAW,GAAA,CAAI,CAC5C,CAAC;aACH;YACD,qBAAI,kBAAA,GAAqB,gBAAA,GAAmB,QAAA,GAAW,YAAA,CAAa;YACpE,YAAY,IAAaW,GAAG,CAC1B,YAAY,EACZ,kBAAkB,EAClB,cAAc,CACd,CAAC,CAAD;SACH,CAAC,CAAC;KACJ;IAED,OAAO,YAAA,CAAa;CACrB,CAAC;AAEF,AAAO,MAAM,yBAAA,GAA4B,CACvC,KAA2B,EAC3B,SAAW,EACX,GAHF,GAGa,EAAA,KAHb;IAKE,qBAAI,OAAA,GAAgC,EAAA,CAAG;IACvC,KAAK,qBAAI,IAAA,IAAQ,KAAA,EAAO;QACtB,OAAO,CAAC,IAAC,CAAI,wBAAC,CAAwB,IAAC,EAAK,SAAA,EAAW,GAAA,CAAI,CAAC,CAAC;KAC9D;IACD,OAAO,OAAA,CAAQ;CAChB,CAAC;AAEF,AAAO,MAAM,wBAAA,GAA2B,CACtC,IAAM,EACN,SAAW,EACX,GAHF,GAGa,EAAA,KAHb;IAKE,IAAI,CAAC,IAAC,EAAK;QACT,OAAO,IAAA,CAAK;KACb;IACD,qBAAI,aAAA,GAAgBT,SAAG,mBAAwB,IAAC,EAAI,CAAC;IAErD,IAAIN,WAAG,CAAW,GAAC,CAAG,aAAC,CAAa,IAAC,CAAI,CAAC,EAAE;QAC1C,GAAG,CAAC,aAAC,CAAa,IAAC,CAAI,GAAG,EAAA,CAAG;KAC9B;IACD,IAAIA,WAAG,CAAW,GAAC,CAAG,aAAC,CAAa,IAAC,CAAI,CAAC,aAAC,CAAa,EAAC,CAAE,CAAC,EAAE;QAC5D,GAAG,CAAC,aAAC,CAAa,IAAC,CAAI,CAAC,aAAC,CAAa,EAAC,CAAE,GAAG,aAAA,CAAc;QAC1D,aAAa,GAAG,iBAAA,CAAkB,aAAC,EAAc,SAAA,EAAW,GAAA,CAAI,CAAC;QACjE,IAAI,aAAC,CAAa,iBAAC,EAAkB;YACnC,aAAa,CAAC,iBAAC,GAAmB,iBAAA,CAChC,aAAa,CAAC,iBAAC,EACf,SAAS,EACT,GAAG,CACJ,CAAC;SACH;KACF;IAED,OAAO,GAAA,CAAI,aAAC,CAAa,IAAC,CAAI,CAAC,aAAC,CAAa,EAAC,CAAE,CAAC;CAClD,CAAC;AAEF,AAAO,MAAM,sBAAA,GAAyB,CACpC,UAAY,EACZ,SAAW,KAFb;IAIE,OAAOG,GAAG,CAAG,SAAC,EAAU,CAAA,UAAE,CAAU,IAAC,EAAK,UAAA,CAAW,EAAC,CAAE,EAAE,IAAA,CAAK,CAAC;CACjE,CAAC;AAEF,AAAO,MAAM,wBAAA,GAA2B,CACtC,WAAsC,EACtC,SAAW,KAFb;IAIE,OAAO,WAAA,CAAY,GAAC,CAAG,EAAC,IAAK,sBAAA,CAAuB,EAAC,EAAG,SAAA,CAAU,CAAC,CAAC;CACrE,CAAC;AAEF,AAAO,MAAM,mBAAA,GAAsB,CACjC,IAAM,EACN,gBAAkB,EAClB,mBAA8C,EAC9C,aAAgB,KAJlB;IAME,qBAAI,UAAA,GAAuB,EAAA,CAAG;IAC9B,IAAIH,WAAG,CAAW,aAAC,CAAa,EAAE;QAChC,aAAa,GAAG,GAAA,CAAI;KACrB;IACD,qBAAI,MAAA,GAAwB,IAAA,CAAK,KAAC,CAAK,aAAC,CAAa,CAAC;IACtD,qBAAI,mBAAA,GAAsB,gBAAA,CAAiB;IAC3C,KAAK,qBAAI,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,MAAA,CAAO,MAAC,EAAO,CAAA,EAAE,EAAG;QACtC,qBAAI,UAAA,GAAaE,IAAG,CAAI,mBAAC,EAAoB,EAAE,IAAA,EAAM,mBAAA,EAAoB,CAAE,CAAC;QAE5E,IAAIF,WAAG,CAAW,UAAC,CAAU,EAAE;YAC7B,MAAM,IAAI,KAAA,CAAM,sBAAC,CAAsB,CAAC;SACzC;;QAED,IACEA,WAAG,CAAW,UAAC,CAAU,UAAC,CAAU;YACpCA,WAAG,CAAW,UAAC,CAAU,aAAC,CAC5B,EAAE;YACA,MAAM,IAAI,KAAA,CAAM,8CAAC,CAA8C,CAAC;SACjE;QAED,IAAI,UAAC,CAAU,UAAC,CAAU,cAAC,CAAc,MAAC,CAAM,CAAC,CAAC,CAAC,EAAE;YACnD,UAAU,CAAC,IAAC,CAAI,YAAC,EAAa,MAAA,CAAO,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM;SACP;aAAM,IAAA,UAAK,CAAU,aAAC,CAAa,cAAC,CAAc,MAAC,CAAM,CAAC,CAAC,CAAC,EAAE;YAC7D,qBAAI,gBAAA,GAAmB,UAAA,CAAW,aAAC,CAAa,MAAC,CAAM,CAAC,CAAC,CAAC,CAAC;YAC3D,IAAI,gBAAC,CAAgB,YAAC,KAAgB,SAAA,EAAW;gBAC/C,IAAI,CAAC,KAAK,MAAA,CAAO,MAAC,GAAQ,CAAA,EAAG;oBAC3B,MAAM,IAAI,KAAA,CAAM,uCAAC,CAAuC,CAAC;iBAC1D;qBAAM;oBACL,UAAU,CAAC,IAAC,CAAI,eAAC,EAAgB,MAAA,CAAO,CAAC,CAAC,EAAE,WAAA,CAAY,CAAC;iBAC1D;aACF;iBAAM;gBACL,mBAAmB,GAAG,gBAAA,CAAiB,IAAC,CAAI;gBAC5C,UAAU,CAAC,IAAC,CAAI,eAAC,EAAgB,MAAA,CAAO,CAAC,CAAC,EAAE,WAAA,CAAY,CAAC;aAC1D;SACF;aAAM;YACL,MAAM,IAAI,KAAA,CAAM,kDAAC,CAAkD,CAAC;SACrE;KACF;IACD,OAAO,UAAA,CAAW,IAAC,CAAI,aAAC,CAAa,CAAC;CACvC,CAAC;AAEF,AAAO,MAAM,oBAAA,GAAuB,CAClC,IAAM,EACN,aAAe,EACf,mBAA8C,EAC9C,aAAgB,KAJlB;IAME,qBAAI,gBAAA,GAAmB,mBAAA,CACrB,IAAI,EACJ,aAAa,CAAC,IAAC,EACf,mBAAmB,EACnB,aAAa,CACd,CAAC;IACF,OAAOG,GAAG,CAAG,aAAC,EAAc,gBAAA,CAAiB,CAAC;CAC/C,CAAC;;;;;AAKF,AACC,MAAA,oBAAA,GAAA,CAAC,QAAkB,EAClB,MAAgB,KAFlB;;IAKE,SAAF,UAAA,CAAsB,QAAa,EAAE,QAAa,EAAlD;QACI,IAAIC,OAAS,CAAC,QAAQ,CAAC,EAAE;YACvB,OAAO,QAAQ,CAAC;SACjB;KACF;IAED,OAAOU,SAAW,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;CACtD,CAAC;;;;;AAKF,AAEC,MAAA,mBAAA,GAAA,CADC,cAAyC,EACzC,QAAkB,EAClB,UAAmB,KAHrB;IAKE,IAAI,iBAAiB,GAAvB,MAAA,CAAA,MAAA,CAAA,EAAA,EAA+B,cAAc,CAAE,CAAC;IAC9C,IAAI,UAAU,EAAE;QACd,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,MAArC,CAAA,MAAA,CAAA,EAAA,EACS,QAAQ,EADjB,EAEM,iBAAiB,EAAE,QAAQ,EAC3B,KAAK,EAAE,SAAS,EAChB,MAAM,EAAE,EAAE,EACV,OAAO,EAAE,KAAK,EALpB,CAMsB,CAAC;KACpB;SAAM;QACL,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,MAArC,CAAA,MAAA,CAAA,EAAA,EACS,QAAQ,EADjB,EAEM,iBAAiB,EAAE,IAAI,EACvB,KAAK,EAAE,SAAS,EAChB,MAAM,EAAE,EAAE,EACV,OAAO,EAAE,KAAK,EALpB,CAMsB,CAAC;KACpB;IACD,OAAOhB,OAAS,CAAC,cAAc,EAAE,iBAAiB,CAAC;UAC/C,cAAc;UACd,iBAAiB,CAAC;CACvB,CAAC;;;;;AAKF,AAGC,MAAA,mBAAA,GAAA,CAFC,SAA+B,EAC/B,UAA8B,KAFhC;IAIE,IAAI,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE;QAC7C,IAAI,QAAQ,GAAhB,MAAA,CAAA,MAAA,CAAA,EAAA,EAA8C,SAAS,CAAE,CAAC;QACtD,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,GAA7B,MAAA,CAAA,MAAA,CAAA,EAAA,EAAqC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAE,CAAC;QAC7D,OAAO,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAChD,OAAO,QAAQ,CAAC;KACjB;IACD,OAAO,SAAS,CAAC;CAClB,CAAC;;;;;;;;;AASF,AAKC,MAAA,mBAAA,GAAA,CAJC,SAA+B,EAC/B,UAA8B,EAC9B,aAA6B,EAC7B,OAAuB,KAJzB;IAME,IACEE,WAAa,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACzCA,WAAa,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CACzD,EAAE;QACA,IAAI,aAAa,KAAK,SAAS,EAAE;YAC/B,IAAI,QAAQ,GAAlB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAgD,SAAS,CAAE,CAAC;YACtD,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,GAA/B,MAAA,CAAA,MAAA,CAAA,EAAA,EAAuC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAE,CAAC;YAC7D,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,GAA9C,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAC5C,CAAC;YACF,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG;gBACzC,IAAI,EAAE,UAAU,CAAC,IAAI;gBACrB,EAAE,EAAE,UAAU,CAAC,EAAE;gBACjB,iBAAiB,EAAE,IAAI;aACP,CAAC;YACnB,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC;YAC9D,OAAO,QAAQ,CAAC;SACjB;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;KACF;IACD,IAAI,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EAA4C,SAAS,CAAE,CAAC;IACtD,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,GAA3B,MAAA,CAAA,MAAA,CAAA,EAAA,EAAmC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAE,CAAC;IAC7D,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,GAA1C,MAAA,CAAA,MAAA,CAAA,EAAA,EACO,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAC5C,CAAC;IACF,IAAI,aAAa,KAAK,IAAI,EAAE;QAC1B,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,aAAa,CAAC;KAChE;IACD,IAAI,OAAO,IAAI,IAAI,EAAE;QACnB,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC;KAC5D;IACD,OAAO,QAAQ,CAAC;CACjB,CAAC;;;;;;;AAOF,AAOC,MAAA,eAAA,GAAA,CANC,SAAmB,EACnB,SAAmB,KAFrB;IAIE,IAAI,SAAS,KAAK,SAAS,EAAE;QAC3B,OAAO,IAAI,CAAC;KACb;IACD,IAAI,SAAS,KAAK,IAAI,MAAM,SAAS,KAAK,IAAI,CAAC,EAAE;QAC/C,OAAO,KAAK,CAAC;KACd;IAED,QACEF,OAAS,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,CAAC,EAAE,CAAC;QACrCA,OAAS,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC;QACzCA,OAAS,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,UAAU,CAAC;QACrDA,OAAS,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC;QACzCA,OAAS,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,KAAK,CAAC;QAC3CA,OAAS,CAAC,SAAS,CAAC,aAAa,EAAE,SAAS,CAAC,aAAa,CAAC,EAC3D;CACH,CAAC;AAEF,AAOO,MAAM,mBAAA,GAAsB,CANjC,KAOO,EANP,QAOU,EANV,UAOY,KAVd;IAKE,qBAOI,kBAAA,GAAqB,KAAA,CAAM,QAAC,CAAQ,EAAC,CAAE,CAAC;IAN5C,qBAOI,iBAAA,GAAoB,KAAA,CAAM,QAAC,CAAQ,EAAC,CAAE,CAAC,iBAAC,CAAiB;IAL7D,qBAOI,WAAa,CAAS;IAN1B,qBAOI,gBAAkB,CAAc;IANpC,IAAI,UAOC,EAAW;;;QAJd,WAAW,GAOG,QAAA,CAAS;QANvB,iBAAiB,GAOG,QAAA,CAAS;QAN7B,gBAAgB,GAOG,SAAA,CAAU;KAN9B;SAOM;QANL,qBAOI,cAAA,GAAiB,oBAAA,CAAqB,kBAAC,EAAmB,QAAA,CAAS,CAAC;QANxE,IAAI,eAOC,CAAe,cAAC,EAAe,iBAAA,CAAkB,EAAE;;YALtD,WAAW,GAOG,iBAAA,CAAkB;YANhC,gBAAgB,GAOG,SAAA,CAAU;SAN9B;aAOM;;;YAJL,WAAW,GAOG,cAAA,CAAe;YAN7B,IAAI,iBAOC,KAAqB,IAAA,EAAM;gBAN9B,gBAAgB,GAOG,SAAA,CAAU;aAN9B;iBAOM,IAAA,kBAAK,CAAkB,KAAC,KAAS,KAAA,EAAO;gBAN7C,gBAAgB,GAOG,KAAA,CAAM;aAN1B;iBAOM;gBANL,gBAAgB,GAOG,SAAA,CAAU;aAN9B;SACF;KACF;IAED,qBAOI,QAAA,GAPN,MAAA,CAAA,MAAA,CAAA,EAAA,EAOmB,KAAI,CAAK,CAAE;IAN5B,QAAQ,CAOC,QAAC,CAAQ,EAAC,CAAE,IAAG,MAP1B,CAAA,MAAA,CAAA,EAAA,EACO,WAOC,EARR,EAEI,iBAAiB,EAOE,iBAAA,EANnB,KAAK,EAOE,gBAAA,EANP,MAAM,EAOE,EAAA,EANR,OAAO,EAOE,KAAA,EAZb,CAaO,CAAA,CAAc;IALnB,OAOOA,OAAG,CAAO,QAAC,CAAQ,QAAC,CAAQ,EAAC,CAAE,EAAE,KAAA,CAAM,QAAC,CAAQ,EAAC,CAAE,CAAC;UACvD,KAAA;UACA,QAAA,CAAS;CANd,CAOC;AALF,AAOO,MAAM,+BAAA,GAAkC,CAN7C,KAOO,EANP,SAOW,KATb;IAIE,qBAOI,QAAA,GAAoC,KAAA,CAAM;IAN9C,KAAK,qBAOI,OAAA,IAAW,KAAA,EAAO;QANzB,IAAI,KAOC,CAAK,cAAC,CAAc,OAAC,CAAO,EAAE;YANjC,qBAOI,UAAA,GAAa,KAAA,CAAM,OAAC,CAAO,CAAC;YANhC,IACE,UAAU,CAOC,KAAC,CAAK,EAAC,KAAM,SAAA,CAAU,EAAC;gBANnC,UAAU,CAOC,KAAC,CAAK,IAAC,KAAQ,SAAA,CAAU,IANtC,EAOE;;gBALA,QAAQ,GAOG,gBAAA,CAAiB,QAAC,EAAS,UAAA,CAAW,KAAC,CAAK,OAAC,CAAO,CAAC;gBANhE,qBAOI,aAAA,GAA+B,EAAE,IAAA,EAAM,KAAA,EAAO,MAAA,EAAQ,WAAA,EAAY,CAAE;gBANxE,QAAQ,CAOC,UAAC,CAAU,KAAC,CAAK,OAAC,CAAO,CAAC,MAAC,GAAQ,CAAA,aAAE,CAAa,CAAC;aAN7D;SACF;KACF;IACD,OAOO,QAAA,CAAS;CANjB,CAOC;AALF,AAOO,MAAM,4BAAA,GAA+B,CAN1C,SAOW,EANX,KAOO,EANP,QAOU,KAVZ;IAKE,IAAI,CAOC,KAAC,CAAK,IAAC,IAAO,CAAA,KAAE,CAAK,EAAC,IAAK,QAAA,CAAS,IAAC,YAAe,KAAA,EAAO;QAN9D,MAOM,IAAI,KAAA,CAAM,oBAAC,CAAoB,CAAC;KANvC;IACD,OAOO,oBAAA,CANL,SAAS,EACT,EAOE,EAAA,EAAI,KAAA,CAAM,EAAC,EAAG,IAAA,EAAM,KAAA,CAAM,IAAC,EAAI,EANjC,QAAQ,CAOC,MAAC,EANV,KAAK,CACN,CAOC;CANH,CAOC;AALF,AAOO,MAAM,oBAAA,GAAuB,CANlC,SAOW,EANX,EAOI,EANJ,MAO4B,EAN5B,gBAOkB,KAXpB;IAME,IAAI,CAOC,SAAC,CAAS,EAAC,CAAE,IAAC,CAAI,IAAI,CAAA,SAAE,CAAS,EAAC,CAAE,IAAC,CAAI,CAAC,EAAC,CAAE,EAAC,CAAE,EAAE;QANrD,OAOO,SAAA,CAAU;KANlB;IACD,qBAOI,QAAA,GAPN,MAAA,CAAA,MAAA,CAAA,EAAA,EAOyC,SAAI,CAAS,CAAE;IANtD,QAAQ,CAOC,EAAC,CAAE,IAAC,CAAI,GAPnB,MAAA,CAAA,MAAA,CAAA,EAAA,EAOwB,QAAI,CAAQ,EAAC,CAAE,IAAC,CAAI,CAAC,CAAE;IAN7C,qBAOI,aAAA,GAPN,MAAA,CAAA,MAAA,CAAA,EAAA,EAOwB,QAAI,CAAQ,EAAC,CAAE,IAAC,CAAI,CAAC,EAAC,CAAE,EAAC,CAAE,CAAC,CAAE;IALpD,IAAI,gBAOC,KAAoB,KAAA,EAAO;QAN9B,aAAa,CAOC,MAAC,GAAQ,EAAA,CAAG;QAN1B,IAAI,MAOC,EAAO;YANV,aAAa,CAOC,MAAC,CAAM,IAAC,CAAI,GAAC,MAAG,CAAM,CAAC;SANtC;KACF;SAOM,IAAA,gBAAK,KAAoB,KAAA,EAAO;QANrC,qBAOI,aAAA,GAAgB,aAAA,CAAc,MAAC,CAAM;QANzC,aAAa,CAOC,MAAC,GAAQ,EAAA,CAAG;QAN1B,IAAI,aAOC,EAAc;YANjB,aAAa,CAOC,MAAC,CAAM,IAAC,CAAI,GAAC,aAAG,CAAa,CAAC;SAN7C;QACD,IAAI,MAOC,EAAO;YANV,aAAa,CAOC,MAAC,CAAM,IAAC,CAAI,GAAC,MAAG,CAAM,CAAC;SANtC;KACF;SAOM;QANL,qBAOI,aAAA,GAAgB,aAAA,CAAc,MAAC,CAAM;QANzC,aAAa,CAOC,MAAC,GAAQ,EAAA,CAAG;QAN1B,IAAI,aAOC,EAAc;YANjB,KAAK,qBAOI,YAAA,IAAgB,aAAA,EAAe;gBANtC,qBAOI,MAAA,GANF,MAAM,IAOI,MAAA,CAAO,MAAC,CAAM,EAAC,IAAKA,OAAG,CAAO,EAAC,EAAG,YAAA,CAAa,CAAC,CAAC,MAAC,GAAQ,CAAA,CAAE;gBANxE,IAAI,CAOC,MAAC,EAAO;oBANX,aAAa,CAOC,MAAC,CAAM,IAAC,CAAI,YAAC,CAAY,CAAC;iBANzC;aACF;SACF;KACF;IACD,QAAQ,CAOC,EAAC,CAAE,IAAC,CAAI,CAAC,EAAC,CAAE,EAAC,CAAE,GAAG,aAAA,CAAc;IANzC,OAOO,QAAA,CAAS;CANjB,CAOC;;;;;;;AAAF,SAAA,gBAAA,CACE,QAA8B,EAC9B,IAAY,EACZ,EAAU,EAHZ;IAKE,qBAEI,aAAA,GAAgB,QAAA,CAAS,IAAC,CAAI,CAAC,EAAC,CAAE,CAAC;IADvC,IAAI,CAEC,aAAC,CAAa,iBAAC,EAAkB;QADpC,OAEO,QAAA,CAAS,IAAC,CAAI,CAAC,EAAC,CAAE,CAAC;KAD3B;SAEM,IAAA,aAAK,CAAa,KAAC,KAAS,SAAA,EAAW;QAD5C,QAAQ,CAEC,IAAC,CAAI,CAAC,EAAC,CAAE,IAAG,MAFzB,CAAA,MAAA,CAAA,EAAA,EACS,QAEC,CAAQ,IAAC,CAAI,CAAC,EAAC,CAAE,EAH3B,EAEM,KAAK,EAEE,SAAA,EADP,QAAQ,EAEE,QAAA,CAAS,IAAC,CAAI,CAAC,EAAC,CAAE,CAAC,iBAAC,EALpC,CAIM,CAAC,CAED;KADH;CACF;AAED,AAEO,MAAM,sBAAA,GAAyB,CADpC,SAEW,EADX,GAE8B,EAD9B,OAEsB,KALxB;IAKE,qBAEI,QAAA,GAFN,MAAA,CAAA,MAAA,CAAA,EAAA,EAEyC,SAAI,CAAS,CAAE;IAAtD,IAAIE,WAEG,CAAW,GAAC,CAAG,EAAE;QADtB,MAAM,CAEC,IAAC,CAAI,QAAC,CAAQ,CAAC,OAAC,CAAO,IAAC,IAFnC;YACM,QAAQ,CAEC,IAAC,CAAI,GAFpB,MAAA,CAAA,MAAA,CAAA,EAAA,EAEyB,QAAI,CAAQ,IAAC,CAAI,CAAC,CAAE;YADvC,MAAM,CAEC,IAAC,CAAI,QAAC,CAAQ,IAAC,CAAI,CAAC,CAAC,OAAC,CAAO,EAAC,IAF3C;gBACQ,gBAAgB,CAEC,QAAC,EAAS,IAAA,EAAM,EAAA,CAAG,CAAC;aADtC,CAEC,CAAC;SADJ,CAEC,CAAC;KADJ;SAEM;QADL,qBAEI,iBAAA,GAAoB,iBAAA,CAAkB,QAAC,EAAS,GAAA,EAAK,OAAA,EAAS,IAAA,CAAK,CAAC;QADxE,KAAK,qBAEI,gBAAA,IAAoB,iBAAA,EAAmB;YAD9C,gBAAgB,CAEC,QAAC,EAAS,gBAAA,CAAiB,IAAC,EAAK,gBAAA,CAAiB,EAAC,CAAE,CAAC;SADxE;KACF;IACD,OAEO,QAAA,CAAS;CADjB,CAEC;AAAF,AAEO,MAAM,oBAAA,GAAuB,CADlC,SAEW,EADX,KAEO,KAJT;IAIE,qBAEI,QAAA,GAFN,MAAA,CAAA,MAAA,CAAA,EAAA,EAEmB,SAAI,CAAS,CAAE;;IAAhC,IAAI,OAEO,KAAA,CAAM,EAAC,KAAM,WAAA,EAAa;QADnC,QAAQ,CAEC,KAAC,CAAK,IAAC,CAAI,GAAG,EAAA,CAAG;KAD3B;SAEM;QADL,QAAQ,CAEC,KAAC,CAAK,IAAC,CAAI,IAAGa,IAAG,CAAI,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,EAAE;YADlD,KAAK,CAEC,EAAC;SADR,CAEK,CAAA,CAA0B;KADjC;IACD,OAEO,QAAA,CAAS;CADjB,CAEC;AAAF,AAEO,MAAM,gBAAA,GAAmB,CAD9B,SAEW,EADX,OAES,KAJX;IAIE,qBAEI,QAAA,GAFN,MAAA,CAAA,MAAA,CAAA,EAAA,EAEmB,SAAI,CAAS,OAAC,CAAO,CAAC,CAAE;IADzC,OAEO,QAAA,CAAS,SAAC,CAAS;IAD1B,OAEO,QAAA,CAAS,MAAC,CAAM;IADvB,OAEO,QAAA,CAAS,IAAC,CAAI;IADrB,OAEO,QAAA,CAAS,KAAC,CAAK;IAAtB,qBAEI,QAAA,GAFN,MAAA,CAAA,MAAA,CAAA,EAAA,EAEmB,SAAI,CAAS,CAAE;IADhC,QAAQ,CAEC,OAAC,CAAO,GAAG,QAAA,CAAS;IAD7B,OAEO,QAAA,CAAS;CADjB,CAEC;;;;;;;;;;;;AAUF,AAGC,MAAA,2BAAA,GAAA,CAFC,SAA+B,EAC/B,QAAkB,EAClB,UAAmB,EACnB,QAAiB,KAJnB;IAME,IAAIb,WAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE;QAC3C,IAAI,YAAY,GAApB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAkD,SAAS,CAAE,CAAC;QAC1D,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QACjC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,mBAAmB,CAC/C,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAC3B,QAAQ,EACR,UAAU,CACX,CAAC;QACF,OAAO,YAAY,CAAC;KACrB;SAAM,IAAIA,WAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE;QAC3E,IAAI,qBAAqB,GAAG,mBAAmB,CAC7C,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EACxB,QAAQ,EACR,UAAU,CACX,CAAC;;QAGF,IAAI,qBAAqB,KAAK,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACtD,IAAI,YAAY,GAAtB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAoD,SAAS,CAAE,CAAC;YAC1D,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,qBAAqB,CAAC;YACpD,OAAO,YAAY,CAAC;SACrB;QACD,OAAO,SAAS,CAAC;KAClB;SAAM;QACL,IAAI,qBAAqB,GAAG,mBAAmB,CAC7C,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EACxB,QAAQ,EACR,UAAU,CACX,CAAC;;QAGF,IAAI,qBAAqB,KAAK,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACtD,IAAI,YAAY,GAAtB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAoD,SAAS,CAAE,CAAC;YAC1D,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,qBAAqB,CAAC;YACpD,OAAO,YAAY,CAAC;SACrB;QACD,OAAO,SAAS,CAAC;KAClB;CACF,CAAC;AAEF,AAGO,MAAM,0BAAA,GAA6B,CAFxC,SAGW,EAFX,OAGS,KALX;IAIE,qBAGI,IAAA,IAAmCG,GAAG,CAAG,OAAC,EAAQ,MAAA,CAAO,CAAA,CAAC;IAD9D,IAAIH,WAGG,CAAW,IAAC,CAAI,EAAE;QAFvB,OAGO,SAAA,CAAU;KAFlB;IAED,IAAI,GAGGI,OAAG,CAAO,IAAC,CAAI,IAAe,IAAC,KAAkB,CAAC,IAAC,CAAI,CAAA,CAAC;IAD/D,qBAGI,QAAA,IAA4BD,GAAG,CAAG,OAAC,EAAQ,UAAA,CAAW,CAAA,CAAC;IAD3D,IAAI,CAGCH,WAAG,CAAW,QAAC,CAAQ,EAAE;QAF5B,IAAI,GAGG,CAAA,GAAE,IAAG,EAAK,GAAA,QAAI,CAAQ,CAAC;KAF/B;IAED,QAG6BY,MAAG,CAF9B,IAAI,EACJ,CAAC,MAGQ,EAAsB,QAAU,KAL7C;;;;;;;;QAUM,OAGO,2BAAA,CAA4B,MAAC,EAAO,QAAA,EAAU,IAAA,EAAM,IAAA,CAAK,CAAC;;;;KAClE,EACD,SAAS,CACT,EAGA;CAFH,CAGC;;;;;;;;;;;AAQF,AAIC,MAAA,iBAAA,GAAA,CAHC,YAAqC,EACrC,KAAY,KAFd;IAIE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;QAClB,OAAO,YAAY,CAAC;KACrB;IAED,IAAI,aAAa,GAAnB,MAAA,CAAA,MAAA,CAAA,EAAA,EAA2B,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAE,CAAC;IACvD,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC;IAC7B,aAAa,CAAC,KAAK,GAAGN,SAAW,CAAC,KAAK,CAAC,CAAC;IAEzC,IAAIN,WAAa,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;QACvC,aAAa,CAAC,MAAM,GAAG,EAAE,CAAC;KAC3B;IAED,IAAI,eAAe,GAArB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAsD,YAAY,CAAE,CAAC;IACnE,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,aAAa,CAAC;IAC7D,OAAO,eAAe,CAAC;CACxB,CAAC;;;;AAIF,AAKC,MAAA,kBAAA,GAAA,CAJC,YAAqC,EACrC,OAAe,EACf,QAAkB,KAHpB;IAKE,IAAI,UAAU,GAAe,YAAY,CAAC,OAAO,CAAC,CAAC;IACnD,IAAI,UAAU,EAAE;QACd,IAAI,IAAI,GAAGI,OAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACtE,IAAI,aAAa,GAArB,MAAA,CAAA,MAAA,CAAA,EAAA,EACS,UAAU,EADnB,EAEM,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,GAAG,oBAAoB,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAC/D,IAAI,EAAE,QAAQ,CAAC,IAAI,EACnB,KAAK,EAAE,QAAQ,CAAC,KAAK,EACrB,OAAO,EAAE,KAAK,EALpB,CAMK,CAAC;QAEF,IAAI,QAAQ,GAAhB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAiD,YAAY,CAAE,CAAC;QAC5D,QAAQ,CAAC,OAAO,CAAC,GAAe,aAAa,CAAC;QAC9C,OAAO,QAAQ,CAAC;KACjB;IACD,OAAO,YAAY,CAAC;CACrB,CAAC;;;;;;;AAOF,AAMC,MAAA,iBAAA,GAAA,CALC,YAAqC,EACrC,OAAe,EACf,QAAkB,KAHpB;IAKE,IAAI,CAAC,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE;QACtC,OAAO,YAAY,CAAC;KACrB;IACD,IAAI,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EAAsB,YAAY,CAAE,CAAC;IACnC,IAAI,aAAa,GAAnB,MAAA,CAAA,MAAA,CAAA,EAAA,EAA2B,QAAQ,CAAC,OAAO,CAAC,CAAE,CAAC;IAC7C,aAAa,CAAC,MAAM,GAAG,EAAE,CAAC;IAC1B,IAAI,QAAQ,CAAC,MAAM,EAAE;QACnB,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC/C;IACD,QAAQ,CAAC,OAAO,CAAC,GAAG,aAAa,CAAC;IAClC,OAAO,QAAQ,CAAC;CACjB,CAAC;;;;AAIF,AAOC,MAAA,WAAA,GAAA,CANC,YAAqC,EACrC,OAAe,KAFjB;IAIE,IAAI,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EAA+C,YAAY,CAAE,CAAC;IAC5D,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC;IACzB,OAAO,QAAQ,CAAC;CACjB,CAAC;;;;AAIF,AAQC,MAAA,oBAAA,GAAA,CAPC,QAAkB,KADpB;IAGE,OAAO,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC;CACjD,CAAC;;;;;;;;;;;AAWF,AASC,MAAA,6BAAA,GAAA,CARC,IAAY,EACZ,iBAAgC,EAChC,SAA+B,EAC/B,mBAA8C,EAC9C,aAAsB,KALxB;IAOE,IAAIJ,WAAa,CAAC,aAAa,CAAC,EAAE;QAChC,aAAa,GAAG,GAAG,CAAC;KACrB;IACD,IAAI,MAAM,GAAkB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACtD,IAAI,oBAAoB,GAAG,iBAAiB,CAAC;IAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,IAAI,UAAU,GAAGE,IAAM,CAAC,mBAAmB,EAAE;YAC3C,IAAI,EAAE,oBAAoB,CAAC,IAAI;SAChC,CAAC,CAAC;QAEH,IAAIF,WAAa,CAAC,UAAU,CAAC,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACzC;;QAED,IACEA,WAAa,CAAC,UAAU,CAAC,UAAU,CAAC;YACpCA,WAAa,CAAC,UAAU,CAAC,aAAa,CACxC,EAAE;YACA,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;QACD,IAAI,UAAU,CAAC,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;YACnD,OAAOG,GAAK,CAAC,oBAAoB,EAAE,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;SACrE;aAAM,IAAI,UAAU,CAAC,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;YAC7D,IAAI,CAAC,KAAK,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3B,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D,CAAC;aACH;YACD,IAAI,gBAAgB,GAAG,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,IAAI,gBAAgB,CAAC,YAAY,KAAK,SAAS,EAAE;gBAC/C,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;aAC1D;iBAAM;gBACL,IAAI,QAAQ,GAAGA,GAAK,CAClB,oBAAoB,EACpB,gBAAgB,GAAG,MAAM,CAAC,CAAC,CAAC,EAC5B,IAAI,CACL,CAAC;gBACF,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;oBAC/B,OAAO,IAAI,CAAC;iBACb;qBAAM;oBACL,IAAI,WAAW,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBAC5D,oBAAoB,GAAkBA,GAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;iBACrE;aACF;SACF;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACrE;QACD,IAAIH,WAAa,CAAC,oBAAoB,CAAC,EAAE;YACvC,OAAO,IAAI,CAAC;SACb;KACF;CACF,CAAC;AAEF,AASO,MAAM,eAAA,GAAkB,CAR7B,SASW,EARX,SASW,EARX,KASO,EARP,mBAS8C,EAR9C,eASkB,KAdpB;IAOE,OASOW,MAAG,CAAM,SAAC,EAAU,QAAA,IAT7B;QACI,IACE,KAAK,CASC,cAAC,CAAc,QAAC,CAAQ;YAR9B,KAAK,CASC,MAAC,CAAM,cAAC,CAAc,WAAC,CAR/B,EASE;YARA,OASO,KAAA,CAAM,MAAC,CAAM,SAAC,CAAS,KAAC,CAAK,OAAC,IAT3C;gBACQ,qBASI,aAAA,CAAc;gBARlB,qBASI,kBAAA,CAAmB;gBAPvB,IAAI,CASCX,WAAG,CAAW,eAAC,CAAe,EAAE;oBARnC,aAAa,IASWG,GAAG,CAAG,eAAC,EAAgB,eAAA,CAAgB,CAAA,CAAC;oBARhE,kBAAkB,IAS6BA,GAAG,CARhD,eAAe,EACf,oBAAoB,CACpB,CAAC,CASD;iBARH;;gBAED,qBASI,kBAAA,GAAqB,6BAAA,CARvB,OAAO,CASC,IAAC,EART,QAAQ,EACR,SAAS,EACT,mBAAmB,EACnB,aAAa,CACd,CASC;gBARF,IAAI,CASC,kBAAC,EAAmB;oBARvB,OASO,KAAA,CAAM;iBARd;gBAED,qBASI,QAAA,IAA8BD,IAAG,CAAI,kBAAC,EAAmB;oBAR3D,IAAI,EASE,OAAA,CAAQ,QAAC;iBARhB,CASC,CAAA,CAAC;gBAPH,IAAI,QASC,EAAS;oBARZ,OASO,QAAA,CAAS,UAAC,CAAU,OAAC,CAAO,KAAC,EAAM,kBAAA,CAAmB,CAAC;iBAR/D;gBAED,OAAO,CASC,QAAC,GAAU,OAAA,CAAQ,cAAC,CAAc,UAAC,CAAU;sBACjD,OAAA,CAAQ,QAAC;sBACT,QAAA,CAAS;gBAPb,QAAQ,OASC,CAAO,QAAC;oBARf,KASK,QAAA;wBARH,IAAIQ,QASG,CAAQ,OAAC,CAAO,KAAC,CAAK,IAAIA,QAAG,CAAQ,kBAAC,CAAkB,EAAE;4BAR/D,QACE,OAAO,CASC,KAAC,CAAK,WAAC,EAAW,KAAM,kBAAA,CAAmB,WAAC,EAAW,EAC/D;yBARH;6BASM;4BARL,OASO,OAAA,CAAQ,KAAC,KAAS,kBAAA,CAAmB;yBAR7C;oBAEH,KASK,OAAA;wBARH,OASO,OAAA,CAAQ,KAAC,KAAS,kBAAA,CAAmB;oBAP9C,KASK,UAAA;wBARH,OASOD,QAAG,CAAQ,kBAAC,EAAmB,OAAA,CAAQ,KAAC,CAAK,CAAC;oBAPvD,KASK,WAAA;wBARH,OASOA,QAAG,CARR,kBAAkB,CASC,WAAC,EAAW,EAR/B,OAAO,CASC,KAAC,CAAK,WAAC,EAAW,CAR3B,CASC;oBAPJ,KASK,IAAA;wBARH,IAAIL,OASG,CAAO,OAAC,CAAO,KAAC,CAAK,EAAE;4BAR5B,OASOK,QAAG,CAAQ,OAAC,CAAO,KAAC,EAAM,kBAAA,CAAmB,CAAC;yBARtD;6BASM;4BARL,OASOA,QAAG,CAAQ,CAAC,OAAC,CAAO,KAAC,CAAK,EAAE,kBAAA,CAAmB,CAAC;yBARxD;oBACH,KASK,IAAA;wBARH,OASO,OAAA,CAAQ,KAAC,GAAO,kBAAA,CAAmB;oBAP5C,KASK,KAAA;wBARH,OASO,OAAA,CAAQ,KAAC,IAAQ,kBAAA,CAAmB;oBAP7C,KASK,IAAA;wBARH,OASO,OAAA,CAAQ,KAAC,GAAO,kBAAA,CAAmB;oBAP5C,KASK,KAAA;wBARH,OASO,OAAA,CAAQ,KAAC,IAAQ,kBAAA,CAAmB;oBAP7C,KASK,YAAA;wBARH,OASOD,UAAG,CAAU,kBAAC,EAAmB,OAAA,CAAQ,KAAC,CAAK,CAAC;oBAPzD,KASK,aAAA;wBARH,OASOA,UAAG,CARR,kBAAkB,CASC,WAAC,EAAW,EAR/B,OAAO,CASC,KAAC,CAAK,WAAC,EAAW,CAR3B,CASC;oBAPJ,KASK,UAAA;wBARH,OASOD,QAAG,CAAQ,kBAAC,EAAmB,OAAA,CAAQ,KAAC,CAAK,CAAC;oBAPvD,KASK,WAAA;wBARH,OASOA,QAAG,CARR,kBAAkB,CASC,WAAC,EAAW,EAR/B,OAAO,CASC,KAAC,CAAK,WAAC,EAAW,CAR3B,CASC;oBAPJ;wBACE,OASO,IAAA,CAAK;iBARf;aACF,CASC,CAAC;SARJ;aASM;YARL,OASO,IAAA,CAAK;SARb;KACF,CASC,CAAC;CARJ,CASC;AAPF,AASO,MAAM,2BAAA,GAA8B,CARzC,QASuB,KAVzB;IAGE,IAAIV,OASG,CAAO,QAAC,CAAQ,EAAE;QARvB,OASO,EAAA,CAAG;KARX;IAED,OASO,UAAA,GAAa,QAAA,CAAS,IAAC,EAAI,CAAE;CARrC,CASC;AAPF,AASO,MAAM,yBAAA,GAA4B,CAAA,MAAsB,KAT/D;IACE,IAAIA,OASG,CAAO,MAAC,CAAM,EAAE;QARrB,OASO,EAAA,CAAG;KARX;IAED,OASO,SAAA,GAAY,MAAA,CAAO,IAAC,EAAI,CAAE;CARlC,CASC;AAPF,AASO,MAAM,4BAAA,GAA+B,CAR1C,SASgC,KAVlC;IAGE,IAAIA,OASG,CAAO,SAAC,CAAS,EAAE;QARxB,OASO,EAAA,CAAG;KARX;IACD,qBASI,eAAA,GAAkB,SAAA,CAAU,GAAC,CAAG,CAAC,IATvC;QACI,QACE,SAAS;YACT,CAAC,CASC,IAAC;YARH,GAAG;aACF,CASC,CAAC,QAAC,GAAU,GAAA,GAAM,CAAA,CAAE,QAAC,GAAU,GAAA,GAAM,EAAA,CAAG;YAR1C,GAAG;YACH,kBAAkB,CASC,CAAC,CAAC,KAAC,CAAK,EAC3B;KARH,CASC,CAAC;IARH,OASO,eAAA,CAAgB,IAAC,CAAI,GAAC,CAAG,CAAC;CARlC,CASC;AAPF,AASO,MAAM,0BAAA,GAA6B,CARxC,OAS4B,KAV9B;IAGE,IAAIA,OASG,CAAO,OAAC,CAAO,EAAE;QARtB,OASO,EAAA,CAAG;KARX;IACD,QACE,OAAO;QACP,OAAO;aACJ,GASC,CAAG,CAAC,IAAI,CAAA,CAAE,CAAC,SAAC,KAAa,SAAA,CAAU,GAAC,GAAK,EAAA,GAAK,GAAA,IAAO,CAAA,CAAE,GAAC,CAAG;aAR5D,IASC,CAAI,GAAC,CAAG,EACZ;CARH,CASC;AAPF,AASO,MAAM,mBAAA,GAAsB,CAAA,GAAE,MAAuB,KAT5D;IACE,qBASI,SAAA,GAAY,MAAA,CAAO,MAAC,CAAM,CAAC,IAAI,CAAA,KAAM,EAAA,CAAG,CAAC;IAR7C,IAAI,SASC,CAAS,MAAC,KAAU,CAAA,EAAG;QAR1B,OASO,GAAA,GAAM,SAAA,CAAU,IAAC,CAAI,GAAC,CAAG,CAAC;KARlC;SASM;QARL,OASO,EAAA,CAAG;KARX;CACF,CASC;AAPF,AASO,MAAM,eAAA,GAAkB,CAR7B,QASU,EARV,SASW,KAXb;IAIE,qBASI,OAAA,GAAmB;QARrB,KAAK,EASE;YARL,IAAI,EASE,QAAA,CAAS,IAAC;SARjB;KACF,CASC;;IANF,IAAI,SASC,KAAa,MAAA,IAAU,SAAA,KAAc,OAAA,EAAS;QARjD,OAAO,CASC,WAAC,GAAa;YARpB,IAAI,EASE;gBARJ,EAAE,EASE,QAAA,CAAS,EAAC;gBARd,IAAI,EASE,QAAA,CAAS,IAAC;gBARhB,UAAU,EASE,QAAA,CAAS,UAAC;gBARtB,aAAa,EASE,QAAA,CAAS,aAAC;aAR1B;SACF,CASC;KARH;IAED,IAAI,SASC,KAAa,MAAA,IAAU,QAAA,CAAS,cAAC,EAAe;QARnD,OASO,OAAA,CAAQ,WAAC,CAAW,IAAC,CAAI,EAAC,CAAE;KARpC;;;;IAKD,IAAI,SASC,KAAa,OAAA,IAAW,SAAA,KAAc,QAAA,IAAY,SAAA,KAAc,MAAA,EAAQ;QAR3E,OAAO,CASC,KAAC,CAAK,EAAC,GAAI,QAAA,CAAS,EAAC,CAAE;KARhC;IAED,OASO,OAAA,CAAQ;CARhB,CASC;;AANF,AASO,MAAM,IAAA,GAAO,MATpB;IACE,qBASI,GAAA,GAAM,EAAA,CAAG;IARb,KAAK,qBASI,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,GAAA,EAAK,CAAA,EAAE,EAAG;QAR5B,GAAG,CASC,CAAC,CAAC,GAAG,CAAA,CAAE,GAAG,EAAA,GAAK,GAAA,GAAM,EAAA,IAAM,CAAA,CAAE,QAAC,CAAQ,EAAC,CAAE,CAAC;KAR/C;IACD,qBASI,EAAA,GAAK,CAAA,IAAE,CAAI,MAAC,EAAM,GAAI,UAAA,IAAc,CAAA,CAAE;IAR1C,qBASI,EAAA,GAAK,CAAA,IAAE,CAAI,MAAC,EAAM,GAAI,UAAA,IAAc,CAAA,CAAE;IAR1C,qBASI,EAAA,GAAK,CAAA,IAAE,CAAI,MAAC,EAAM,GAAI,UAAA,IAAc,CAAA,CAAE;IAR1C,qBASI,EAAA,GAAK,CAAA,IAAE,CAAI,MAAC,EAAM,GAAI,UAAA,IAAc,CAAA,CAAE;IAR1C,QACE,GAAG,CASC,EAAC,GAAI,IAAA,CAAK;QARd,GAAG,CASC,CAAC,EAAC,IAAK,CAAA,IAAK,IAAA,CAAK;QARrB,GAAG,CASC,CAAC,EAAC,IAAK,EAAA,IAAM,IAAA,CAAK;QARtB,GAAG,CASC,CAAC,EAAC,IAAK,EAAA,IAAM,IAAA,CAAK;QARtB,GAAG;QACH,GAAG,CASC,EAAC,GAAI,IAAA,CAAK;QARd,GAAG,CASC,CAAC,EAAC,IAAK,CAAA,IAAK,IAAA,CAAK;QARrB,GAAG;QACH,GAAG,CASC,CAAC,CAAC,EAAC,IAAK,EAAA,IAAM,IAAA,IAAQ,IAAA,CAAK;QAR/B,GAAG,CASC,CAAC,EAAC,IAAK,EAAA,IAAM,IAAA,CAAK;QARtB,GAAG;QACH,GAAG,CASC,CAAC,EAAC,GAAI,IAAA,IAAQ,IAAA,CAAK;QARvB,GAAG,CASC,CAAC,EAAC,IAAK,CAAA,IAAK,IAAA,CAAK;QARrB,GAAG;QACH,GAAG,CASC,CAAC,EAAC,IAAK,EAAA,IAAM,IAAA,CAAK;QARtB,GAAG,CASC,CAAC,EAAC,IAAK,EAAA,IAAM,IAAA,CAAK;QARtB,GAAG,CASC,EAAC,GAAI,IAAA,CAAK;QARd,GAAG,CASC,CAAC,EAAC,IAAK,CAAA,IAAK,IAAA,CAAK;QARrB,GAAG,CASC,CAAC,EAAC,IAAK,EAAA,IAAM,IAAA,CAAK;QARtB,GAAG,CASC,CAAC,EAAC,IAAK,EAAA,IAAM,IAAA,CAAK,EACtB;CARH,CASC;;AANF,MASM,KAAA,GAAQ,CAAA,EAAK,KATnB;IACE,OASO,EAAA,CAAG,EAAC,GAAI,GAAA,GAAM,EAAA,CAAG,IAAC,CAAI;CAR9B,CASC;AAPF,MASM,mBAAA,GAAsB,CAAA,KAAQ,EAAkB,aAAe,KATrE;IACE,KAAK,qBASI,SAAA,IAAa,KAAA,CAAM,OAAC,EAAQ;QARnC,IAAI,KASC,CAAK,OAAC,CAAO,cAAC,CAAc,SAAC,CAAS,EAAE;YAR3C,qBASI,KAAA,GAAQ,KAAA,CAAM,OAAC,CAAO,SAAC,CAAS,CAAC;YARrC,IAAI,KASC,CAAK,SAAC,EAAU;gBARnB,KAAK,qBASI,QAAA,IAAY,KAAA,CAAM,SAAC,EAAU;oBARpC,aAAa,CASC,KAAC,CAAK,QAAC,CAAQ,CAAC,GAAG,IAAA,CAAK;iBARvC;aACF;SACF;KACF;CACF,CASC;AAPF,MASM,qBAAA,GAAwB,CAAA,KAAQ,EAAkB,aAAe,KATvE;IACE,KAAK,qBASI,IAAA,IAAQ,KAAA,CAAM,IAAC,EAAK;QAR3B,IAAI,KASC,CAAK,IAAC,CAAI,cAAC,CAAc,IAAC,CAAI,EAAE;YARnC,qBASI,SAAA,GAAY,KAAA,CAAM,IAAC,CAAI,IAAC,CAAI,CAAC;YARjC,KAAK,qBASI,EAAA,IAAM,SAAA,EAAW;gBARxB,IAAI,SASC,CAAS,cAAC,CAAc,EAAC,CAAE,EAAE;oBARhC,qBASI,QAAA,GAAW,SAAA,CAAU,EAAC,CAAE,CAAC;oBAR7B,IAAI,QASC,CAAQ,KAAC,KAAS,SAAA,EAAW;wBARhC,aAAa,CASC,KAAC,CAAK,QAAC,CAAQ,CAAC,GAAG,IAAA,CAAK;qBARvC;iBACF;aACF;SACF;KACF;CACF,CASC;AAPF,MASM,4BAAA,GAA+B,CARnC,KASO,EARP,aASe,EARf,QASU,KAZZ;IAKE,qBASI,UAAY,CAAQ;IARxB,KAAK,qBASI,gBAAA,IAAoB,QAAA,CAAS,aAAC,EAAc;QARnD,IAAI,QASC,CAAQ,aAAC,CAAa,cAAC,CAAc,gBAAC,CAAgB,EAAE;YAR3D,qBASI,IAAA,GAAO,QAAA,CAAS,aAAC,CAAa,gBAAC,CAAgB,CAAC,IAAC,CAAI;YARzD,IAAI,IASC,EAAK;gBARR,qBASI,aAAA,GARF,IAAI,YASY,KAAA,GAAQ,IAAA,GAAO,CAAA,IAAE,CAAI,CAAC;gBARxC,KAAK,qBASI,YAAA,IAAgB,aAAA,EAAe;oBARtC,qBASI,aAAA,GAAgB,KAAA,CAAM,YAAC,CAAY,CAAC;oBARxC,IAAI,CASC,aAAC,CAAa,aAAC,CAAa,EAAE;;;wBANjC,UAAU,GASG,IAAA,CAAK;wBARlB,aAAa,CASC,aAAC,CAAa,GAAG,IAAA,CAAK;qBARrC;iBACF;aACF;SACF;KACF;IACD,OASO,UAAA,CAAW;CARnB,CASC;AAPF,MASM,iBAAA,GAAoB,CAAA,KAAQ,EAAkB,aAAe,KATnE;IACE,OAAO,IASC,EAAK;QARX,qBASI,UAAA,GAAa,KAAA,CAAM;QARvB,KAAK,qBASI,IAAA,IAAQ,KAAA,CAAM,IAAC,EAAK;YAR3B,IAAI,KASC,CAAK,IAAC,CAAI,cAAC,CAAc,IAAC,CAAI,EAAE;gBARnC,qBASI,SAAA,GAAY,KAAA,CAAM,IAAC,CAAI,IAAC,CAAI,CAAC;gBARjC,KAAK,qBASI,EAAA,IAAM,SAAA,EAAW;oBARxB,IAAI,SASC,CAAS,cAAC,CAAc,EAAC,CAAE,EAAE;wBARhC,qBASI,QAAA,GAAW,SAAA,CAAU,EAAC,CAAE,CAAC;wBAR7B,IAAI,aASC,CAAa,KAAC,CAAK,QAAC,CAAQ,CAAC,EAAE;;4BAPlC,UAAU;gCACR,UAAU;oCACV,4BAA4B,CASC,KAAC,EAAM,aAAA,EAAe,QAAA,CAAS,CAAC;yBARhE;qBACF;iBACF;aACF;SACF;QACD,IAAI,CASC,UAAC,EAAW;YARf,MAAM;SACP;KACF;CACF,CASC;AAPF,MASM,oBAAA,GAAuB,CAAA,KAAQ,EAAkB,aAAe,KATtE;IACE,qBASI,YAAA,GAAe,KAAA,CAAM;IARzB,qBASI,QAAA,GAAWS,SAAG,CAAS,KAAC,CAAK,CAAC;IARlC,KAAK,qBASI,IAAA,IAAQ,QAAA,CAAS,IAAC,EAAK;QAR9B,IAAI,QASC,CAAQ,IAAC,CAAI,cAAC,CAAc,IAAC,CAAI,EAAE;YARtC,qBASI,SAAA,GAAY,QAAA,CAAS,IAAC,CAAI,IAAC,CAAI,CAAC;YARpC,KAAK,qBASI,EAAA,IAAM,SAAA,EAAW;gBARxB,IAAI,SASC,CAAS,cAAC,CAAc,EAAC,CAAE,EAAE;oBARhC,qBASI,QAAA,GAAW,SAAA,CAAU,EAAC,CAAE,CAAC;oBAR7B,IAAI,CASC,aAAC,CAAa,KAAC,CAAK,QAAC,CAAQ,CAAC,EAAE;wBARnC,YAAY,GASG,IAAA,CAAK;wBARpB,OASO,SAAA,CAAU,EAAC,CAAE,CAAC;qBARtB;iBACF;aACF;YAED,IAAIT,OASG,CAAO,SAAC,CAAS,EAAE;gBARxB,OASO,QAAA,CAAS,IAAC,CAAI,IAAC,CAAI,CAAC;aAR5B;SACF;KACF;IACD,OASO,YAAA,GAAe,QAAA,GAAW,KAAA,CAAM;CARxC,CASC;AAPF,AASO,MAAM,YAAA,GAAe,CAAA,KAAQ,KATpC;IACE,qBASI,aAAA,GAAgB,EAAA,CAAG;;IANvB,mBAAmB,CASC,KAAC,EAAM,aAAA,CAAc,CAAC;;IAN1C,qBAAqB,CASC,KAAC,EAAM,aAAA,CAAc,CAAC;;IAN5C,iBAAiB,CASC,KAAC,EAAM,aAAA,CAAc,CAAC;;IANxC,OASO,oBAAA,CAAqB,KAAC,EAAM,aAAA,CAAc,CAAC;CARnD,CASC;AACF,AASO,MAAM,kBAAA,GAAqB,CARhC,gBASsC,KAVxC;;IAIE,qBASI,YAAA,GAAoB,EAAA,CAAG;IAR3B,qBASI,UAAA,GAAkB,EAAA,CAAG;IARzB,KAAK,qBASI,eAAA,IAAmB,gBAAA,EAAkB;QAR5C,qBASI,QAAA,GAAW,eAAA,CAAgB;QAR/B,qBASI,GAAA,GAAM,KAAA,CAAM,QAAC,CAAQ,CAAC;QAR1B,YAAY,CASC,GAAC,CAAG,GAAG,EAAA,CAAG;QARvB,UAAU,CASC,GAAC,CAAG,GAAG,eAAA,CAAgB;KARnC;;IAGD,KAAK,qBASI,eAAA,IAAmB,gBAAA,EAAkB;QAR5C,qBASI,QAAA,GAAW,eAAA,CAAgB;QAR/B,IAAI,QASC,CAAQ,aAAC,EAAc;YAR1B,qBASI,GAAA,GAAM,KAAA,CAAM,QAAC,CAAQ,CAAC;YAR1B,MAAM,CASC,IAAC,CAAI,QAAC,CAAQ,aAAC,CAAa,CAAC,OAAC,CAAO,gBAAC,IATnD;gBACQ,qBASI,IAAA,GAAO,QAAA,CAAS,aAAC,CAAa,gBAAC,CAAgB,CAAC,IAAC,CAAI;gBARzD,IAAI,IASC,EAAK;oBARR,qBASI,aAAA,GARF,IAAI,YASY,KAAA,GAAQ,IAAA,GAAO,CAAA,IAAE,CAAI,CAAC;oBARxC,KAAK,qBASI,YAAA,IAAgB,aAAA,EAAe;wBARtC,qBASI,aAAA,GAAgB,KAAA,CAAM,YAAC,CAAY,CAAC;wBARxC,IACE,UAAU,CASC,aAAC,CAAa;4BARzB,UAAU,CASC,aAAC,CAAa,CAAC,KAAC,KAAS,SARtC,EASE;;4BAPA,YAAY,CASC,GAAC,CAAG,CAAC,IAAC,CAAI,UAAC,CAAU,aAAC,CAAa,CAAC,CAAC;yBARnD;qBACF;iBACF;aACF,CASC,CAAC;SARJ;KACF;;IAGD,qBASI,OAAA,GAAU;QARZ,gBAAgB,EASE,gBAAA;QARlB,MAAM,EASE,gBAAA,CAAiB,MAAC;QAR1B,MAAM,EASE,IAAI,KAAA,CAAM,gBAAC,CAAgB,MAAC,CAAM;QAR1C,YAAY,EASE,YAAA;QARd,OAAO,oBASS,EAAC,CAAA;KARlB,CASC;IAPF,qBASI,CAAA,GAAI,OAAA,CAAQ,MAAC,CAAM;IARvB,OAAO,CASC,EAAC,EAAG;QARV,IAAI,CASC,OAAC,CAAO,OAAC,CAAO,CAAC,CAAC,EAAE;YARvB,YAAY,CASC,gBAAC,CAAgB,CAAC,CAAC,EAAE,CAAA,EAAG,EAAA,EAAI,OAAA,CAAQ,CAAC;SARnD;KACF;IAED,OASO,OAAA,CAAQ,MAAC,CAAM;CARvB,CASC;AAPF,MASM,YAAA,GAAe,CARnB,eASiB,EARjB,CASG,EARH,YASc,EARd,OASS,KAbX;IAME,qBASI,GAAA,GAAM,KAAA,CAAM,eAAC,CAAe,CAAC;IARjC,IAAI,YASC,CAAY,OAAC,CAAO,GAAC,CAAG,IAAI,CAAA,EAAG;QARlC,MASM,IAAI,KAAA,CARR,qBAAqB,GASG,GAAA,GAAM,QAAA,GAAW,IAAA,CAAK,SAAC,CAAS,YAAC,CAAY,CARtE,CASC;KARH;IAED,IAAI,OASC,CAAO,OAAC,CAAO,CAAC,CAAC,EAAE;QARtB,OAAO;KACR;IACD,OAAO,CASC,OAAC,CAAO,CAAC,CAAC,GAAG,IAAA,CAAK;;IAN1B,qBASI,QAAA,GAAiC,OAAA,CAAQ,YAAC,CAAY,GAAC,CAAG,CAAC;IAP/D,qBASI,KAAA,GAAQ,YAAA,CAAa,MAAC,CAAM,GAAC,CAAG,CAAC;IARrC,KAAK,qBASI,KAAA,IAAS,QAAA,EAAU;QAR1B,YAAY,CACV,KAAK,EACL,OAAO,CASC,gBAAC,CAAgB,OAAC,CAAO,KAAC,CAAK,EARvC,KAAK,EACL,OAAO,CACR,CASC;KARH;IAED,OAAO,CASC,MAAC,CAAM,EAAC,OAAE,CAAO,MAAC,CAAM,GAAG,eAAA,CAAgB;CARpD,CASC;;;;;;;;;AAAF,SAAA,oBAAA,CACE,KAA2B,EAC3B,OAA6B,EAC7B,EAAsB,EACtB,OAA6B,EAC7B,UAAmB,EALrB;IAOE,qBAEI,aAAA,GAAgB,KAAA,CAAM,EAAC,CAAE,IAAC,CAAI,CAAC,EAAC,CAAE,EAAC,CAAE,CAAC;IAD1C,IACE,aAAa,CAEC,KAAC,KAAS,SAAA;SADvB,aAEC,CAAa,KAAC,KAAS,KAAA,IAAS,UAAA,CADpC,EAEE;QADA,OAAO,CAEC,IAAC,CAAI,aAAC,CAAa,CAAC;KAD7B;IAED,KAAK,qBAEI,cAAA,IAAkB,OAAA,EAAS;QADlC,IAAI,cAEC,CAAc,MAAC,GAAQ,CAAA,EAAG;YAD7B,qBAEI,gBAAA,GAAmB,cAAA,CAAe,CAAC,CAAC,CAAC;YADzC,IACE,aAAa,CAEC,aAAC;gBADf,aAAa,CAEC,aAAC,CAAa,gBAAC,CAD/B,EAEE;gBADA,qBAEI,IAAA,GAAO,aAAA,CAAc,aAAC,CAAa,gBAAC,CAAgB,CAAC,IAAC,CAAI;gBAD9D,IAAI,IAEC,EAAK;oBADR,qBAEI,eAAA,GAAwC,EAAA,CAAG;oBAD/C,OAAO;yBACJ,MAEC,CADA,cAAc,IACZ,cAAc,CAEC,MAAC,IAAS,CAAA;wBADzB,cAAc,CAEC,CAAC,CAAC,IAAI,gBAAA,CADxB;yBACA,OAEC,CAAO,cAAC,IADR,eAAe,CAEC,IAAC,CAAI,cAAC,CAAc,KAAC,CAAK,CAAC,CAAC,CAAC,CAD9C,CAEC;oBAAJ,IAAIO,OAEG,CAAO,IAAC,CAAI,EAAE;wBADnB,qBAEI,WAAA,IAAc,IAAiC,CAAA,CAAC;wBADpD,WAAW,CAEC,OAAC,CAAO,UAAC,IADnB,oBAAoB,CAClB,KAAK,EACL,OAAO,EACP,UAAU,EACV,eAAe,EACf,UAAU,CACX,CACF,CAEC;qBADH;yBAEM;wBADL,qBAEI,UAAA,IAAa,IAAQ,CAAA,CAAmB;wBAD5C,oBAAoB,CAClB,KAAK,EACL,OAAO,EACP,UAAU,EACV,eAAe,EACf,UAAU,CACX,CAEC;qBADH;iBACF;aACF;SACF;KACF;CACF;;;;;;;;AAQD,AAAA,SAAA,iBAAA,CACE,KAA2B,EAC3B,GAA8B,EAC9B,OAAsB,EACtB,UAAoB,EAJtB;IAME,qBAJI,OAAA,GAAgC,EAAA,CAAG;IAMvC,IAAIJ,WAJG,CAAW,GAAC,CAAG,EAAE;;QAMtB,MAAM,CAJC,IAAC,CAAI,KAAC,CAAK,CAAC,OAAC,CAAO,IAAC,IAIhC;YACM,MAAM,CAJC,IAAC,CAAI,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC,OAAC,CAAO,EAAC,IAIxC;gBACQ,qBAJI,aAAA,GAAgB,KAAA,CAAM,IAAC,CAAI,CAAC,EAAC,CAAE,CAAC;gBAKpC,IACE,aAAa,CAJC,KAAC,KAAS,SAAA;qBAKvB,aAJC,CAAa,KAAC,KAAS,KAAA,IAAS,UAAA,CAKpC,EAJE;oBAKA,OAAO,CAJC,IAAC,CAAI,aAAC,CAAa,CAAC;iBAK7B;aACF,CAJC,CAAC;SAKJ,CAJC,CAAC;KAKJ;SAJM;QAKL,qBAJI,sBAAA,GAAyB,EAAA,CAAG;QAKhC,IAAI,OAJC,EAAQ;YAKX,KAAK,qBAJI,cAAA,IAAkB,OAAA,EAAS;gBAKlC,sBAAsB,CAJC,IAAC,CAAI,cAAC,CAAc,KAAC,CAAK,GAAC,CAAG,CAAC,CAAC;aAKxD;SACF;QACD,KAAK,qBAJI,EAAA,IAAM,GAAA,EAAK;YAKlB,oBAAoB,CAClB,KAAK,EACL,OAAO,EACP,EAAE,EACF,sBAAsB,EACtB,UAAU,CACX,CAJC;SAKH;QACD,OAAO,GAJGK,MAAG,CAAM,OAAC,EAAQ,UAAA,CAAU,EAI1C;YACM,OAJO,CAAA,CAAE,IAAC,GAAM,MAAA,GAAS,CAAA,CAAE,EAAC,CAAE;SAK/B,CAJC,CAAC;KAKJ;IAED,OAJO,OAAA,CAAQ;CAKhB;;ADnxCD,MAAA,kBAAA,CAAA;;;;;IAUA,WAAA,CAAY,KAAiB,EACjB,SAAW,EADvB;QAAY,IAAZ,CAAA,KAAY,GAAA,KAAA,CAAiB;QACjB,IAAZ,CAAA,SAAY,GAAA,SAAA,CAAW;QATb,IAAV,CAAA,IAAU,GAAO,IAAA,CAAK;KAWhB;;;;;IACH,OAAA,CAAA,OAAA,EAAH;QAKI,QAJmC,IAAC,CAAI,YAAC,CAAY,OAAC,EAAQ,KAAA,CAAM,EAAC;KAKtE;;;;;IAFA,QAAA,CAAA,OAAA,EAAH;QAQI,QAPoC,IAAC,CAAI,YAAC,CAAY,OAAC,EAAQ,IAAA,CAAK,EAAC;KAQtE;;;;IAIH,IATG,aAAA,GASH;QACI,IAAI,CATC,IAAC,CAAI,cAAC,EAAe;YAUxB,IAAI,CATC,KAAC;iBAUH,GATC,CAAG,IAAC,CAAI,SAAC,CAAS,oBAAC,EAAoB,CAAE;iBAU1C,SATC,CAAS,EAAC,KAAK,IAAE,CAAI,cAAC,IAAgB,EAAM,CAAA,CAAiB,CAAC,CAAC;YAWnE,IAAI,CATC,IAAC,CAAI,cAAC,EAAe;gBAUxB,MATM,IAAI,KAAA,CAAM,qCAAC,CAAqC,CAAC;aAUxD;SACF;QACD,OATO,IAAA,CAAK,cAAC,CAAc;KAU5B;;;;;;;IAAA,QAAA,CAAA,OAAA,EAAH;QAQI,qBAPI,KAAA,GAAQ,OAAA,CAAQ,KAAC,CAAK;QAQ1B,qBAPI,UAAA,GAAaL,WAAG,CAAW,OAAC,CAAO,UAAC,CAAU;cAC9C,IAAA;cACA,OAAA,CAAQ,UAAC,CAAU;QASvB,IAAI,CAPC,KAAC,CAAK,OAAC,EAAQ;YAQlB,MAPM,IAAI,KAAA,CAAM,8BAAC,CAA8B,CAAC;SAQjD;QAED,IAAI,UAPC,EAAW;YAQd,IAAI,CAPC,KAAC,CAAK,QAAC,CAAQ,IAAI,gBAAA,CAAiB,KAAC,CAAK,CAAC,CAAC;SAQlD;aAPM;YAQL,IAAI,CAPC,KAAC,CAAK,QAAC,CAAQ,IAAI,oBAAA,CAAqB,KAAC,CAAK,CAAC,CAAC;SAQtD;KACF;;;;;IALA,YAAA,CAAA,OAAA,EAAH;QAWI,IAAI,CAVC,KAAC,CAAK,QAAC,CAAQ,IAAI,qBAAA,CAAsB,OAAC,CAAO,CAAC,CAAC;KAWzD;;;;;IARA,WAAA,CAAA,OAAA,EAAH;QAcI,IAAI,CAbC,KAAC,CAAK,QAAC,CAAQ,IAAI,iBAAA,CAAkB,OAAC,CAAO,CAAC,CAAC;KAcrD;;;;;;IAXA,YAAA,CAkBC,OAAoB,EACpB,KAAc,EAnBlB;QAqBI,qBAjBI,KAAA,GAAQ,OAAA,CAAQ,KAAC,CAAK;QAkB1B,qBAjBI,UAAA,GAAaA,WAAG,CAAW,OAAC,CAAO,UAAC,CAAU;cAC9C,IAAA;cACA,OAAA,CAAQ,UAAC,CAAU;QAkBvB,qBAjBI,WAAA,GAAcA,WAAG,CAAW,OAAC,CAAO,WAAC,CAAW;cAChD,KAAA;cACA,OAAA,CAAQ,WAAC,CAAW;QAmBxB,qBAjBI,QAAU,CAAM;QAkBpB,IAAI,CAjBC,KAAC,CAAK,OAAC,EAAQ;YAkBlB,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EAjBmB,KAAI,EAiBvB,EAjB6B,OAAA,EAAS,IAAA,CAAK,IAAC,EAAI,EAiBhD,CAjBkD,CAAE;SAkB/C;aAjBM;YAkBL,QAAQ,GAjBG,KAAA,CAAM;SAkBlB;QAED,IAAI,CAjBC,QAAC,CAAQ,EAAE,KAAA,EAAO,QAAA,EAAU,UAAA,EAAW,CAAE,CAAC;QAmB/C,qBAjBI,YAAqC,CAAC;QAkB1C,IAAI,KAjBC,EAAM;YAkBT,YAAY,GAjBG,IAAA,CAAK,iBAAC,CAAiB,QAAC,CAAQ,OAAC,EAAQ,WAAA,CAAY,CAAC;SAkBtE;aAjBM;YAkBL,YAAY,GAjBG,IAAA,CAAK,gBAAC,CAAgB,QAAC,CAAQ,OAAC,EAAQ,WAAA,CAAY,CAAC;SAkBrE;QAED,QAjBgC,YAAC,CAAY,OAAC,CAAO,MAkBnD,IAAI,CAjBC,WAAC,CAAW,QAAC,CAAQ,OAAC,CAAO,CAkBlC,EAjBA;KAkBH;;;;IAfA,IAAA,GAAH;QAoBI,OAnBO,IAAA,EAAK,CAAE;KAoBf;;;;;;;;IAXA,4BAAA,CAAA,UAAA,EAAH;QAoBI,qBAnBI,QAAA,GAAW,IAAA,CAAK,aAAC,CAAa;QAoBlC,IACE,QAAQ,CAnBC,IAAC,CAAI,UAAC,CAAU,IAAC,CAAI;YAoB9B,QAAQ,CAnBC,IAAC,CAAI,UAAC,CAAU,IAAC,CAAI,CAAC,UAAC,CAAU,EAAC,CAoB7C,EAnBE;YAoBA,OAnBO,QAAA,CAAS,IAAC,CAAI,UAAC,CAAU,IAAC,CAAI,CAAC,UAAC,CAAU,EAAC,CAAE,CAAC,iBAAC,CAAiB;SAoBxE;QACD,OAnBO,IAAA,CAAK;KAoBb;;;;;;;;IAXA,mBAAA,CAAA,UAAA,EAAH;QAoBI,qBAnBI,QAAA,GAAW,IAAA,CAAK,aAAC,CAAa;QAoBlC,IACE,QAAQ,CAnBC,IAAC,CAAI,UAAC,CAAU,IAAC,CAAI;YAoB9B,QAAQ,CAnBC,IAAC,CAAI,UAAC,CAAU,IAAC,CAAI,CAAC,UAAC,CAAU,EAAC,CAoB7C,EAnBE;YAoBA,OAnBO,QAAA,CAAS,IAAC,CAAI,UAAC,CAAU,IAAC,CAAI,CAAC,UAAC,CAAU,EAAC,CAAE,CAAC;SAoBtD;QACD,OAnBO,IAAA,CAAK;KAoBb;;;;;;;;IAXA,iBAAA,CAoBC,OAAe,EACf,WAAW,GAAG,KAAK,EArBvB;QAuBI,qBAnBI,YAAA,GAAe,IAAA,CAAK,KAAC;aAoBtB,GAnBC,CAAG,IAAC,CAAI,SAAC,CAAS,oBAAC,EAAoB,CAAE;aAoB1C,GAnBC,CAAG,IAAC,CAAI,SAAC,CAAS,eAAC,CAAe,OAAC,EAAQ,WAAA,CAAY,CAAC,CAAC;QAoB7D,OAnBO,YAAA,CAAa;KAoBrB;;;;;;;;IAXA,gBAAA,CAoBC,OAAe,EACf,WAAW,GAAG,KAAK,EArBvB;QAuBI,qBAnBI,YAAA,GAAe,IAAA,CAAK,KAAC;aAoBtB,GAnBC,CAAG,IAAC,CAAI,SAAC,CAAS,oBAAC,EAAoB,CAAE;aAoB1C,GAnBC,CAAG,IAAC,CAAI,SAAC,CAAS,aAAC,CAAa,OAAC,EAAQ,WAAA,CAAY,CAAC,CAAC;QAoB3D,QAnBO,YAA0C,EAAC;KAoBnD;;;;;IAbA,mBAAA,CAmBC,UAA8B,EAnBlC;QAqBI,OAlBO,IAAA,CAAK,KAAC;aAmBV,GAlBC,CAAG,IAAC,CAAI,SAAC,CAAS,oBAAC,EAAoB,CAAE;aAmB1C,GAlBC,CAAG,IAAC,CAAI,SAAC,CAAS,iBAAC,CAAiB,UAAC,CAAU,CAAC,CAAC;KAmBtD;;;;;IAhBA,mBAAA,CAsBC,cAAuE,EAtB3E;QAwBI,QAnBgC,cAAC,CAAc,aAAC,CAsB9C,IAAI,CArBC,KAAC;aAsBH,GArBC,CAAG,IAAC,CAAI,SAAC,CAAS,oBAAC,EAAoB,CAAE;aAsB1C,GArBC,CAAG,IAAC,CAAI,SAAC,CAAS,aAAC,EAAa,CAAE,EAsBtC,CACE,aArB6C,EAsB7C,SArBW,KAkBnB;YAKQ,IAAII,OArBG,CAAO,aAAC,CAAa,EAAE;gBAsB5B,OArBO,yBAAA,mBAsBL,aArBqC,GAsBrC,SAAS,CACV,CArBC;aAsBH;iBArBM;gBAsBL,qBArBI,QAAA,IAAW,aAAiB,CAAA,CAAc;gBAsB9C,QArBO,wBAAA,CAAyB,QAAC,EAAS,SAAA,CAAc,EAAc;aAsBvE;SACF,CACD,EArBA;KAsBH;;;;;;IAnBA,mBAAA,CAAA,IAAA,EAAA,YAAA,EAAH;QA0BI,qBAzBI,aAAA,IAAgBD,GAAG,CA0BrB,IAAI,CAzBC,SAAC,CAAS,MAAC,EA0BhB,+BAA+B,CAxB5B,CAAA,CAAO;QA0BZ,OAzBO,mBAAA,CA0BL,IAAI,EACJ,YAAY,EACZ,IAAI,CAzBC,SAAC,CAAS,MAAC,CAAM,mBAAC,EA0BvB,aAAa,CACd,CAzBC;KA0BH;;;;;;IAvBA,oBAAA,CAAA,IAAA,EAAA,aAAA,EAAH;QA8BI,qBA7BI,aAAA,IAAgBA,GAAG,CA8BrB,IAAI,CA7BC,SAAC,CAAS,MAAC,EA8BhB,+BAA+B,CA5B5B,CAAA,CAAO;QA8BZ,OA7BO,oBAAA,CA8BL,IAAI,EACJ,aAAa,EACb,IAAI,CA7BC,SAAC,CAAS,MAAC,CAAM,mBAAC,EA8BvB,aAAa,CACd,CA7BC;KA8BH;;;;;;;;IArBA,aAAA,CAAA,OAAA,EAAH;QA8BI,qBA7BI,QAAA,GAAW,OAAA,CAAQ,QAAC,CAAQ;QA8BhC,qBA7BI,QAAA,GAAWH,WAAG,CAAW,OAAC,CAAO,QAAC,CAAQ,GAAG,KAAA,GAAQ,OAAA,CAAQ,QAAC,CAAQ;QA+B1E,IAAI,QA7BC,EAAS;YA8BZ,IAAI,CA7BC,KAAC,CAAK,QAAC,CAAQ,IAAI,kBAAA,CAAmB,QAAC,CAAQ,CAAC,CAAC;SA8BvD;aA7BM;YA8BL,IAAI,CA7BC,KAAC,CAAK,QAAC,CAAQ,IAAI,wBAAA,CAAyB,QAAC,CAAQ,CAAC,CAAC;SA8B7D;KACF;;;;;;;;IArBA,WAAA,CAAA,OAAA,EAAH;QA8BI,qBA7BI,QAAA,GAAW,OAAA,CAAQ,QAAC,CAAQ;QA8BhC,IAAI,CA7BC,KAAC,CAAK,QAAC,CAAQ,IAAI,sBAAA,CAAuB,QAAC,CAAQ,CAAC,CAAC;KA8B3D;;;;;;;;;IApBA,YAAA,CAAA,OAAA,EAAH;QA8BI,qBA7BI,QAAA,GAAW,OAAA,CAAQ,QAAC,CAAQ;QA8BhC,qBA7BI,QAAA,GAAWA,WAAG,CAAW,OAAC,CAAO,QAAC,CAAQ,GAAG,KAAA,GAAQ,OAAA,CAAQ,QAAC,CAAQ;QA+B1E,IAAI,QA7BC,EAAS;YA8BZ,IAAI,CA7BC,KAAC,CAAK,QAAC,CAAQ,IAAI,iBAAA,CAAkB,QAAC,CAAQ,CAAC,CAAC;SA8BtD;aA7BM;YA8BL,IAAI,CA7BC,KAAC,CAAK,QAAC,CAAQ,IAAI,uBAAA,CAAwB,QAAC,CAAQ,CAAC,CAAC;SA8B5D;KACF;;;;;;;IAtBA,cAAA,CAAA,OAAA,EAAH;QA8BI,qBA7BI,UAAA,GAAa,OAAA,CAAQ,UAAC,CAAU;QA8BpC,qBA7BI,QAAA,GAAWA,WAAG,CAAW,OAAC,CAAO,QAAC,CAAQ,GAAG,KAAA,GAAQ,OAAA,CAAQ,QAAC,CAAQ;QA+B1E,IAAI,QA7BC,EAAS;YA8BZ,IAAI,CA7BC,KAAC,CAAK,QAAC,CAAQ,IAAI,mBAAA,CAAoB,UAAC,CAAU,CAAC,CAAC;SA8B1D;aA7BM;YA8BL,IAAI,CA7BC,KAAC,CAAK,QAAC,CAAQ,IAAI,yBAAA,CAA0B,UAAC,CAAU,CAAC,CAAC;SA8BhE;KACF;;;;;IAxBA,KAAA,GAAH;QA8BI,IAAI,CA7BC,KAAC,CAAK,QAAC,CAAQ,IAAI,kBAAA,CAAmB,EAAC,CAAE,CAAC,CAAC;KA8BjD;;;;;IAxBA,KAAA,GAAH;QA8BI,IAAI,CA7BC,KAAC,CAAK,QAAC,CAAQ,IAAI,gBAAA,EAAiB,CAAE,CAAC;KA8B7C;;;;;IAxBA,OAAA,GAAH;QA8BI,IAAI,CA7BC,KAAC,CAAK,QAAC,CAAQ,IAAI,kBAAA,EAAmB,CAAE,CAAC;KA8B/C;;;;;;;IAtBA,iBAAA,CA8BC,EAAsB,EACtB,MAA4B,EA/BhC;QAiCI,IAAI,CA7BC,KAAC,CAAK,QAAC,CA8BV,IA7BI,+BAAA,CAAgC;YA8BlC,UAAU,EA7BE,EAAA;YA8BZ,MAAM,EA7BE,MAAA;YA8BR,gBAAgB,EA7BE,KAAA;SA8BnB,CA7BC,CA8BH,CA7BC;KA8BH;;;;;;;IAtBA,oBAAA,CA8BC,EAAsB,EACtB,MAA4B,EA/BhC;QAiCI,IAAI,CA7BC,KAAC,CAAK,QAAC,CA8BV,IA7BI,+BAAA,CAAgC;YA8BlC,UAAU,EA7BE,EAAA;YA8BZ,MAAM,EA7BE,MAAA;YA8BR,gBAAgB,EA7BE,QAAA;SA8BnB,CA7BC,CA8BH,CA7BC;KA8BH;;;;;;;IAtBA,iBAAA,CA8BC,EAAsB,EACtB,MAA4B,EA/BhC;QAiCI,IAAI,CA7BC,KAAC,CAAK,QAAC,CA8BV,IA7BI,+BAAA,CAAgC;YA8BlC,UAAU,EA7BE,EAAA;YA8BZ,MAAM,EA7BE,MAAA;YA8BR,gBAAgB,EA7BE,KAAA;SA8BnB,CA7BC,CA8BH,CA7BC;KA8BH;CACF;;AD9dD,MAAA,uBAAA,CAAA;;;;IAIA,WAAA,CADsB,OAAS,EAC/B;QADsB,IAAtB,CAAA,OAAsB,GAAA,OAAA,CAAS;KAAmB;;;;;IAMlD,SAJG,CAAA,EAAA,EAIH;QACI,OAJO,IAAA,CAAK,OAAC,CAAO,mBAAC,CAAmB,EAAC,CAAE,CAAC;KAK7C;;AAHI,uBAAP,CAAA,UAAO,GAAoC;IAK3C,EAJE,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,CAAA,EAAG,IAAA,EAAM,uBAAA,EAAwB,EAAE,EAAG;CAKzD,CAJC;;;;AAED,uBAAD,CAAA,cAAC,GAAA,MAAA;IAOD,EAAC,IAAI,EAAE,kBAAkB,GAAG;CAC3B,CAAC;AAGF,AAYA,MAAA,4BAAA,CAAA;;;;IAIA,WAAA,CApBsB,OAAS,EAoB/B;QApBsB,IAAtB,CAAA,OAAsB,GAAA,OAAA,CAAS;KAAmB;;;;;IAyBlD,SAvBG,CAwBC,GAA4D,EADhE;QAGI,OAvBO,IAAA,CAAK,OAAC,CAAO,mBAAC,CAAmB,GAAC,CAAG,CAAC;KAwB9C;;AAtBI,4BAAP,CAAA,UAAO,GAAoC;IAwB3C,EAvBE,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,CAAA,EAAG,IAAA,EAAM,0BAAA,EAA2B,EAAE,EAAG;CAwB5D,CAvBC;;;;AAED,4BAAD,CAAA,cAAC,GAAA,MAAA;IA0BD,EAAC,IAAI,EAAE,kBAAkB,GAAG;CAC3B,CAAC;AAGF,AAYA,MAAA,wBAAA,CAAA;;;;IAIA,WAAA,CAvCsB,OAAS,EAuC/B;QAvCsB,IAAtB,CAAA,OAAsB,GAAA,OAAA,CAAS;KAAmB;;;;;;IA6ClD,SA3CG,CAAA,IAAA,EAAA,aAAA,EA2CH;QACI,OA3CO,IAAA,CAAK,OAAC,CAAO,oBAAC,CAAoB,IAAC,EAAK,aAAA,CAAc,CAAC;KA4C/D;;AA1CI,wBAAP,CAAA,UAAO,GAAoC;IA4C3C,EA3CE,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,CAAA,EAAG,IAAA,EAAM,sBAAA,EAAuB,EAAE,EAAG;CA4CxD,CA3CC;;;;AAED,wBAAD,CAAA,cAAC,GAAA,MAAA;IA8CD,EAAC,IAAI,EAAE,kBAAkB,GAAG;CAC3B,CAAC;;;;;;;;;;;ADpGF,AAkCA,MAAA,WAAA,CAAA;;;;;IAWA,WAAA,CAFsB,IAAM,EAAmB,MAAQ,EAEvD;QAFsB,IAAtB,CAAA,IAAsB,GAAA,IAAA,CAAM;QAAmB,IAA/C,CAAA,MAA+C,GAAA,MAAA,CAAQ;QAP9C,IAAT,CAAA,OAAS,GAAuB,IAAI,WAAA,CAAY;YAA5C,cAAc,EACE,0BAAA;YAAhB,MAAM,EACE,0BAAA;SAAT,CACC,CAAC;QAEI,IAAT,CAAA,WAAS,GAAc,IAAA,CAAK,MAAC,CAAM,mBAAC,CAAmB;KAEkB;;;;;;IAEtE,UAAA,CAAA,KAAA,EAAA,SAAA,EAAH;QAQI,QAAQ,SAPC;YAQP,KAPK,KAAA,EAAO;gBAQV,IAAI,KAPC,CAAK,IAAC,IAAO,KAAA,CAAM,EAAC,EAAG;oBAQ1B,OAPO,IAAA,CAAK,cAAC,CAAc,KAAC,CAAK,IAAC,EAAK,KAAA,CAAM,EAAC,CAAE,CAAC;iBAQlD;qBAPM,IAAA,KAAK,CAAK,IAAC,EAAK;oBAQrB,OAPO,IAAA,CAAK,gBAAC,CAAgB,KAAC,CAAK,IAAC,CAAI,CAAC;iBAQ1C;aACF;YACD,KAPK,QAAA,EAAU;gBAQb,IAAI,KAPC,CAAK,IAAC,IAAO,KAAA,CAAM,EAAC,EAAG;oBAQ1B,OAPO,IAAA,CAAK,cAAC,CAAc,KAAC,CAAK,IAAC,EAAK,KAAA,CAAM,EAAC,CAAE,CAAC;iBAQlD;aACF;YACD,KAPK,OAAA,EAAS;gBAQZ,IAAI,KAPC,CAAK,IAAC,IAAO,KAAA,CAAM,EAAC,EAAG;oBAQ1B,OAPO,IAAA,CAAK,cAAC,CAAc,KAAC,CAAK,IAAC,EAAK,KAAA,CAAM,EAAC,CAAE,CAAC;iBAQlD;aACF;YACD,KAPK,MAAA,EAAQ;gBAQX,OAPO,IAAA,CAAK,gBAAC,CAAgB,KAAC,CAAK,IAAC,CAAI,CAAC;aAQ1C;SACF;KACF;;;;;IALA,iBAAA,CAAA,IAAA,EAAH;;QAYI,qBAVI,UAAA,GAAaE,IAAG,CAAI,IAAC,CAAI,WAAC,EAAY,EAAE,IAAA,EAAM,IAAA,EAAK,CAAE,CAAC;QAW1D,IAAI,UAVC,EAAW;YAWd,OAVO,CAUb,EAVa,UAAI,CAAU,cAAC,CAU5B,CAV0C,CAAE;SAWvC;aAVM;YAWL,OAVO,IAAA,CAAK;SAWb;KACF;;;;;IARA,gBAAA,CAAA,IAAA,EAAH;QAcI,qBAbI,cAAA,GAAiB,IAAA,CAAK,iBAAC,CAAiB,IAAC,CAAI,CAAC;QAclD,OAbO,CAaX,EAbW,IAAI,CAAI,MAAC,CAAM,MAAC,CAa3B,CAAA,EAbiC,cAAI,CAarC,CAbmD,CAAE;KAclD;;;;;;IAXA,eAAA,CAAA,IAAA,EAAA,EAAA,EAAH;QAkBI,qBAjBI,cAAA,GAAiB,IAAA,CAAK,iBAAC,CAAiB,IAAC,CAAI,CAAC;QAkBlD,OAjBO,CAiBX,EAjBW,cAAI,CAiBf,CAAA,EAjB6B,kBAAI,CAAkB,EAAC,CAAE,CAiBtD,CAjBuD,CAAE;KAkBtD;;;;;;IAfA,cAAA,CAAA,IAAA,EAAA,EAAA,EAAH;QAsBI,qBArBI,YAAA,GAAe,IAAA,CAAK,eAAC,CAAe,IAAC,EAAK,EAAA,CAAG,CAAC;QAsBlD,OArBO,CAqBX,EArBW,IAAI,CAAI,MAAC,CAAM,MAAC,CAqB3B,CAAA,EArBiC,YAAI,CAqBrC,CArBiD,CAAE;KAsBhD;;;;;IAnBA,IAAA,CAAA,KAAA,EAAH;QAyBI,qBAxBI,4BAAA,GAA+B,2BAAA,CAA4B;QAyB/D,qBAxBI,6BAAA,GAAgC,4BAAA,CAA6B;QAyBjE,qBAxBI,0BAAA,GAA6B,yBAAA,CAA0B;QAyB3D,qBAxBI,2BAAA,GAA8B,0BAAA,CAA2B;QAyB7D,qBAxBI,oBAAA,GAAuB,mBAAA,CAAoB;QA0B/C,IAAI,IAxBC,CAAI,MAAC,CAAM,cAAC,CAAc,YAAC,CAAY,EAAE;YAyB5C,qBAxBI,UAAA,GAAa,IAAA,CAAK,MAAC,CAAM,UAAC,CAAU;YA0BxC,IAAI,UAxBC,CAAU,2BAAC,EAA4B;gBAyB1C,4BAA4B,GAxBG,UAAA,CAAW,2BAAC,CAA2B;aAyBvE;YACD,IAAI,UAxBC,CAAU,4BAAC,EAA6B;gBAyB3C,6BAA6B,GAxBG,UAAA,CAAW,4BAAC,CAA4B;aAyBzE;YACD,IAAI,UAxBC,CAAU,yBAAC,EAA0B;gBAyBxC,0BAA0B,GAxBG,UAAA,CAAW,yBAAC,CAAyB;aAyBnE;YACD,IAAI,UAxBC,CAAU,0BAAC,EAA2B;gBAyBzC,2BAA2B,GAxBG,UAAA,CAAW,0BAAC,CAA0B;aAyBrE;YACD,IAAI,UAxBC,CAAU,mBAAC,EAAoB;gBAyBlC,oBAAoB,GAxBG,UAAA,CAAW,mBAAC,CAAmB;aAyBvD;SACF;QAED,qBAxBI,WAAA,GAAc,EAAA,CAAG;QAyBrB,qBAxBI,aAAA,GAAgB,EAAA,CAAG;QAyBvB,qBAxBI,eAAA,GAAkB,EAAA,CAAG;QAyBzB,qBAxBI,aAAA,GAAgB,EAAA,CAAG;QAyBvB,qBAxBI,YAAA,GAAe,EAAA,CAAG;QAyBtB,qBAxBI,YAAA,GAAe,EAAA,CAAG;QAyBtB,qBAxBI,WAAA,GAAc,EAAA,CAAG;QA0BrB,IAAI,OAxBO,KAAA,KAAU,SAAA,EAAW;YAyB9B,OAxBO,UAAA,CAAW,KAAC,CAAK,iBAAC,CAAiB,CAAC;SAyB5C;QAED,IAAI,KAxBC,CAAK,cAAC,CAAc,QAAC,CAAQ,IAAI,CAAAL,OAAI,CAAO,KAAC,CAAK,MAAC,CAAM,EAAE;YAyB9D,IAAII,KAxBG,CAAK,KAAC,CAAK,MAAC,EAAO,SAAA,CAAU,EAAE;gBAyBpC,aAAa,GAxBG,4BAAA,CAA6B,KAAC,CAAK,MAAC,CAAM,OAAC,CAAO,CAAC;aAyBpE;YACD,IAAIA,KAxBG,CAAK,KAAC,CAAK,MAAC,EAAO,WAAA,CAAY,EAAE;gBAyBtC,eAAe,GAxBG,6BAAA,CAA8B,KAAC,CAAK,MAAC,CAAM,SAAC,CAAS,CAAC;aAyBzE;YACD,IAAIA,KAxBG,CAAK,KAAC,CAAK,MAAC,EAAO,SAAA,CAAU,EAAE;gBAyBpC,aAAa,GAxBG,2BAAA,CAA4B,KAAC,CAAK,MAAC,CAAM,OAAC,CAAO,CAAC;aAyBnE;YACD,IAAIA,KAxBG,CAAK,KAAC,CAAK,MAAC,EAAO,QAAA,CAAS,EAAE;gBAyBnC,YAAY,GAxBG,0BAAA,CAA2B,KAAC,CAAK,MAAC,CAAM,MAAC,CAAM,CAAC;aAyBhE;YACD,IAAIA,KAxBG,CAAK,KAAC,CAAK,MAAC,EAAO,OAAA,CAAQ,EAAE;gBAyBlC,WAAW,GAxBG,cAAA,GAAiB,KAAA,CAAM,MAAC,CAAM,KAAC,CAAK;aAyBnD;YACD,IAAIA,KAxBG,CAAK,KAAC,CAAK,MAAC,EAAO,QAAA,CAAS,EAAE;gBAyBnC,YAAY,GAxBG,eAAA,GAAkB,KAAA,CAAM,MAAC,CAAM,MAAC,CAAM;aAyBtD;SACF;QACD,WAAW,GAxBG,oBAAA,CAyBZ,aAAa,EACb,eAAe,EACf,aAAa,EACb,YAAY,EACZ,YAAY,EACZ,WAAW,CACZ,CAxBC;QA0BF,qBAxBI,cAAA,GAAiB;YAyBnB,MAAM,EAxBE,KAAA;YAyBR,GAAG,EAxBE,IAAA,CAAK,UAAC,CAAU,KAAC,EAAM,KAAA,CAAM,GAAG,WAAA;SAyBtC,CAxBC;QA0BF,OAxBO,IAAA,CAAK,OAAC,CAAO,cAAC,CAAc,CAAC;KAyBrC;;;;;;IAtBA,MAAA,CAAA,KAAA,EAAA,QAAA,EAAH;QA6BI,IAAI,OA5BO,KAAA,KAAU,SAAA,EAAW;YA6B9B,OA5BO,UAAA,CAAW,KAAC,CAAK,iBAAC,CAAiB,CAAC;SA6B5C;QAED,IAAI,OA5BO,QAAA,KAAa,SAAA,EAAW;YA6BjC,OA5BO,UAAA,CAAW,KAAC,CAAK,gBAAC,CAAgB,CAAC;SA6B3C;QAED,qBA5BI,cAAA,GAAiB;YA6BnB,MAAM,EA5BE,MAAA;YA6BR,GAAG,EA5BE,IAAA,CAAK,UAAC,CAAU,KAAC,EAAM,MAAA,CAAO;YA6BnC,IAAI,EA5BE,IAAA,CAAK,SAAC,CAAS,EAAE,IAAA,EAAM,QAAA,CAAS,IAAC,EAAI,CAAE;SA6B9C,CA5BC;QA8BF,OA5BO,IAAA,CAAK,OAAC,CAAO,cAAC,CAAc,CAAC;KA6BrC;;;;;;IA1BA,MAAA,CAAA,KAAA,EAAA,QAAA,EAAH;QAiCI,IAAI,OAhCO,KAAA,KAAU,SAAA,EAAW;YAiC9B,OAhCO,UAAA,CAAW,KAAC,CAAK,iBAAC,CAAiB,CAAC;SAiC5C;QAED,IAAI,OAhCO,QAAA,KAAa,SAAA,EAAW;YAiCjC,OAhCO,UAAA,CAAW,KAAC,CAAK,gBAAC,CAAgB,CAAC;SAiC3C;QACD,qBAhCI,cAAA,GAAiB;YAiCnB,MAAM,EAhCE,OAAA;YAiCR,GAAG,EAhCE,IAAA,CAAK,UAAC,CAAU,KAAC,EAAM,OAAA,CAAQ;YAiCpC,IAAI,EAhCE,IAAA,CAAK,SAAC,CAAS,EAAE,IAAA,EAAM,QAAA,CAAS,IAAC,EAAI,CAAE;SAiC9C,CAhCC;QAkCF,OAhCO,IAAA,CAAK,OAAC,CAAO,cAAC,CAAc,CAAC;KAiCrC;;;;;IA9BA,MAAA,CAAA,KAAA,EAAH;QAoCI,IAAI,OAnCO,KAAA,KAAU,SAAA,EAAW;YAoC9B,OAnCO,UAAA,CAAW,KAAC,CAAK,iBAAC,CAAiB,CAAC;SAoC5C;QAED,qBAnCI,cAAA,GAAiB;YAoCnB,MAAM,EAnCE,QAAA;YAoCR,GAAG,EAnCE,IAAA,CAAK,UAAC,CAAU,KAAC,EAAM,QAAA,CAAS;SAoCtC,CAnCC;QAqCF,OAnCO,IAAA,CAAK,OAAC,CAAO,cAAC,CAAc,CAAC;KAoCrC;;;;;IAjCA,OAAA,CAAA,cAAA,EAAH;QAuCI,qBAtCI,OAAyB,CAAC;QAuC9B,qBAtCI,iBAAA,GAsCR,MAAA,CAAA,MAAA,CAAA,EAAA,EACS,cAtCC,EAqCV,EAEM,OAAO,EAtCE,IAAA,CAAK,OAAC,EAuCf,OAAO,EAtCE,UAAA,EAmCf,CAIK,CAtCC;QAwCF,IAAI,cAtCC,CAAc,MAAC,KAAU,KAAA,EAAO;YAuCnC,IAtCI,EAAE,MAAA,EAAQ,GAAA,EAsCpB,GAtCqC,iBAAA,EAAZ,IAsCzB,GAAA,MAAA,CAAA,iBAAA,EAAA,CAAA,QAAA,EAAA,KAAA,CAAA,CAtCqC,CAAkB;YAuCjD,OAtCO,IAAA,CAAK,IAAC,CAAI,GAAC,CAAG,GAAC,EAAI,IAAA,CAAK,CAAC;SAuCjC;aAtCM,IAAA,cAAK,CAAc,MAAC,KAAU,MAAA,EAAQ;YAuC3C,IAtCI,EAAE,MAAA,EAAQ,GAAA,EAAK,IAAA,EAsCzB,GAtC2C,iBAAA,EAAZ,IAsC/B,GAAA,MAAA,CAAA,iBAAA,EAAA,CAAA,QAAA,EAAA,KAAA,EAAA,MAAA,CAAA,CAtC2C,CAAkB;YAuCvD,OAtCO,IAAA,CAAK,IAAC,CAAI,IAAC,CAAI,GAAC,EAAI,IAAA,EAAM,IAAA,CAAK,CAAC;SAuCxC;aAtCM,IAAA,cAAK,CAAc,MAAC,KAAU,OAAA,EAAS;YAuC5C,IAtCI,EAAE,MAAA,EAAQ,GAAA,EAAK,IAAA,EAsCzB,GAtC2C,iBAAA,EAAZ,IAsC/B,GAAA,MAAA,CAAA,iBAAA,EAAA,CAAA,QAAA,EAAA,KAAA,EAAA,MAAA,CAAA,CAtC2C,CAAkB;YAuCvD,OAtCO,IAAA,CAAK,IAAC,CAAI,KAAC,CAAK,GAAC,EAAI,IAAA,EAAM,IAAA,CAAK,CAAC;SAuCzC;aAtCM,IAAA,cAAK,CAAc,MAAC,KAAU,QAAA,EAAU;YAuC7C,IAtCI,EAAE,MAAA,EAAQ,GAAA,EAsCpB,GAtCqC,iBAAA,EAAZ,IAsCzB,GAAA,MAAA,CAAA,iBAAA,EAAA,CAAA,QAAA,EAAA,KAAA,CAAA,CAtCqC,CAAkB;YAuCjD,OAtCO,IAAA,CAAK,IAAC,CAAI,MAAC,CAAM,GAAC,EAAI,IAAA,CAAK,CAAC;SAuCpC;KACF;CACF;;ADhPD,MAAA,oBAAA,CAAA;;;;IAIA,WAAA,CAFqB,MAAQ,EAE7B;QAFqB,IAArB,CAAA,MAAqB,GAAA,MAAA,CAAQ;KAAkB;;;;IAE5C,oBAAA,GAAH;QAOI,OAJO,CAAA,MAAmB,KAI9B;;YAEM,OAJO,MAAA;iBAKJ,MAJC,CAAM,aAAC,CAAa;iBAKrB,GAJC,CAAG,EAAC,KAAK,EAAE,GAAI,EAAA,CAAG,KAAC,CAAK,GAAG,SAAA,CAAU,CAAC,CAAC;SAK5C,CAJC;KAKH;;;;IAFA,aAAA,GAAH;QASI,OANO,CAOL,MAN+B,KAKrC;YAGM,OANO,MAAA,CAAO,MAAC,CAAM,MAAC,CAAM,CAAC;SAO9B,CANC;KAOH;;;;;IAJA,uBAAA,CAAA,IAAA,EAAH;QAUI,OATO,CAAA,MAAqC,KAShD;YACM,OATO,MAAA;iBAUJ,GATC,CAAG,IAAC,CAAI,aAAC,EAAa,CAAE;iBAUzB,GATC,CAAG,SAAC,KAAY,SAAE,GAAW,SAAA,CAAU,IAAC,CAAI,GAAG,SAAA,CAAU,CAAC,CAAC;SAUhE,CATC;KAUH;;;;;IAPA,WAAA,CAAA,KAAA,EAAH;QAaI,OAZO,CAAA,MAAqC,KAYhD;YACM,qBAZI,SAA0B,CAAC;YAa/B,IAAI,CAZC,KAAC,CAAK,IAAC,EAAK;gBAaf,OAZO,MAAA,CAAO,GAAC,CAAG,MAAM,UAAA,CAAW,KAAC,CAAK,eAAC,CAAe,CAAC,CAAC;aAa5D;iBAZM,IAAA,KAAK,CAAK,IAAC,IAAO,KAAA,CAAM,EAAC,EAAG;gBAajC,SAAS,GAZG,MAAA,CAAO,GAAC,CAalB,IAAI,CAZC,iBAAC,CAAiB,EAAE,IAAA,EAAM,KAAA,CAAM,IAAC,EAAK,EAAA,EAAI,KAAA,CAAM,EAAC,EAAE,CAAE,CAa3D,CAZC;aAaH;iBAZM;gBAaL,SAAS,GAZG,MAAA;qBAaT,GAZC,CAAG,IAAC,CAAI,uBAAC,CAAuB,KAAC,CAAK,IAAC,CAAI,CAAC;qBAa7C,aAZC,CAaA,MAAM,CAZC,GAAC,CAAG,IAAC,CAAI,aAAC,EAAa,CAAE,EAahC,CACE,SAZW,EAaX,SAZW,KAcX,eAAe,CACb,SAAS,EACT,SAAS,EACT,KAAK,EACL,IAAI,CAZC,MAAC,CAAM,mBAAC,EAab,IAAI,CAZC,MAAC,CAAM,eAAC,CAad,CACJ,CAZC;aAaL;YACD,OAZO,SAAA,CAAU,oBAAC,EAAoB,CAAE;SAazC,CAZC;KAaH;;;;IAVA,gBAAA,GAAH;QAeI,OAdO,CAAA,MAAgC,KAc3C;YACM,OAdO,MAAA,CAAO,MAAC,CAAM,SAAC,CAAS,CAAC;SAejC,CAdC;KAeH;;;;;IAZA,iBAAA,CAAA,OAAA,EAAH;QAkBI,OAjBO,CAAA,MAAqC,KAiBhD;YACM,OAjBO,MAAA;iBAkBJ,GAjBC,CAAG,IAAC,CAAI,gBAAC,EAAgB,CAAE;iBAkB5B,GAjBC,CAAG,EAAC,KAAK,EAAE,GAAI,EAAA,CAAG,OAAC,CAAO,GAAG,SAAA,CAAU,CAAC,CAAC;SAkB9C,CAjBC;KAkBH;;;;;IAfA,iBAAA,CAAA,UAAA,EAAH;QAqBI,OApBO,CAAA,MAAqC,KAoBhD;YACM,OApBO,MAAA;iBAqBJ,GApBC,CAAG,IAAC,CAAI,uBAAC,CAAuB,UAAC,CAAU,IAAC,CAAI,CAAC;iBAqBlD,GApBC,CAqBA,SAAS,MACN,SApBC,GAAW,SAAA,CAAU,UAAC,CAAU,EAAC,CAAE,GAAG,SAAA,EAAc,CAqBzD,CApBC;SAqBL,CApBC;KAqBH;;;;;;IAlBA,eAAA,CAAA,OAAA,EAAA,WAAA,EAAH;QAyBI,OAxBO,CAAA,MAAqC,KAwBhD;YACM,OAxBO,MAAA,CAAO,GAAC,CAAG,KAAC,IAwBzB;gBACQ,qBAxBI,UAAA,GAAa,KAAA,CAAM,OAAC,CAAO,OAAC,CAAO,CAAC;gBAyBxC,IAAI,CAxBC,UAAC,EAAW;oBAyBf,OAxBO,SAAA,CAAU;iBAyBlB;gBAED,IAAIJ,OAxBG,CAAO,UAAC,CAAU,SAAC,CAAS,EAAE;oBAyBnC,qBAxBI,WAAA,GAwBd,MAAA,CAAA,MAAA,CAAA,EAAA,EACe,UAxBC,EAuBhB,EAEY,IAAI,EAxBEG,WAAG,CAAW,UAAC,CAAU,SAAC,CAAS,GAAG,SAAA,GAAY,EAAA,EAsBpE,CAGW,CAxBC;oBAyBF,OAxBO,WAAA,CAAY;iBAyBpB;qBAxBM;oBAyBL,qBAxBI,OAAA,GAAU,UAAA,CAAW,SAAC,CAAS,GAAC,CAyBlC,EAAE,KAxBI,KAAE,CAAK,IAAC,CAAI,EAAC,CAAE,IAAC,CAAI,GAAG,KAAA,CAAM,IAAC,CAAI,EAAC,CAAE,IAAC,CAAI,CAAC,EAAC,CAAE,EAAC,CAAE,GAAG,SAAA,CAAU,CAyBrE,CAxBC;oBAyBF,IAAI,WAxBC,EAAY;wBAyBf,OAAO,GAxBG,yBAAA,CAA0B,OAAC,EAAQ,KAAA,CAAM,IAAC,CAAI,CAAC;qBAyB1D;oBACD,OAAV,MAAA,CAAA,MAAA,CAAA,EAAA,EACe,UAxBC,EAuBhB,EAEY,IAAI,oBAxBE,OAA+B,CAAA,EAsBjD,CAAA,CArBY;iBAyBH;aACF,CAxBC,CAAC;SAyBJ,CAxBC;KAyBH;;;;;;IAtBA,aAAA,CAAA,OAAA,EAAA,WAAA,EAAH;QA6BI,OA5BO,CAAA,MAAqC,KA4BhD;YACM,OA5BO,MAAA,CAAO,GAAC,CAAG,KAAC,IA4BzB;gBACQ,qBA5BI,UAAA,GAAa,KAAA,CAAM,OAAC,CAAO,OAAC,CAAO,CAAC;gBA6BxC,IAAI,CA5BC,UAAC,EAAW;oBA6Bf,OA5BO,SAAA,CAAU;iBA6BlB;gBAED,IAAIH,OA5BG,CAAO,UAAC,CAAU,SAAC,CAAS,EAAE;oBA6BnC,qBA5BI,WAAA,GA4Bd,MAAA,CAAA,MAAA,CAAA,EAAA,EACe,UA5BC,EA2BhB,EAEY,IAAI,EA5BEG,WAAG,CAAW,UAAC,CAAU,SAAC,CAAS,GAAG,SAAA,GAAY,IAAA,EA0BpE,CAGW,CA5BC;oBA6BF,OA5BO,WAAA,CAAY;iBA6BpB;qBA5BM;oBA6BL,IAAI,UA5BC,CAAU,SAAC,CAAS,MAAC,IAAS,CAAA,EAAG;wBA6BpC,MA5BM,IAAI,KAAA,CA6BR,mCAAmC,GA5BG,UAAA,CAAW,KAAC,CAAK,OAAC,CA6BzD,CA5BC;qBA6BH;oBAED,qBA5BI,QAAA,GAAW,UAAA,CAAW,SAAC,CAAS,CAAC,CAAC,CAAC;oBA6BvC,qBA5BI,MAAA,GAAS,KAAA,CAAM,IAAC,CAAI,QAAC,CAAQ,IAAC,CAAI;0BAClC,KAAA,CAAM,IAAC,CAAI,QAAC,CAAQ,IAAC,CAAI,CAAC,QAAC,CAAQ,EAAC,CAAE;0BACtC,SAAA,CAAU;oBA6Bd,IAAI,WA5BC,EAAY;wBA6Bf,MAAM,GA5BG,wBAAA,CAAyB,MAAC,EAAO,KAAA,CAAM,IAAC,CAAI,CAAC;qBA6BvD;oBACD,OAAV,MAAA,CAAA,MAAA,CAAA,EAAA,EACe,UA5BC,EA2BhB,EAEY,IAAI,EA5BE,MAAA,EA0BlB,CAAA,CAzBY;iBA6BH;aACF,CA5BC,CAAC;SA6BJ,CA5BC;KA6BH;;;;;IA1BA,qBAAA,CAAA,UAAA,EAAH;QAgCI,OA/BO,CAAA,MAAqC,KA+BhD;YACM,OA/BO,MAAA;iBAgCJ,GA/BC,CAAG,IAAC,CAAI,iBAAC,CAAiB,UAAC,CAAU,CAAC;iBAgCvC,GA/BC,CAAG,EAAC,KAAK,EAAE,GAAI,EAAA,CAAG,iBAAC,GAAmB,SAAA,CAAU,CAAC,CAAC;SAgCvD,CA/BC;KAgCH;CACF;;AD1KD,MAAA,kBAAA,CAAA;;;;;;;IA2RA,WAAA,CARY,QAAU,EACV,OAAS,EACT,KAAiB,EACjB,SAAW,EAKvB;QARY,IAAZ,CAAA,QAAY,GAAA,QAAA,CAAU;QACV,IAAZ,CAAA,OAAY,GAAA,OAAA,CAAS;QACT,IAAZ,CAAA,KAAY,GAAA,KAAA,CAAiB;QACjB,IAAZ,CAAA,SAAY,GAAA,SAAA,CAAW;QApRrB,IAAF,CAAA,eAAiB,GAEuB,IAAA,CAAK,QAAC;aADzC,MAEC,CAAwB,sBAAE,CAAsB,aAAC,CAAa;aAD/D,GAEC,CAAG,EAAC,IAAK,IAAA,CAAK,eAAC,CAAe,EAAC,CAAE,OAAC,EAAQ,MAAA,CAAO,CAAC;aADnD,QAEC,CAAQ,CAAC,OAAS,KAFxB;YACM,OAEO,IAAA,CAAK,OAAC;iBADV,MAEC,CAAM,OAAC,CAAO,KAAC,EAAM,OAAA,CAAQ,WAAC,CAAW;iBAD1C,GAEC,CADA,CAAC,QAE2B,KAD1B,IAEI,oBAAA,CAAqB;gBADvB,WAAW,EAEE,QAAA,CAAS,IAAC;gBADvB,KAAK,EAEE,OAAA,CAAQ,KAAC;aADjB,CAEC,CADL;iBACA,KAEC,CAAK,KAAC,IADN,UAAU,CAEC,EAAC,CADV,IAEI,iBAAA,CAAkB,IAAC,CAAI,cAAC,CAAc,OAAC,CAAO,KAAC,EAAM,KAAA,CAAM,CAAC,CADjE,CACF,CAEC;SADL,CAEC,CAAC;QACL,IAAF,CAAA,eAAiB,GAEG,IAAA,CAAK,QAAC;aADrB,MAEC,CAAyB,sBAAE,CAAsB,cAAC,CAAc;aADjE,GAEC,CAAG,EAAC,IAAK,IAAA,CAAK,eAAC,CAAe,EAAC,CAAE,OAAC,EAAQ,OAAA,CAAQ,CAAC;aADpD,QAEC,CAAQ,CAAC,OAAS,KAFxB;YACM,OAEO,IAAA,CAAK,OAAC;iBADV,MAEC,CAAM,OAAC,CAAO,KAAC,EAAM,OAAA,CAAQ,WAAC,CAAW;iBAD1C,GAEC,CADA,CAAC,QAE2B,KAD1B,IAEI,qBAAA,CAAsB;gBADxB,WAAW,EAEE,QAAA,CAAS,IAAC;gBADvB,KAAK,EAEE,OAAA,CAAQ,KAAC;aADjB,CAEC,CADL;iBACA,KAEC,CAAK,KAAC,IADN,UAAU,CAEC,EAAC,CADV,IAEI,kBAAA,CAAmB,IAAC,CAAI,cAAC,CAAc,OAAC,CAAO,KAAC,EAAM,KAAA,CAAM,CAAC,CADlE,CACF,CAEC;SADL,CAEC,CAAC;QACL,IAAF,CAAA,aAAe,GAEG,IAAA,CAAK,QAAC;aADnB,MAEC,CAAuB,sBAAE,CAAsB,YAAC,CAAY;aAD7D,GAEC,CAAG,EAAC,IAAK,EAAA,CAAG,OAAC,CAAO;aADrB,QAEC,CAAQ,CAAC,KAAO,KAFtB;YACM,OAEO,IAAA,CAAK,OAAC;iBADV,IAEC,CAAI,KAAC,CAAK;iBADX,GAEC,CAAG,CAAC,QAA2B,KAAK,QAAA,CAAS,IAAC,CAAI;iBADnD,GAEC,CADA,IAAI,IACF,IAEI,mBAAA,CAAoB;gBADtB,WAAW,EAEE,IAAA;gBADb,KAAK,EAEE,KAAA;aADR,CAEC,CADL;iBACA,KAEC,CAAK,KAAC,IADN,UAAU,CAEC,EAAC,CAAE,IAAI,gBAAA,CAAiB,IAAC,CAAI,cAAC,CAAc,KAAC,EAAM,KAAA,CAAM,CAAC,CAAC,CADvE,CAEC;SADL,CAEC,CAAC;QAqBL,IAAF,CAAA,WAAa,GAJG,IAAA,CAAK,QAAC;aAKjB,MAJC,CAA2B,sBAAE,CAAsB,gBAAC,CAAgB;aAKrE,GAJC,CAAG,EAAC,IAAK,EAAA,CAAG,OAAC,CAAO;aAKrB,QAJC,CAAQ,CAAC,KAAO,KAItB;YACM,OAJO,IAAA,CAAK,KAAC;iBAKV,GAJC,CAAG,IAAC,CAAI,SAAC,CAAS,oBAAC,EAAoB,CAAE;iBAK1C,GAJC,CAAG,IAAC,CAAI,SAAC,CAAS,WAAC,CAAW,KAAC,CAAK,CAAC;iBAKtC,GAJC,CAKA,OAAO,IACL,IAJI,uBAAA,CAAwB;gBAK1B,WAAW,EAJE,EAAE,IAAA,EAAM,OAAA,EAAQ;gBAK7B,KAAK,EAJE,KAAA;aAKR,CAJC,CAKL;iBACA,KAJC,CAAK,KAAC,IAKN,UAAU,CAJC,EAAC,CAKV,IAJI,oBAAA,CAAqB,IAAC,CAAI,cAAC,CAAc,KAAC,EAAM,KAAA,CAAM,CAAC,CAK5D,CACF;iBACA,SAJC,CAAS,IAAC,CAAI,sBAAC,CAAsB,KAAC,CAAK,CAAC;iBAK7C,SAJC,CAAS,IAAC,CAAI,mBAAC,CAAmB,KAAC,CAAK,CAAC,CAAC;SAK/C,CAJC,CAAC;QAOL,IAAF,CAAA,eAAiB,GAJG,IAAA,CAAK,QAAC;aAKrB,MAJC,CAA0B,sBAAE,CAAsB,eAAC,CAAe;aAKnE,GAJC,CAAG,EAAC,IAAK,EAAA,CAAG,OAAC,CAAO;aAKrB,GAJC,CAA+B,EAAE,IAAK,IAAA,CAAK,eAAC,CAAe,EAAC,EAAG,QAAA,CAAS,CAAC;aAK1E,QAJC,CAAQ,CAAC,OAAS,KAIxB;YACM,OAJO,IAAA,CAAK,OAAC;iBAKV,MAJC,CAAM,OAAC,CAAO,KAAC,CAAK;iBAKrB,GAJC,CAAG,CAAC,QAA2B,KAAK,QAAA,CAAS,IAAC,CAAI;iBAKnD,GAJC,CAKA,IAAI,IACF,IAJI,sBAAA,CAAuB;gBAKzB,WAAW,EAJE,IAAA;gBAKb,KAAK,EAJE,OAAA,CAAQ,KAAC;aAKjB,CAJC,CAKL;iBACA,KAJC,CAAK,KAAC,IAKN,UAAU,CAJC,EAAC,CAKV,IAJI,mBAAA,CAAoB,IAAC,CAAI,cAAC,CAAc,OAAC,CAAO,KAAC,EAAM,KAAA,CAAM,CAAC,CAKnE,CACF,CAJC;SAKL,CAJC,CAAC;QAOL,IAAF,CAAA,0BAA4B,GAJG,IAAA,CAAK,QAAC;aAKhC,MAJC,CAAM,sBAAC,CAAsB,iBAAC,CAAiB;aAKhD,cAJC,CAAc,IAAC,CAAI,KAAC,EAAM,CAAA,MAAS,EAAK,KAAA,KAI9C;YACM,qBAJI,OAAA,GAAU,MAAA,CAAO,OAAC,CAAO;YAK7B,qBAJI,KAAA,IAAQ,KAAA,CAAM,aAAC,CAAa,CAAC,KAAC,CAAS,CAAA,CAAiB;YAK5D,qBAJI,KAAA,GAAQ,KAAA,CAAM,OAAC,CAAO,OAAC,CAAO,CAAC,KAAC,CAAK;YAKzC,OAJO,IAAI,gBAAA,CAAiB,KAAC,CAAK,CAAC;SAKpC,CAJC,CAAC;QAOL,IAAF,CAAA,uBAAyB,GAJG,IAAA,CAAK,QAAC;aAK7B,MAJC,CAAM,sBAAC,CAAsB,kBAAC,CAAkB;aAKjD,cAJC,CAAc,IAAC,CAAI,KAAC,EAAM,CAAA,MAAS,EAAK,KAAA,KAI9C;YACM,qBAJI,EAAA,GAAK,EAAE,EAAA,EAAI,MAAA,CAAO,OAAC,CAAO,KAAC,CAAK,EAAC,EAAG,IAAA,EAAM,MAAA,CAAO,OAAC,CAAO,KAAC,CAAK,IAAC,EAAI,CAAE;YAK1E,IAAI,CAJC,EAAC,CAAE,EAAC,IAAK,CAAA,EAAE,CAAE,IAAC,EAAK;gBAKtB,MAJM,IAAI,KAAA,CAKR,mEAAmE,CACpE,CAJC;aAKH;YAED,qBAJI,KAAA,IAAQ,KAAA,CAAM,aAAC,CAAa,CAAC,KAAC,CAAS,CAAA,CAAiB;YAM5D,qBAJI,OAAA,GAAU,EAAA,CAAG;YAKjB,KAAK,qBAJI,OAAA,IAAW,KAAA,CAAM,OAAC,EAAQ;gBAKjC,IAAI,KAJC,CAAK,OAAC,CAAO,cAAC,CAAc,OAAC,CAAO,EAAE;oBAKzC,qBAJI,KAAA,GAAQ,KAAA,CAAM,OAAC,CAAO,OAAC,CAAO,CAAC;oBAKnC,IAAI,KAJC,CAAK,SAAC,EAAU;wBAKnB,qBAJI,YAAA,GAKFD,SAJG,CAAS,KAAC,CAAK,SAAC,EAAU,UAAA,CAAU,EAGrD;4BAEgB,OAJOD,OAAG,CAAO,EAAC,EAAG,CAAA,CAAE,CAAC;yBAKzB,CAJC,KAAK,CAAA,CAAE,CAAC;wBAMZ,qBAJI,eAAA,GAKF,KAAK,CAJC,KAAC,CAAK,EAAC,KAAM,EAAA,CAAG,EAAC,IAAK,KAAA,CAAM,KAAC,CAAK,IAAC,KAAQ,EAAA,CAAG,IAAC,CAAI;wBAK3D,IAAI,eAJC,KAAkB,YAAE,IAAeD,OAAG,CAAO,KAAC,CAAK,MAAC,CAAM,CAAC,EAAE;4BAKhE,MAJM,IAAI,KAAA,CAKR,gDAAgD;gCAC9C,8DAA8D,CACjE,CAJC;yBAKH;wBAED,IAAI,YAJC,EAAa;4BAKhB,OAAO,CAJC,IAAC,CAAI,IAAI,qBAAA,CAAsB,OAAC,CAAO,CAAC,CAAC;yBAKlD;qBACF;iBACF;aACF;YACD,OAJO,OAAA,CAAQ;SAKhB,CAJC;aAKD,OAJC,CAAO,OAAC,IAAU,UAAA,CAAW,EAAC,CAAE,GAAC,OAAG,CAAO,CAAC,CAAC;QAOjD,IAAF,CAAA,eAAiB,GAJG,IAAA,CAAK,QAAC;aAKrB,MAJC,CAAM,sBAAC,CAAsB,cAAC,CAAc;aAK7C,MAJC,CAAM,MAAM,IAAA,CAAK,OAAC,CAAO,MAAC,CAAM,YAAC,KAAgB,KAAA,CAAM;aAKxD,cAJC,CAKA,IAAI,CAJC,KAAC,CAAK,MAAC,CAAM,IAAC,CAAI,SAAC,CAAS,oBAAC,EAAoB,CAAE,EAKxD,CAAC,MAJC,EAAO,SAAW,KAE1B;YAGQ,qBAJI,OAAA,GAAU,EAAA,MAAW,GAAoB,OAAC,CAAO;YAKrD,uBAJM,OAAA,GAAgC,iBAAA,CAKpC,SAAS,CAJC,IAAC,EAKX,OAAO,CAJC,GAAC,EAKT,OAAO,CAJC,OAAC,CAKV,CAJC;YAKF,OAJO,OAAA,CAAQ;SAKhB,CACF;aACA,OAJC,CAAO,OAAC,IAId;YACM,IAAI,OAJC,CAAO,MAAC,KAAU,CAAA,EAAG;gBAKxB,OAJO,UAAA,CAAW,EAAC,CAAE,IAAI,qBAAA,CAAsB,EAAC,CAAE,CAAC,CAAC;aAKrD;YACD,OAAO,GAJG,kBAAA,CAAmB,OAAC,CAAO,CAAC;YAMtC,qBAJI,OAAA,GAAqC,EAAA,CAAG;YAK5C,KAAK,qBAJI,aAAA,IAAiB,OAAA,EAAS;gBAKjC,IAAI,aAJC,CAAa,KAAC,KAAS,SAAA,EAAW;oBAKrC,qBAJI,OAAA,GAAmB,IAAA,CAAK,eAAC,CAAe,aAAC,EAAc,MAAA,CAAO,CAAC;oBAKnE,OAAO,CAJC,IAAC,CAKP,IAAI,CAJC,OAAC;yBAKH,MAJC,CAAM,OAAC,CAAO,KAAC,EAAM,OAAA,CAAQ,WAAC,CAAW;yBAK1C,GAJC,CAKA,QAAQ,IACN,IAJI,oBAAA,CAAqB;wBAKvB,WAAW,EAJE,QAAA,CAAS,IAAC;wBAKvB,KAAK,EAJE,OAAA,CAAQ,KAAC;qBAKjB,CAJC,CAKL;yBACA,KAJC,CAAK,KAAC,IAKN,UAAU,CAJC,EAAC,CAKV,IAJI,iBAAA,CAKF,IAAI,CAJC,cAAC,CAAc,OAAC,CAAO,KAAC,EAAM,KAAA,CAAM,CAK1C,CACF,CACF,CACJ,CAJC;iBAKH;qBAJM,IAAA,aAAK,CAAa,KAAC,KAAS,SAAA,EAAW;;oBAM5C,qBAJI,OAAA,GAAmB,IAAA,CAAK,eAAC,CAAe,aAAC,EAAc,OAAA,CAAQ,CAAC;oBAKpE,OAAO,CAJC,IAAC,CAKP,IAAI,CAJC,OAAC;yBAKH,MAJC,CAAM,OAAC,CAAO,KAAC,EAAM,OAAA,CAAQ,WAAC,CAAW;yBAK1C,GAJC,CAKA,QAAQ,IACN,IAJI,qBAAA,CAAsB;wBAKxB,WAAW,EAJE,QAAA,CAAS,IAAC;wBAKvB,KAAK,EAJE,OAAA,CAAQ,KAAC;qBAKjB,CAJC,CAKL;yBACA,KAJC,CAAK,KAAC,IAKN,UAAU,CAJC,EAAC,CAKV,IAJI,kBAAA,CAKF,IAAI,CAJC,cAAC,CAAc,OAAC,CAAO,KAAC,EAAM,KAAA,CAAM,CAK1C,CACF,CACF,CACJ,CAJC;iBAKH;qBAJM,IAAA,aAAK,CAAa,KAAC,KAAS,SAAA,EAAW;oBAK5C,qBAJI,OAAA,GAAmB,IAAA,CAAK,eAAC,CAAe,aAAC,EAAc,QAAA,CAAS,CAAC;oBAKrE,OAAO,CAJC,IAAC,CAKP,IAAI,CAJC,OAAC;yBAKH,MAJC,CAAM,OAAC,CAAO,KAAC,CAAK;yBAKrB,GAJC,CAKA,QAAQ,IACN,IAJI,sBAAA,CAAuB;wBAKzB,WAAW,EAJE,QAAA,CAAS,IAAC;wBAKvB,KAAK,EAJE,OAAA,CAAQ,KAAC;qBAKjB,CAJC,CAKL;yBACA,KAJC,CAAK,KAAC,IAKN,UAAU,CAJC,EAAC,CAKV,IAJI,mBAAA,CAKF,IAAI,CAJC,cAAC,CAAc,OAAC,CAAO,KAAC,EAAM,KAAA,CAAM,CAK1C,CACF,CACF,CACJ,CAJC;iBAKH;qBAJM;oBAKL,MAJM,IAAI,KAAA,CAAM,gBAAC,GAAkB,aAAA,CAAc,KAAC,CAAK,CAAC;iBAKzD;aACF;YAED,OAJO,UAAA,CAAW,EAAC,CAAE,GAAC,OAAG,CAAO;iBAK7B,SAJC,EAAS;iBAKV,OAJC,EAAO;iBAKR,GAJC,CAAG,OAAC,IAAU,IAAA,CAAK,aAAC,CAAa,OAAC,CAAO,CAAC,CAAC;SAKhD,CAJC,CAAC;KAgBD;;;;;IA/NH,sBAAA,CAAA,KAAA,EAAH;QAEI,OADO,IAAA,CAAK,QAAC;aAEV,MADC,CAA2B,sBAAE,CAAsB,gBAAC,CAAgB;aAErE,GADC,CAAG,MAAC,KAAS,MAAU,CAAA,CAAqB;aAE7C,MADC,CAAM,MAAC,IAAS,KAAA,CAAM,OAAC,IAAU,MAAA,CAAO,OAAC,CAAO,OAAC,CAAO,CAAC;KAE9D;;;;;IACA,mBAAA,CAAA,KAAA,EAAH;QAKI,OAJO,IAAA,CAAK,QAAC;aAKV,MAJC,CAA2B,sBAAE,CAAsB,YAAC,CAAY;aAKjE,GAJC,CAAG,MAAC,KAAS,MAAU,CAAA,CAAqB;aAK7C,MAJC,CAAM,MAAC,IAAS,KAAA,CAAM,OAAC,IAAU,MAAA,CAAO,OAAC,CAAO,CAAC;KAKtD;;;;IAmNH,WAXG,GAWH,GAXgB;;;;;IAEb,aAAA,CAAA,OAAA,EAAH;QAeI,KAAK,qBAdI,MAAA,IAAU,OAAA,EAAS;YAe1B,IACE,MAAM,CAdC,IAAC,KAAQ,sBAAA,CAAuB,aAAC;gBAexC,MAAM,CAdC,IAAC,KAAQ,sBAAA,CAAuB,cAAC;gBAexC,MAAM,CAdC,IAAC,KAAQ,sBAAA,CAAuB,eAezC,EAdE;gBAeA,OAdO,IAAI,kBAAA,CAAmB,OAAC,CAAO,CAAC;aAexC;SACF;QACD,OAdO,IAAI,qBAAA,CAAsB,OAAC,CAAO,CAAC;KAe3C;;;;;;IAZA,cAAA,CAmBC,KAAY,EACZ,QAAiC,EApBrC;QAsBI,qBAlBI,WAAA,GAAsB,IAAA,CAAK;QAmB/B,IAAI,QAlBC,IAAW,QAAA,CAAS,OAAC,EAAQ;YAmBhC,WAAW,GAlBG,QAAA,CAAS,OAAC,CAAO,GAAC,CAAG,cAAC,CAAc,CAAC;SAmBpD;QACD,qBAlBI,QAAA,GAAW,IAAA,CAAK;QAmBpB,IACE,WAAW,IAlBI,IAAA;YAmBf,WAAW,CAlBC,UAAC,CAAU,0BAAC,CAmB1B,EAlBE;YAmBA,QAAQ,GAlBG,QAAA,CAAS;SAmBrB;QACD,IACE,QAAQ;YACR,QAAQ,CAlBC,KAAC;YAmBV,QAAQ,CAlBC,KAAC,CAAK,MAAC;YAmBhB,QAAQ,CAlBC,KAAC,CAAK,MAAC,CAAM,MAAC,GAAQ,CAmBjC,EAlBE;YAmBA,OAlBO;gBAmBL,KAAK,EAlBE,KAAA;gBAmBP,WAAW,EAlBE,QAAA,CAAS,KAAC;aAmBxB,CAlBC;SAmBH;aAlBM;;YAoBL,qBAlBI,MAAA,GAA+B,EAAA,CAAG;YAmBtC,qBAlBI,KAAA,GAAuB;gBAmBzB,MAAM,EAlBE,MAAA,CAAO,QAAC,CAAQ,MAAC,CAAM;gBAmB/B,IAAI,EAlBE,QAAA,CAAS,UAAC;aAmBjB,CAlBC;YAoBF,MAAM,CAlBC,IAAC,CAAI,KAAC,CAAK,CAAC;;YAqBnB,OAlBO;gBAmBL,KAAK,EAlBE,KAAA;gBAmBP,WAAW,EAlBE;oBAmBX,MAAM,EAlBE,MAAA;iBAmBT;aACF,CAlBC;SAmBH;KACF;;;;;;IAhBA,eAAA,CAuBC,QAAkB,EAClB,SAAwB,EAxB5B;QAME,OAFS,eAAA,CAAgB,QAAC,EAAS,SAAA,CAAU,CAAC;KAuB7C;;AArBI,kBAAP,CAAA,UAAO,GAAoC;IAuB3C,EAtBE,IAAA,EAAM,UAAA,EAAW;CAuBlB,CAtBC;;;;AAED,kBAAD,CAAA,cAAC,GAAA,MAAA;IAyBD,EAAC,IAAI,EAAE,OAAO,GAAG;IACjB,EAAC,IAAI,EAAE,WAAW,GAAG;IACrB,EAAC,IAAI,EAAE,KAAK,GAAG;IACf,EAAC,IAAI,EAAE,oBAAoB,GAAG;CAC7B,CAAC;AAvBK,kBAAP,CAAA,cAAO,GAAyD;IAyBhE,iBAAiB,EAxBE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAyBrC,iBAAiB,EAxBE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAyBrC,eAAe,EAxBE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAyBnC,aAAa,EAxBE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAyBjC,iBAAiB,EAxBE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAyBrC,4BAA4B,EAxBE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAyBhD,yBAAyB,EAxBE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAyB7C,iBAAiB,EAxBE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;CAyBpC,CAxBC;;AD5YK,MAAM,uBAAA,GAA4C;IACvD,UAAU,EAAE,CAAA;IACZ,SAAS,EAAE,CAAA;IACX,UAAU,EAAE,CAAA;IACZ,UAAU,EAAE,CAAA;IACZ,UAAU,EAAE,CAAA;IACZ,IAAI,EAAE,EAAA;IACN,OAAO,EAAE,EAAA;CACV,CAAC;;;;;;AAMF,AAAA,SAAA,uBAAA,CACE,KADF,GAC4B,uBAAuB,EACjD,MAAW,EAFb;IAIE,qBAJI,QAAA,CAAS;IAMb,QAAQ,MAJC,CAAM,IAAC;QAKd,KAJK,sBAAA,CAAuB,aAAC,EAAc;YAKzC,qBAJI,WAAA,GAAc,2BAAA,CAKhB,KAAK,CAJC,IAAC,EAKP,MAAM,CAJC,OAAC,EAKR,KAAK,EACL,IAAI,CACL,CAJC;YAKF,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,IAAI,EAJE,WAAA,EAKN,UAAU,EAJE,KAAA,CAAM,UAAC,GAAY,CAAA,EACvC,CAIO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,YAAC,EAAa;YAKxC,qBAJI,KAAA,IAAQ,MAAA,CAAO,OAAW,CAAA,CAAM;YAKpC,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,OAAO,EAJE,iBAAA,CAAkB,KAAC,CAAK,OAAC,EAAQ,KAAA,CAAM,EAKhD,SAAS,EAJE,KAAA,CAAM,SAAC,GAAW,CAAA,EACrC,CAIO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,cAAC,EAAe;YAK1C,qBAJI,WAAA,GAAc,2BAAA,CAKhB,KAAK,CAJC,IAAC,EAKP,MAAM,CAJC,OAAC,EAKR,KAAK,EACL,KAAK,CACN,CAJC;YAKF,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,IAAI,EAJE,WAAA,EAKN,UAAU,EAJE,KAAA,CAAM,UAAC,GAAY,CAAA,EACvC,CAIO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,eAAC,EAAgB;YAK3C,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,IAAI,EAJE,mBAAA,CAAoB,KAAC,CAAK,IAAC,EAAK,MAAA,CAAO,OAAC,EAAQ,SAAA,CAAU,EAKhE,UAAU,EAJE,KAAA,CAAM,UAAC,GAAY,CAAA,EACvC,CAIO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,gBAAC,EAAiB;YAK5C,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,IAAI,EAJE,0BAAA,CAKJ,KAAK,CAJC,IAAC,EAKP,MAAM,CAJC,OAAC,CAAO,WAAC,CAKjB,EACD,UAAU,EAJE,KAAA,CAAM,UAAC,GAAY,CAAA,EAFvC,CAOO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,eAAC,EAAgB;YAK3C,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,IAAI,EAJE,0BAAA,CAKJ,KAAK,CAJC,IAAC,EAKP,MAAM,CAJC,OAAC,CAAO,WAAC,CAKjB,EACD,OAAO,EAJE,kBAAA,CAKP,KAAK,CAJC,OAAC,EAKP,MAAM,CAJC,OAAC,CAAO,KAAC,CAAK,OAAC,EAKtB,MAAM,CAJC,OAAC,CAAO,WAAC,CAKjB,EACD,SAAS,EAJE,KAAA,CAAM,SAAC,GAAW,CAAA,EAPrC,CAYO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,iBAAC,EAAkB;YAK7C,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,IAAI,EAJE,0BAAA,CAKJ,KAAK,CAJC,IAAC,EAKP,MAAM,CAJC,OAAC,CAAO,WAAC,CAKjB,EACD,UAAU,EAJE,KAAA,CAAM,UAAC,GAAY,CAAA,EAFvC,CAOO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,kBAAC,EAAmB;YAK9C,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,IAAI,EAJE,oBAAA,CAAqB,KAAC,CAAK,IAAC,EAAK,MAAA,CAAO,OAAC,CAAO,KAAC,CAAK,EAK5D,OAAO,EAJE,+BAAA,CAAgC,KAAC,CAAK,OAAC,EAAQ;oBAKtD,EAAE,EAJE,MAAA,CAAO,OAAC,CAAO,KAAC,CAAK,EAAC;oBAK1B,IAAI,EAJE,MAAA,CAAO,OAAC,CAAO,KAAC,CAAK,IAAC;iBAK7B,CAJC,EAKF,UAAU,EAJE,KAAA,CAAM,UAAC,GAAY,CAAA,EAGvC,CAEO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,iBAAC,EAAkB;;YAM7C,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,OAAO,EAJE,gBAAA,CAAiB,KAAC,CAAK,OAAC,EAAQ,MAAA,CAAO,OAAC,CAAO,EAEhE,CAGO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,aAAC,EAAc;YAKzC,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,IAAI,EAJE,4BAAA,CAKJ,KAAK,CAJC,IAAC,EAKP,MAAM,CAJC,OAAC,CAAO,KAAC,EAKhB,MAAM,CAJC,OAAC,CAAO,WAAC,CAKjB,EACD,UAAU,EAJE,KAAA,CAAM,UAAC,GAAY,CAAA,EAHvC,CAQO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,YAAC,EAAa;YAKxC,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,OAAO,EAJE,iBAAA,CAKP,KAAK,CAJC,OAAC,EAKP,MAAM,CAJC,OAAC,CAAO,KAAC,CAAK,OAAC,EAKtB,MAAM,CAJC,OAAC,CAAO,WAAC,CAKjB,EACD,SAAS,EAJE,KAAA,CAAM,SAAC,GAAW,CAAA,EAHrC,CAQO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,cAAC,EAAe;YAK1C,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,IAAI,EAJE,4BAAA,CAKJ,KAAK,CAJC,IAAC,EAKP,MAAM,CAJC,OAAC,CAAO,KAAC,EAKhB,MAAM,CAJC,OAAC,CAAO,WAAC,CAKjB,EACD,UAAU,EAJE,KAAA,CAAM,UAAC,GAAY,CAAA,EAHvC,CAQO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,eAAC,EAAgB;YAK3C,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,IAAI,EAJE,4BAAA,CAKJ,KAAK,CAJC,IAAC,EAKP,MAAM,CAJC,OAAC,CAAO,KAAC,EAKhB,MAAM,CAJC,OAAC,CAAO,WAAC,CAKjB,EACD,UAAU,EAJE,KAAA,CAAM,UAAC,GAAY,CAAA,EAHvC,CAQO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,YAAC,EAAa;YAKxC,qBAJI,OAAA,IAAU,MAAA,CAAO,OAAW,CAAA,CAAO;YAKvC,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EAJmB,KAAI,EAIvB,EAJ6B,OAAA,EAAS,WAAA,CAAY,KAAC,CAAK,OAAC,EAAQ,OAAA,CAAQ,EAIzE,CAJ0E,CAAE;YAKtE,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,gBAAC,EAAiB;YAK5C,qBAJI,KAAA,IAAQ,MAAA,CAAO,OAAW,CAAA,CAAM;YAKpC,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EAJmB,KAAI,EAIvB,EAJ6B,OAAA,EAAS,iBAAA,CAAkB,KAAC,CAAK,OAAC,EAAQ,KAAA,CAAM,EAI7E,CAJ8E,CAAE;YAK1E,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,4BAAC,EAA6B;YAKxD,qBAJI,OAAA,IAAU,MAAA,CAAO,OAAW,CAAA,CAAiC;YAKjE,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,IAAI,EAJE,oBAAA,CAKJ,KAAK,CAJC,IAAC,EAKP,OAAO,CAJC,UAAC,EAKT,OAAO,CAJC,MAAC,EAKT,OAAO,CAJC,gBAAC,CAKV,EAPT,CAQO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,mBAAC,EAAoB;YAK/C,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,OAAO,EAJE,kBAAA,CAKP,KAAK,CAJC,OAAC,EAKP,MAAM,CAJC,OAAC,CAAO,KAAC,CAAK,OAAC,EAKtB,MAAM,CAJC,OAAC,CAAO,WAAC,CAKjB,EANT,CAOO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,oBAAC,EAAqB;YAKhD,qBAJI,WAAA,GAAc,2BAAA,CAKhB,KAAK,CAJC,IAAC,EAKP,MAAM,CAJC,OAAC,EAKR,KAAK,EACL,KAAK,CACN,CAJC;YAKF,IAAI,WAJC,KAAe,KAAA,CAAM,IAAC,EAAK;gBAK9B,QAAQ,GAAhB,MAAA,CAAA,MAAA,CAAA,EAAA,EAJqB,KAAI,EAIzB,EAJ+B,IAAA,EAAM,WAAA,EAIrC,CAJiD,CAAE;gBAK3C,OAJO,QAAA,CAAS;aAKjB;iBAJM;gBAKL,OAJO,KAAA,CAAM;aAKd;SACF;QACD,KAJK,sBAAA,CAAuB,mBAAC,EAAoB;YAK/C,qBAJI,WAAA,GAAc,2BAAA,CAKhB,KAAK,CAJC,IAAC,EAKP,MAAM,CAJC,OAAC,EAKR,KAAK,EACL,IAAI,CACL,CAJC;YAKF,IAAI,WAJC,KAAe,KAAA,CAAM,IAAC,EAAK;gBAK9B,QAAQ,GAAhB,MAAA,CAAA,MAAA,CAAA,EAAA,EAJqB,KAAI,EAIzB,EAJ+B,IAAA,EAAM,WAAA,EAIrC,CAJiD,CAAE;gBAK3C,OAJO,QAAA,CAAS;aAKjB;iBAJM;gBAKL,OAJO,KAAA,CAAM;aAKd;SACF;QACD,KAJK,sBAAA,CAAuB,kBAAC,EAAmB;YAK9C,qBAJI,WAAA,GAAc,2BAAA,CAKhB,KAAK,CAJC,IAAC,EAKP,MAAM,CAJC,OAAC,EAKR,KAAK,EACL,IAAI,CACL,CAJC;YAKF,WAAW,GAJG,mBAAA,CAAoB,WAAC,EAAY,MAAA,CAAO,OAAC,EAAQ,KAAA,CAAM,CAAC;YAKtE,IAAI,WAJC,KAAe,KAAA,CAAM,IAAC,EAAK;gBAK9B,QAAQ,GAAhB,MAAA,CAAA,MAAA,CAAA,EAAA,EAJqB,KAAI,EAIzB,EAJ+B,IAAA,EAAM,WAAA,EAIrC,CAJiD,CAAE;gBAK3C,OAJO,QAAA,CAAS;aAKjB;iBAJM;gBAKL,OAJO,KAAA,CAAM;aAKd;SACF;QACD,KAJK,sBAAA,CAAuB,qBAAC,EAAsB;YAKjD,qBAJI,UAAA,IAAa,MAAA,CAAO,OAAW,CAAA,CAAmB;YAKtD,IACE,KAAK,CAJC,IAAC,CAAI,UAAC,CAAU,IAAC,CAAI;gBAK3B,KAAK,CAJC,IAAC,CAAI,UAAC,CAAU,IAAC,CAAI,CAAC,UAAC,CAAU,EAAC,CAK1C,EAJE;gBAKA,qBAJI,QAAA,GAAW,KAAA,CAAM,IAAC,CAAI,UAAC,CAAU,IAAC,CAAI,CAAC,UAAC,CAAU,EAAC,CAAE,CAAC;gBAM1D,IAAI,QAJC,CAAQ,KAAC,KAAS,KAAA,IAAS,QAAA,CAAS,KAAC,KAAS,SAAA,EAAW;;oBAM5D,QAAQ,GAAlB,MAAA,CAAA,MAAA,CAAA,EAAA,EACe,KAJC,EAGhB,EAEY,IAAI,EAJE,mBAAA,CAAoB,KAAC,CAAK,IAAC,EAAK,UAAA,CAAW,EAE7D,CAGW,CAJC;oBAKF,OAJO,QAAA,CAAS;iBAKjB;qBAJM;;oBAML,QAAQ,GAAlB,MAAA,CAAA,MAAA,CAAA,EAAA,EACe,KAJC,EAGhB,EAEY,IAAI,EAJE,mBAAA,CAAoB,KAAC,CAAK,IAAC,EAAK,MAAA,CAAO,OAAC,EAAQ,SAAA,CAAU,EAE5E,CAGW,CAJC;oBAKF,OAJO,QAAA,CAAS;iBAKjB;aACF;YACD,OAJO,KAAA,CAAM;SAKd;QACD,KAJK,sBAAA,CAAuB,cAAC,EAAe;YAK1C,qBAJI,OAAA,GAAU,EAAA,MAAW,GAAoB,OAAC,CAAO;YAKrD,qBAJI,OAAA,GAAgC,iBAAA,CAKlC,KAAK,CAJC,IAAC,EAKP,OAAO,CAJC,GAAC,EAKT,OAAO,CAJC,OAAC,CAKV,CAJC;YAKF,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EAJmB,KAAI,EAIvB,EAJ6B,UAAA,EAAY,KAAA,CAAM,UAAC,GAAY,CAAA,EAI5D,CAJ8D,CAAE;YAK1D,KAAK,qBAJI,aAAA,IAAiB,OAAA,EAAS;gBAKjC,IAAI,aAJC,CAAa,KAAC,KAAS,SAAA,EAAW;oBAKrC,QAAQ,CAJC,UAAC,EAAU,CAAE;iBAKvB;qBAJM,IAAA,aAAK,CAAa,KAAC,KAAS,SAAA,EAAW;oBAK5C,QAAQ,CAJC,UAAC,EAAU,CAAE;iBAKvB;qBAJM,IAAA,aAAK,CAAa,KAAC,KAAS,SAAA,EAAW;oBAK5C,QAAQ,CAJC,UAAC,EAAU,CAAE;iBAKvB;qBAJM;oBAKL,MAJM,IAAI,KAAA,CAAM,gBAAC,GAAkB,aAAA,CAAc,KAAC,CAAK,CAAC;iBAKzD;aACF;YACD,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,iBAAC,CAAiB;QAK9C,KAJK,sBAAA,CAAuB,cAAC,EAAe;;YAM1C,qBAJI,OAAA,IAAU,MAAA,CAAO,OAAwB,CAAA,CAAC;YAK9C,QAAQ,GAJG,KAAA,CAAM;YAKjB,KAAK,qBAJI,YAAA,IAAgB,OAAA,EAAS;gBAKhC,QAAQ,GAJG,uBAAA,CAAwB,QAAC,EAAS,YAAA,CAAa,CAAC;aAK5D;YACD,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EAJmB,QAAI,EAIvB,EAJgC,UAAA,EAAY,KAAA,CAAM,YAAC,CAAY,GAAG,CAAA,EAIlE,CAJoE,CAAE;YAKhE,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,YAAC,EAAa;YAKxC,qBAJI,OAAA,GAAU,EAAA,MAAW,GAAmB,OAAC,CAAO;YAKpD,QAAQ,GAAd,MAAA,CAAA,MAAA,CAAA,EAAA,EACW,KAJC,EAGZ,EAEQ,IAAI,EAJE,sBAAA,CAAuB,KAAC,CAAK,IAAC,EAAK,OAAA,CAAQ,GAAC,EAAI,OAAA,CAAQ,OAAC,CAAO,EAE9E,CAGO,CAJC;YAKF,OAJO,QAAA,CAAS;SAKjB;QACD,KAJK,sBAAA,CAAuB,WAAC,EAAY;YAKvC,OAJO,uBAAA,CAAwB;SAKhC;QACD,KAJK,sBAAA,CAAuB,aAAC,EAAc;YAKzC,OAJO,YAAA,CAAa,KAAC,CAAK,CAAC;SAK5B;QACD;YACE,OAJO,KAAA,CAAM;KAKhB;CACF;AAED,AAJO,MAAM,OAAA,GAAiC;IAK5C,GAAG,EAJE,uBAAA;CAKN;;ADrVM,MAAM,oBAAA,GAAuB,IAAI,WAAA,CAAY,sBAAC,CAAsB,CAAC;;;;;;AAM5E,AAAA,SAAA,UAAA,CAJC,IAAA,EAAA,MAAA,EAID;IACE,OAJO,IAAI,WAAA,CAAY,IAAC,EAAK,MAAA,CAAO,CAAC;CAKtC;;;;;AAKD,AAAA,SAAA,gBAAA,CAPC,MAAA,EAOD;IACE,OAPO,IAAI,oBAAA,CAAqB,MAAC,CAAM,CAAC;CAQzC;;;;;;AAMD,AAAA,SAAA,cAAA,CACE,KAAY,EACZ,SAAK,EAFP;IAIE,OAXO,IAAI,kBAAA,CAAmB,KAAC,EAAM,SAAA,CAAU,CAAC;CAYjD;;;;;AAKD,AAAA,SAAA,SAAA,CAdC,MAAA,EAcD;IACE,OAdO;QAeL;YACE,OAAA,EAdS,WAAA;YAeT,UAAS,EAdG,UAAA;YAeZ,IAAI,EAdE,CAAA,UAAE,EAAW,oBAAA,CAAqB;SAezC;QACD;YACE,OAAO,EAdE,oBAAA;YAeT,UAAU,EAdE,gBAAA;YAeZ,IAAI,EAdE,CAAA,oBAAE,CAAoB;SAe7B;QACD;YACE,OAAO,EAdE,kBAAA;YAeT,UAAU,EAdE,cAAA;YAeZ,IAAI,EAdE,CAAA,KAAE,EAAM,oBAAA,CAAqB;SAepC;QACD;YACE,OAAO,EAdE,oBAAA;YAeT,QAAQ,EAdE,MAAA;SAeX;KACF,CAdC;CAeH;AACD,AAAA,MAAA,iBAAA,CAAA;;;;;IAKA,OAhBG,SAAA,CAAA,MAAA,EAgBH;QACI,OAhBO;YAiBL,QAAQ,EAhBE,iBAAA;YAiBV,SAAS,EAhBE,SAAA,CAAU,MAAC,CAAM;SAiB7B,CAhBC;KAiBH;;AAfI,iBAAP,CAAA,UAAO,GAAoC;IAiB3C,EAhBE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBAiBtB,YAAY,EAhBE;oBAiBZ,4BAA4B;oBAC5B,wBAAwB;oBAL1B,uBAAA;iBAOC;gBACD,OAAO,EAhBE;oBAiBP,aAAa,CAhBC,UAAC,CAAU,CAAC,kBAAC,CAAkB,CAAC;oBAiB9C,WAAW,CAhBC,UAAC,CAAU,aAAC,EAAc,OAAA,EAAS,EAAA,CAAG;iBAiBnD;gBACD,OAAO,EAhBE;oBAiBP,4BAA4B;oBAC5B,wBAAwB;oBACxB,uBAAuB;iBACxB;aACF,EAhBC,EAAG;CAiBJ,CAhBC;;;;AAED,iBAAD,CAAA,cAAC,GAAA,MAAA,EAmBA,CAAC;;AD3GF;;GAEG;;;;"}