{"version":3,"file":"ngrx-json-api.es5.js","sources":["../../ngrx-json-api.ts","../../src/module.ts","../../src/reducers.ts","../../src/effects.ts","../../src/selectors.ts","../../src/api.ts","../../src/pipes.ts","../../src/services.ts","../../src/utils.ts","../../src/actions.ts","../../src/interfaces.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {SelectStoreResourcePipe,DenormaliseStoreResourcePipe,GetDenormalisedValuePipe,NgrxJsonApiService,NgrxJsonApiModule,Direction,Document,FilteringParam,FilteringOperator,ManyResourceRelationship,TypedManyResourceRelationship,TypedOneResourceRelationship,NgrxJsonApiConfig,NgrxJsonApiStore,NgrxJsonApiStoreData,NgrxJsonApiStoreQueries,NgrxJsonApiStoreResources,NgrxJsonApiFilteringConfig,NgrxJsonApiUrlBuilder,OperationType,OneResourceRelationship,ErrorModificationType,ModifyStoreResourceErrorsPayload,Payload,Query,QueryParams,Resource,ResourceAttributeDefinition,ResourceDefinition,ResourceError,ResourceErrorSource,ResourceIdentifier,ResourceRelationship,ResourceRelationDefinition,ResourceRelationType,ResourceState,SortingParam,QueryResult,ManyQueryResult,OneQueryResult,StoreQuery,StoreResource} from './index';\n\nexport {NgrxJsonApi as ɵh} from './src/api';\nexport {NgrxJsonApiEffects as ɵg} from './src/effects';\nexport {NGRX_JSON_API_CONFIG as ɵa,apiFactory as ɵb,configure as ɵe,selectorsFactory as ɵc,serviceFactory as ɵd} from './src/module';\nexport {NgrxJsonApiStoreReducer as ɵi,reducer as ɵj} from './src/reducers';\nexport {NgrxJsonApiSelectors as ɵf} from './src/selectors';","import { ModuleWithProviders, NgModule, OpaqueToken } from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\n\nimport { Store, StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { NgrxJsonApi } from './api';\nimport { NgrxJsonApiEffects } from './effects';\nimport { NgrxJsonApiSelectors } from './selectors';\nimport { NgrxJsonApiService } from './services';\nimport { reducer } from './reducers';\nimport {\n  DenormaliseStoreResourcePipe,\n  GetDenormalisedValuePipe,\n  SelectStoreResourcePipe,\n} from './pipes';\n\nimport { NgrxJsonApiConfig } from './interfaces';\n\nexport const /** @type {?} */ NGRX_JSON_API_CONFIG = new OpaqueToken('NGRX_JSON_API_CONFIG');\n/**\n * @param {?} http\n * @param {?} config\n * @return {?}\n */\nexport function apiFactory(http: HttpClient, config: NgrxJsonApiConfig) {\n  return new NgrxJsonApi(http, config);\n}\n/**\n * @param {?} config\n * @return {?}\n */\nexport function selectorsFactory(config: NgrxJsonApiConfig) {\n  return new NgrxJsonApiSelectors<any>(config);\n}\n/**\n * @param {?} store\n * @param {?} selectors\n * @return {?}\n */\nexport function serviceFactory(\n  store: Store<any>,\n  selectors: NgrxJsonApiSelectors<any>\n) {\n  return new NgrxJsonApiService(store, selectors);\n}\n/**\n * @param {?} config\n * @return {?}\n */\nexport function configure(config: NgrxJsonApiConfig): Array<any> {\n  return [\n    {\n      provide: NgrxJsonApi,\n      useFactory: apiFactory,\n      deps: [HttpClient, NGRX_JSON_API_CONFIG],\n    },\n    {\n      provide: NgrxJsonApiSelectors,\n      useFactory: selectorsFactory,\n      deps: [NGRX_JSON_API_CONFIG],\n    },\n    {\n      provide: NgrxJsonApiService,\n      useFactory: serviceFactory,\n      deps: [Store, NgrxJsonApiSelectors],\n    },\n    {\n      provide: NGRX_JSON_API_CONFIG,\n      useValue: config,\n    },\n  ];\n}\nexport class NgrxJsonApiModule {\n/**\n * @param {?} config\n * @return {?}\n */\nstatic configure(config: NgrxJsonApiConfig): ModuleWithProviders {\n    return {\n      ngModule: NgrxJsonApiModule,\n      providers: configure(config),\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    DenormaliseStoreResourcePipe,\n    GetDenormalisedValuePipe,\n    SelectStoreResourcePipe,\n  ],\n  imports: [\n    EffectsModule.forFeature([NgrxJsonApiEffects]),\n    StoreModule.forFeature('NgrxJsonApi', reducer, {}),\n  ],\n  exports: [\n    DenormaliseStoreResourcePipe,\n    GetDenormalisedValuePipe,\n    SelectStoreResourcePipe,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgrxJsonApiModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgrxJsonApiModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Action, ActionReducer, ActionReducerMap } from '@ngrx/store';\n\nimport { NgrxJsonApiActionTypes, NgrxJsonApiActions } from './actions';\nimport {\n  Query,\n  ResourceState,\n  StoreResource,\n  NgrxJsonApiStore,\n  ModifyStoreResourceErrorsPayload,\n  ResourceIdentifier,\n} from './interfaces';\nimport {\n  deleteStoreResources,\n  clearQueryResult,\n  updateQueryParams,\n  updateQueryResults,\n  updateQueryErrors,\n  updateStoreDataFromPayload,\n  updateStoreDataFromResource,\n  updateResourceState,\n  removeQuery,\n  rollbackStoreResources,\n  updateResourceErrorsForQuery,\n  updateQueriesForDeletedResource,\n  compactStore,\n  updateResourceErrors,\n  removeStoreResource,\n  getPendingChanges,\n} from './utils';\n\nexport const /** @type {?} */ initialNgrxJsonApiState: NgrxJsonApiStore = {\n  isCreating: 0,\n  isReading: 0,\n  isUpdating: 0,\n  isDeleting: 0,\n  isApplying: 0,\n  data: {},\n  queries: {},\n};\n/**\n * @param {?=} state\n * @param {?=} action\n * @return {?}\n */\nexport function NgrxJsonApiStoreReducer(\n  state: NgrxJsonApiStore = initialNgrxJsonApiState,\n  action: any\n): NgrxJsonApiStore {\n  let /** @type {?} */ newState;\n\n  switch (action.type) {\n    case NgrxJsonApiActionTypes.API_POST_INIT: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        true\n      );\n      newState = {\n        ...state,\n        data: updatedData,\n        isCreating: state.isCreating + 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_GET_INIT: {\n      let /** @type {?} */ query = /** @type {?} */(( action.payload as Query));\n      newState = {\n        ...state,\n        queries: updateQueryParams(state.queries, query),\n        isReading: state.isReading + 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_INIT: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        false\n      );\n      newState = {\n        ...state,\n        data: updatedData,\n        isUpdating: state.isUpdating + 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_INIT: {\n      newState = {\n        ...state,\n        data: updateResourceState(state.data, action.payload, 'DELETED'),\n        isDeleting: state.isDeleting + 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_POST_SUCCESS: {\n      newState = {\n        ...state,\n        data: updateStoreDataFromPayload(\n          state.data,\n          action.payload.jsonApiData\n        ),\n        isCreating: state.isCreating - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_GET_SUCCESS: {\n      newState = {\n        ...state,\n        data: updateStoreDataFromPayload(\n          state.data,\n          action.payload.jsonApiData\n        ),\n        queries: updateQueryResults(\n          state.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n        isReading: state.isReading - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_SUCCESS: {\n      newState = {\n        ...state,\n        data: updateStoreDataFromPayload(\n          state.data,\n          action.payload.jsonApiData\n        ),\n        isUpdating: state.isUpdating - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_SUCCESS: {\n      newState = {\n        ...state,\n        data: deleteStoreResources(state.data, action.payload.query),\n        queries: updateQueriesForDeletedResource(state.queries, {\n          id: action.payload.query.id,\n          type: action.payload.query.type,\n        }),\n        isDeleting: state.isDeleting - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_QUERY_REFRESH: {\n      // clear result ids and wait until new data is fetched (triggered by effect)\n      newState = {\n        ...state,\n        queries: clearQueryResult(state.queries, action.payload),\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_POST_FAIL: {\n      newState = {\n        ...state,\n        data: updateResourceErrorsForQuery(\n          state.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isCreating: state.isCreating - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_GET_FAIL: {\n      newState = {\n        ...state,\n        queries: updateQueryErrors(\n          state.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n        isReading: state.isReading - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_FAIL: {\n      newState = {\n        ...state,\n        data: updateResourceErrorsForQuery(\n          state.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isUpdating: state.isUpdating - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_FAIL: {\n      newState = {\n        ...state,\n        data: updateResourceErrorsForQuery(\n          state.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isDeleting: state.isDeleting - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.REMOVE_QUERY: {\n      let /** @type {?} */ queryId = /** @type {?} */(( action.payload as string));\n      newState = { ...state, queries: removeQuery(state.queries, queryId) };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.LOCAL_QUERY_INIT: {\n      let /** @type {?} */ query = /** @type {?} */(( action.payload as Query));\n      newState = { ...state, queries: updateQueryParams(state.queries, query) };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.MODIFY_STORE_RESOURCE_ERRORS: {\n      let /** @type {?} */ payload = /** @type {?} */(( action.payload as ModifyStoreResourceErrorsPayload));\n      newState = {\n        ...state,\n        data: updateResourceErrors(\n          state.data,\n          payload.resourceId,\n          payload.errors,\n          payload.modificationType\n        ),\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.LOCAL_QUERY_SUCCESS: {\n      newState = {\n        ...state,\n        queries: updateQueryResults(\n          state.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.PATCH_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        false\n      );\n      if (updatedData !== state.data) {\n        newState = { ...state, data: updatedData };\n        return newState;\n      } else {\n        return state;\n      }\n    }\n    case NgrxJsonApiActionTypes.POST_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        true\n      );\n      if (updatedData !== state.data) {\n        newState = { ...state, data: updatedData };\n        return newState;\n      } else {\n        return state;\n      }\n    }\n    case NgrxJsonApiActionTypes.NEW_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        true\n      );\n      updatedData = updateResourceState(updatedData, action.payload, 'NEW');\n      if (updatedData !== state.data) {\n        newState = { ...state, data: updatedData };\n        return newState;\n      } else {\n        return state;\n      }\n    }\n    case NgrxJsonApiActionTypes.DELETE_STORE_RESOURCE: {\n      let /** @type {?} */ resourceId = /** @type {?} */(( action.payload as ResourceIdentifier));\n      if (\n        state.data[resourceId.type] &&\n        state.data[resourceId.type][resourceId.id]\n      ) {\n        let /** @type {?} */ resource = state.data[resourceId.type][resourceId.id];\n\n        if (resource.state === 'NEW' || resource.state === 'CREATED') {\n          // not yet stored on server-side, just delete\n          newState = {\n            ...state,\n            data: removeStoreResource(state.data, resourceId),\n          };\n          return newState;\n        } else {\n          // stored on server, mark for deletion\n          newState = {\n            ...state,\n            data: updateResourceState(state.data, action.payload, 'DELETED'),\n          };\n          return newState;\n        }\n      }\n      return state;\n    }\n    case NgrxJsonApiActionTypes.API_APPLY_INIT: {\n      let /** @type {?} */ pending: Array<StoreResource> = getPendingChanges(state);\n      newState = { ...state, isApplying: state.isApplying + 1 };\n      for (let /** @type {?} */ pendingChange of pending) {\n        if (pendingChange.state === 'CREATED') {\n          newState.isCreating++;\n        } else if (pendingChange.state === 'UPDATED') {\n          newState.isUpdating++;\n        } else if (pendingChange.state === 'DELETED') {\n          newState.isDeleting++;\n        } else {\n          throw new Error('unknown state ' + pendingChange.state);\n        }\n      }\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_APPLY_SUCCESS:\n    case NgrxJsonApiActionTypes.API_APPLY_FAIL: {\n      // apply all the committed or failed changes\n      let /** @type {?} */ actions = /** @type {?} */(( action.payload as Array<Action>));\n      newState = state;\n      for (let /** @type {?} */ commitAction of actions) {\n        newState = NgrxJsonApiStoreReducer(newState, commitAction);\n      }\n      newState = { ...newState, isApplying: state['isApplying'] - 1 };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_ROLLBACK: {\n      newState = { ...state, data: rollbackStoreResources(state.data) };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.CLEAR_STORE: {\n      return initialNgrxJsonApiState;\n    }\n    case NgrxJsonApiActionTypes.COMPACT_STORE: {\n      return compactStore(state);\n    }\n    default:\n      return state;\n  }\n}\n\nexport const /** @type {?} */ reducer: ActionReducerMap<any> = {\n  api: NgrxJsonApiStoreReducer,\n};\n","import { Injectable, OnDestroy } from '@angular/core';\n\nimport { HttpResponse } from '@angular/common/http';\n\nimport * as _ from 'lodash/index';\n\nimport { Action, Store } from '@ngrx/store';\nimport { Effect, Actions } from '@ngrx/effects';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/concatAll';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/mapTo';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/switchMapTo';\nimport'rxjs/add/operator/take';\nimport'rxjs/add/operator/toArray';\nimport'rxjs/add/operator/withLatestFrom';\n\nimport {\n  ApiGetInitAction,\n  ApiApplyFailAction,\n  ApiApplySuccessAction,\n  ApiPostInitAction,\n  ApiPostFailAction,\n  ApiPostSuccessAction,\n  ApiDeleteInitAction,\n  ApiDeleteFailAction,\n  ApiDeleteSuccessAction,\n  ApiGetFailAction,\n  ApiGetSuccessAction,\n  ApiPatchInitAction,\n  ApiPatchFailAction,\n  ApiPatchSuccessAction,\n  NgrxJsonApiActionTypes,\n  LocalQueryInitAction,\n  LocalQuerySuccessAction,\n  LocalQueryFailAction,\n  ApiQueryRefreshAction,\n} from './actions';\nimport { NgrxJsonApi } from './api';\nimport { NgrxJsonApiSelectors } from './selectors';\nimport {\n  NgrxJsonApiStore,\n  OperationType,\n  Payload,\n  Resource,\n  ResourceError,\n  ResourceIdentifier,\n  Query,\n  ResourceState,\n  StoreResource,\n} from './interfaces';\nimport {\n  sortPendingChanges,\n  generatePayload,\n  getPendingChanges,\n} from './utils';\nexport class NgrxJsonApiEffects implements OnDestroy {\n  \n  createResource$: Observable<Action> = this.actions$\n    .ofType<ApiPostInitAction>(NgrxJsonApiActionTypes.API_POST_INIT)\n    .map(it => this.generatePayload(it.payload, 'POST'))\n    .mergeMap((payload: Payload) => {\n      return this.jsonApi\n        .create(payload.query, payload.jsonApiData)\n        .mapTo(new ApiPostSuccessAction(payload))\n        .catch(error =>\n          Observable.of(\n            new ApiPostFailAction(this.toErrorPayload(payload.query, error))\n          )\n        );\n    });\n\n  \n  updateResource$ = this.actions$\n    .ofType<ApiPatchInitAction>(NgrxJsonApiActionTypes.API_PATCH_INIT)\n    .map(it => this.generatePayload(it.payload, 'PATCH'))\n    .mergeMap((payload: Payload) => {\n      return this.jsonApi\n        .update(payload.query, payload.jsonApiData)\n        .mapTo(new ApiPatchSuccessAction(payload))\n        .catch(error =>\n          Observable.of(\n            new ApiPatchFailAction(this.toErrorPayload(payload.query, error))\n          )\n        );\n    });\n\n  \n  readResource$ = this.actions$\n    .ofType<ApiGetInitAction>(NgrxJsonApiActionTypes.API_GET_INIT)\n    .map(it => it.payload)\n    .mergeMap((query: Query) => {\n      return this.jsonApi\n        .find(query)\n        .map((response: HttpResponse<any>) => response.body)\n        .map(\n          data =>\n            new ApiGetSuccessAction({\n              jsonApiData: data,\n              query: query,\n            })\n        )\n        .catch(error =>\n          Observable.of(new ApiGetFailAction(this.toErrorPayload(query, error)))\n        );\n    });\n\n  \n  queryStore$ = this.actions$\n    .ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.LOCAL_QUERY_INIT)\n    .map(it => it.payload)\n    .mergeMap((query: Query) => {\n      return this.store\n        .let(this.selectors.getNgrxJsonApiStore$())\n        .let(this.selectors.queryStore$(query))\n        .map(\n          results =>\n            new LocalQuerySuccessAction({\n              jsonApiData: { data: results },\n              query: query,\n            })\n        )\n        .catch(error =>\n          Observable.of(\n            new LocalQueryFailAction(this.toErrorPayload(query, error))\n          )\n        );\n    });\n\n  \n  deleteResource$ = this.actions$\n    .ofType<ApiDeleteInitAction>(NgrxJsonApiActionTypes.API_DELETE_INIT)\n    .map(it => it.payload)\n    .map<ResourceIdentifier, Payload>(it => this.generatePayload(it, 'DELETE'))\n    .mergeMap((payload: Payload) => {\n      return this.jsonApi\n        .delete(payload.query)\n        .map((response: HttpResponse<any>) => response.body)\n        .map(\n          data =>\n            new ApiDeleteSuccessAction({\n              jsonApiData: data,\n              query: payload.query,\n            })\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiDeleteFailAction(this.toErrorPayload(payload.query, error))\n          )\n        );\n    });\n\n  \n  triggerReadOnQueryRefresh$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_QUERY_REFRESH)\n    .withLatestFrom(this.store, (action: any, store) => {\n      let /** @type {?} */ queryId = action.payload;\n      let /** @type {?} */ state = /** @type {?} */(( store['NgrxJsonApi']['api'] as NgrxJsonApiStore));\n      let /** @type {?} */ query = state.queries[queryId].query;\n      return new ApiGetInitAction(query);\n    });\n\n  \n  refreshQueriesOnDelete$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_DELETE_SUCCESS)\n    .withLatestFrom(this.store, (action: any, store) => {\n      let /** @type {?} */ id = { id: action.payload.query.id, type: action.payload.query.type };\n      if (!id.id || !id.type) {\n        throw new Error(\n          'API_DELETE_SUCCESS did not carry resource id and type information'\n        );\n      }\n\n      let /** @type {?} */ state = /** @type {?} */(( store['NgrxJsonApi']['api'] as NgrxJsonApiStore));\n\n      let /** @type {?} */ actions = [];\n      for (let /** @type {?} */ queryId in state.queries) {\n        if (state.queries.hasOwnProperty(queryId)) {\n          let /** @type {?} */ query = state.queries[queryId];\n          if (query.resultIds) {\n            let /** @type {?} */ needsRefresh =\n              _.findIndex(query.resultIds, function(o) {\n                return _.isEqual(id, o);\n              }) !== -1;\n\n            let /** @type {?} */ sameIdRequested =\n              query.query.id === id.id && query.query.type === id.type;\n            if (sameIdRequested && (needsRefresh || _.isEmpty(query.errors))) {\n              throw new Error(\n                'store is in invalid state, queries for deleted' +\n                  ' resource should have been emptied and marked with 404 error'\n              );\n            }\n\n            if (needsRefresh) {\n              actions.push(new ApiQueryRefreshAction(queryId));\n            }\n          }\n        }\n      }\n      return actions;\n    })\n    .flatMap(actions => Observable.of(...actions));\n\n  \n  applyResources$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_APPLY_INIT)\n    .mergeMap(() =>\n      this.store.let(this.selectors.getNgrxJsonApiStore$()).take(1)\n    )\n    .mergeMap((ngrxstore: NgrxJsonApiStore) => {\n      let /** @type {?} */ pending: Array<StoreResource> = getPendingChanges(ngrxstore);\n      if (pending.length > 0) {\n        pending = sortPendingChanges(pending);\n\n        let /** @type {?} */ actions: Array<Observable<Action>> = [];\n        for (let /** @type {?} */ pendingChange of pending) {\n          if (pendingChange.state === 'CREATED') {\n            let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'POST');\n            actions.push(\n              this.jsonApi\n                .create(payload.query, payload.jsonApiData)\n                .mapTo(new ApiPostSuccessAction(payload))\n                .catch(error =>\n                  Observable.of(\n                    new ApiPostFailAction(\n                      this.toErrorPayload(payload.query, error)\n                    )\n                  )\n                )\n            );\n          } else if (pendingChange.state === 'UPDATED') {\n            // prepare payload, omit links and meta information\n            let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'PATCH');\n            actions.push(\n              this.jsonApi\n                .update(payload.query, payload.jsonApiData)\n                .map(\n                  data =>\n                    new ApiPatchSuccessAction({\n                      jsonApiData: data,\n                      query: payload.query,\n                    })\n                )\n                .catch(error =>\n                  Observable.of(\n                    new ApiPatchFailAction(\n                      this.toErrorPayload(payload.query, error)\n                    )\n                  )\n                )\n            );\n          } else if (pendingChange.state === 'DELETED') {\n            let /** @type {?} */ payload: Payload = this.generatePayload(\n              pendingChange,\n              'DELETE'\n            );\n            actions.push(\n              this.jsonApi\n                .delete(payload.query)\n                .map(\n                  data =>\n                    new ApiDeleteSuccessAction({\n                      jsonApiData: data,\n                      query: payload.query,\n                    })\n                )\n                .catch(error =>\n                  Observable.of(\n                    new ApiDeleteFailAction(\n                      this.toErrorPayload(payload.query, error)\n                    )\n                  )\n                )\n            );\n          } else {\n            throw new Error('unknown state ' + pendingChange.state);\n          }\n        }\n\n        return Observable.of(...actions)\n          .concatAll()\n          .toArray()\n          .map(actions => this.toApplyAction(actions));\n      } else {\n        return Observable.of(new ApiApplySuccessAction([]));\n      }\n    });\n/**\n * @param {?} actions$\n * @param {?} jsonApi\n * @param {?} store\n * @param {?} selectors\n */\nconstructor(\nprivate actions$: Actions,\nprivate jsonApi: NgrxJsonApi,\nprivate store: Store<any>,\nprivate selectors: NgrxJsonApiSelectors<any>\n  ) {}\n/**\n * @return {?}\n */\nngOnDestroy() {}\n/**\n * @param {?} actions\n * @return {?}\n */\nprivate toApplyAction(actions: Array<Action>): any {\n    for (let /** @type {?} */ action of actions) {\n      if (\n        action.type === NgrxJsonApiActionTypes.API_POST_FAIL ||\n        action.type === NgrxJsonApiActionTypes.API_PATCH_FAIL ||\n        action.type === NgrxJsonApiActionTypes.API_DELETE_FAIL\n      ) {\n        return new ApiApplyFailAction(actions);\n      }\n    }\n    return new ApiApplySuccessAction(actions);\n  }\n/**\n * @param {?} query\n * @param {?} response\n * @return {?}\n */\nprivate toErrorPayload(\n    query: Query,\n    response: HttpResponse<any> | any\n  ): Payload {\n    let /** @type {?} */ contentType = null;\n    if (response && response.headers) {\n      contentType = response.headers.get('Content-Type');\n    }\n    let /** @type {?} */ document = null;\n    if (contentType === 'application/vnd.api+json') {\n      document = response;\n    }\n    if (document && document.errors && document.errors.length > 0) {\n      return {\n        query: query,\n        jsonApiData: document,\n      };\n    } else {\n      // transform http to json api error\n      let /** @type {?} */ errors: Array<ResourceError> = [];\n      let /** @type {?} */ error: ResourceError = {\n        status: String(response.status),\n        code: response.statusText,\n      };\n\n      errors.push(error);\n      // got json api errors\n\n      return {\n        query: query,\n        jsonApiData: {\n          errors: errors,\n        },\n      };\n    }\n  }\n/**\n * @param {?} resource\n * @param {?} operation\n * @return {?}\n */\nprivate generatePayload(\n    resource: Resource,\n    operation: OperationType\n  ): Payload {\n    return generatePayload(resource, operation);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Actions, },\n{type: NgrxJsonApi, },\n{type: Store, },\n{type: NgrxJsonApiSelectors, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'createResource$': [{ type: Effect },],\n'updateResource$': [{ type: Effect },],\n'readResource$': [{ type: Effect },],\n'queryStore$': [{ type: Effect },],\n'deleteResource$': [{ type: Effect },],\n'triggerReadOnQueryRefresh$': [{ type: Effect },],\n'refreshQueriesOnDelete$': [{ type: Effect },],\n'applyResources$': [{ type: Effect },],\n};\n}\n\nfunction NgrxJsonApiEffects_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiEffects.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgrxJsonApiEffects.ctorParameters;\n/** @type {?} */\nNgrxJsonApiEffects.propDecorators;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.createResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.updateResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.readResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.queryStore$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.deleteResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.triggerReadOnQueryRefresh$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.refreshQueriesOnDelete$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.applyResources$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.actions$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.jsonApi;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.store;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.selectors;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import * as _ from 'lodash/index';\n\nimport { Observable } from 'rxjs/Observable';\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport'rxjs/add/observable/concat';\nimport'rxjs/add/observable/throw';\nimport'rxjs/add/operator/combineLatest';\nimport'rxjs/add/operator/concat';\nimport'rxjs/add/operator/concatMap';\nimport'rxjs/add/operator/distinctUntilChanged';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/let';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/observable/zip';\n\nimport { Store } from '@ngrx/store';\n\nimport {\n  NgrxJsonApiConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  NgrxJsonApiStoreResources,\n  NgrxJsonApiStoreQueries,\n  Resource,\n  ResourceIdentifier,\n  ResourceError,\n  Query,\n  StoreResource,\n  ManyQueryResult,\n  OneQueryResult,\n  StoreQuery,\n} from './interfaces';\nimport {\n  filterResources,\n  denormaliseStoreResource,\n  denormaliseStoreResources,\n} from './utils';\nexport class NgrxJsonApiSelectors<T> {\n/**\n * @param {?} config\n */\nconstructor(public config: NgrxJsonApiConfig) {}\n/**\n * @return {?}\n */\npublic getNgrxJsonApiStore$() {\n    return (state$: Store<any>) => {\n      return state$.select('NgrxJsonApi').select('api');\n    };\n  }\n/**\n * @return {?}\n */\npublic getStoreData$() {\n    return (state$: Store<NgrxJsonApiStore>) => {\n      return state$.select('data');\n    };\n  }\n/**\n * @param {?} type\n * @return {?}\n */\npublic getStoreResourceOfType$(type: string) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreData$())\n        .map(resources => (resources ? resources[type] : undefined));\n    };\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic queryStore$(query: Query) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      let /** @type {?} */ selected$: Observable<any>;\n      if (!query.type) {\n        return state$.map(() => Observable.throw('Unknown query'));\n      } else if (query.type && query.id) {\n        selected$ = state$.let(\n          this.getStoreResource$({ type: query.type, id: query.id })\n        );\n      } else {\n        selected$ = state$\n          .let(this.getStoreResourceOfType$(query.type))\n          .combineLatest(\n            state$.let(this.getStoreData$()),\n            (\n              resources: NgrxJsonApiStoreResources,\n              storeData: NgrxJsonApiStoreData\n            ) =>\n              filterResources(\n                resources,\n                storeData,\n                query,\n                this.config.resourceDefinitions,\n                this.config.filteringConfig\n              )\n          );\n      }\n      return selected$.distinctUntilChanged();\n    };\n  }\n/**\n * @return {?}\n */\npublic getStoreQueries$() {\n    return (state$: Store<NgrxJsonApiStore>) => {\n      return state$.select('queries');\n    };\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic getResourceQuery$(queryId: string) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreQueries$())\n        .map(it => (it ? it[queryId] : undefined));\n    };\n  }\n/**\n * @param {?} identifier\n * @return {?}\n */\npublic getStoreResource$(identifier: ResourceIdentifier) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreResourceOfType$(identifier.type))\n        .map(\n          resources => /** @type {?} */((\n            (resources ? resources[identifier.id] : undefined) as StoreResource))\n        );\n    };\n  }\n/**\n * @param {?} queryId\n * @param {?} denormalize\n * @return {?}\n */\npublic getManyResults$(queryId: string, denormalize: boolean) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$.map(state => {\n        let /** @type {?} */ storeQuery = state.queries[queryId];\n        if (!storeQuery) {\n          return undefined;\n        }\n\n        if (_.isEmpty(storeQuery.resultIds)) {\n          let /** @type {?} */ queryResult: ManyQueryResult = {\n            ...storeQuery,\n            data: _.isUndefined(storeQuery.resultIds) ? undefined : [],\n          };\n          return queryResult;\n        } else {\n          let /** @type {?} */ results = storeQuery.resultIds.map(\n            id => (state.data[id.type] ? state.data[id.type][id.id] : undefined)\n          );\n          if (denormalize) {\n            results = denormaliseStoreResources(results, state.data);\n          }\n          return {\n            ...storeQuery,\n            data: /** @type {?} */(( results as Array<StoreResource>)),\n          };\n        }\n      });\n    };\n  }\n/**\n * @param {?} queryId\n * @param {?} denormalize\n * @return {?}\n */\npublic getOneResult$(queryId: string, denormalize: boolean) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$.map(state => {\n        let /** @type {?} */ storeQuery = state.queries[queryId];\n        if (!storeQuery) {\n          return undefined;\n        }\n\n        if (_.isEmpty(storeQuery.resultIds)) {\n          let /** @type {?} */ queryResult: ManyQueryResult = {\n            ...storeQuery,\n            data: _.isUndefined(storeQuery.resultIds) ? undefined : null,\n          };\n          return queryResult;\n        } else {\n          if (storeQuery.resultIds.length >= 2) {\n            throw new Error(\n              'expected single result for query ' + storeQuery.query.queryId\n            );\n          }\n\n          let /** @type {?} */ resultId = storeQuery.resultIds[0];\n          let /** @type {?} */ result = state.data[resultId.type]\n            ? state.data[resultId.type][resultId.id]\n            : undefined;\n          if (denormalize) {\n            result = denormaliseStoreResource(result, state.data);\n          }\n          return {\n            ...storeQuery,\n            data: result,\n          };\n        }\n      });\n    };\n  }\n/**\n * @param {?} store\n * @param {?} identifier\n * @return {?}\n */\npublic getPersistedResource$(\n    store: Store<T>,\n    identifier: ResourceIdentifier\n  ) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreResource$(identifier))\n        .map(it => (it ? it.persistedResource : undefined));\n    };\n  }\n}\n\nfunction NgrxJsonApiSelectors_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiSelectors.prototype.config;\n}\n\n","import * as _ from 'lodash/index';\n\nimport {\n  HttpHeaders,\n  HttpClient,\n  HttpRequest,\n  // required for building\n  HttpHeaderResponse,\n  HttpProgressEvent,\n  HttpResponse,\n  HttpSentEvent,\n  HttpUserEvent,\n} from '@angular/common/http';\n\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/observable/throw';\n\nimport {\n  Document,\n  NgrxJsonApiConfig,\n  OperationType,\n  ResourceDefinition,\n  Query,\n  QueryParams,\n} from './interfaces';\nimport {\n  generateIncludedQueryParams,\n  generateFieldsQueryParams,\n  generateFilteringQueryParams,\n  generateSortingQueryParams,\n  generateQueryParams,\n} from './utils';\nexport class NgrxJsonApi {\npublic headers: HttpHeaders = new HttpHeaders({\n    'Content-Type': 'application/vnd.api+json',\n    Accept: 'application/vnd.api+json',\n  });\npublic requestUrl: string;\npublic definitions = this.config.resourceDefinitions;\n/**\n * @param {?} http\n * @param {?} config\n */\nconstructor(private http: HttpClient,\npublic config: NgrxJsonApiConfig) {}\n/**\n * @param {?} query\n * @param {?} operation\n * @return {?}\n */\nprivate urlBuilder(query: Query, operation: OperationType) {\n    switch (operation) {\n      case 'GET': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        } else if (query.type) {\n          return this.collectionUrlFor(query.type);\n        }\n      }\n      case 'DELETE': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        }\n      }\n      case 'PATCH': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        }\n      }\n      case 'POST': {\n        return this.collectionUrlFor(query.type);\n      }\n    }\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate collectionPathFor(type: string) {\n    // assume that type == collectionPath if not configured otherwise\n    let /** @type {?} */ definition = _.find(this.definitions, { type: type });\n    if (definition) {\n      return `${definition.collectionPath}`;\n    } else {\n      return type;\n    }\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate collectionUrlFor(type: string) {\n    let /** @type {?} */ collectionPath = this.collectionPathFor(type);\n    return `${this.config.apiUrl}/${collectionPath}`;\n  }\n/**\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nprivate resourcePathFor(type: string, id: string) {\n    let /** @type {?} */ collectionPath = this.collectionPathFor(type);\n    return `${collectionPath}/${encodeURIComponent(id)}`;\n  }\n/**\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nprivate resourceUrlFor(type: string, id: string) {\n    let /** @type {?} */ resourcePath = this.resourcePathFor(type, id);\n    return `${this.config.apiUrl}/${resourcePath}`;\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic find(query: Query) {\n    let /** @type {?} */ _generateIncludedQueryParams = generateIncludedQueryParams;\n    let /** @type {?} */ _generateFilteringQueryParams = generateFilteringQueryParams;\n    let /** @type {?} */ _generateFieldsQueryParams = generateFieldsQueryParams;\n    let /** @type {?} */ _generateSortingQueryParams = generateSortingQueryParams;\n    let /** @type {?} */ _generateQueryParams = generateQueryParams;\n\n    if (this.config.hasOwnProperty('urlBuilder')) {\n      let /** @type {?} */ urlBuilder = this.config.urlBuilder;\n\n      if (urlBuilder.generateIncludedQueryParams) {\n        _generateIncludedQueryParams = urlBuilder.generateIncludedQueryParams;\n      }\n      if (urlBuilder.generateFilteringQueryParams) {\n        _generateFilteringQueryParams = urlBuilder.generateFilteringQueryParams;\n      }\n      if (urlBuilder.generateFieldsQueryParams) {\n        _generateFieldsQueryParams = urlBuilder.generateFieldsQueryParams;\n      }\n      if (urlBuilder.generateSortingQueryParams) {\n        _generateSortingQueryParams = urlBuilder.generateSortingQueryParams;\n      }\n      if (urlBuilder.generateQueryParams) {\n        _generateQueryParams = urlBuilder.generateQueryParams;\n      }\n    }\n\n    let /** @type {?} */ queryParams = '';\n    let /** @type {?} */ includedParam = '';\n    let /** @type {?} */ filteringParams = '';\n    let /** @type {?} */ sortingParams = '';\n    let /** @type {?} */ fieldsParams = '';\n    let /** @type {?} */ offsetParams = '';\n    let /** @type {?} */ limitParams = '';\n\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (query.hasOwnProperty('params') && !_.isEmpty(query.params)) {\n      if (_.hasIn(query.params, 'include')) {\n        includedParam = _generateIncludedQueryParams(query.params.include);\n      }\n      if (_.hasIn(query.params, 'filtering')) {\n        filteringParams = _generateFilteringQueryParams(query.params.filtering);\n      }\n      if (_.hasIn(query.params, 'sorting')) {\n        sortingParams = _generateSortingQueryParams(query.params.sorting);\n      }\n      if (_.hasIn(query.params, 'fields')) {\n        fieldsParams = _generateFieldsQueryParams(query.params.fields);\n      }\n      if (_.hasIn(query.params, 'limit')) {\n        limitParams = 'page[limit]=' + query.params.limit;\n      }\n      if (_.hasIn(query.params, 'offset')) {\n        offsetParams = 'page[offset]=' + query.params.offset;\n      }\n    }\n    queryParams = _generateQueryParams(\n      includedParam,\n      filteringParams,\n      sortingParams,\n      fieldsParams,\n      offsetParams,\n      limitParams\n    );\n\n    let /** @type {?} */ requestOptions = {\n      method: 'GET',\n      url: this.urlBuilder(query, 'GET') + queryParams,\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @param {?} document\n * @return {?}\n */\npublic create(query: Query, document: Document) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (typeof document === undefined) {\n      return Observable.throw('Data not found');\n    }\n\n    let /** @type {?} */ requestOptions = {\n      method: 'POST',\n      url: this.urlBuilder(query, 'POST'),\n      body: JSON.stringify({ data: document.data }),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @param {?} document\n * @return {?}\n */\npublic update(query: Query, document: Document) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (typeof document === undefined) {\n      return Observable.throw('Data not found');\n    }\n    let /** @type {?} */ requestOptions = {\n      method: 'PATCH',\n      url: this.urlBuilder(query, 'PATCH'),\n      body: JSON.stringify({ data: document.data }),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic delete(query: Query) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    let /** @type {?} */ requestOptions = {\n      method: 'DELETE',\n      url: this.urlBuilder(query, 'DELETE'),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} requestOptions\n * @return {?}\n */\nprivate request(requestOptions: any) {\n    let /** @type {?} */ request: HttpRequest<any>;\n    let /** @type {?} */ newRequestOptions = {\n      ...requestOptions,\n      headers: this.headers,\n      observe: 'response',\n    };\n\n    if (requestOptions.method === 'GET') {\n      let { method, url, ...init } = newRequestOptions;\n      request = new HttpRequest(method, url, init);\n    } else if (requestOptions.method === 'POST') {\n      let { method, url, body, ...init } = newRequestOptions;\n      request = new HttpRequest(method, url, body, init);\n    } else if (requestOptions.method === 'PATCH') {\n      let { method, url, body, ...init } = newRequestOptions;\n      request = new HttpRequest(method, url, body, init);\n    } else if (requestOptions.method === 'DELETE') {\n      let { method, url, ...init } = newRequestOptions;\n      request = new HttpRequest(method, url, init);\n    }\n    return this.http.request(request);\n  }\n}\n\nfunction NgrxJsonApi_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApi.prototype.headers;\n/** @type {?} */\nNgrxJsonApi.prototype.requestUrl;\n/** @type {?} */\nNgrxJsonApi.prototype.definitions;\n/** @type {?} */\nNgrxJsonApi.prototype.http;\n/** @type {?} */\nNgrxJsonApi.prototype.config;\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/let';\n\nimport { NgrxJsonApiService } from './services';\nimport { Resource, ResourceIdentifier, StoreResource } from './interfaces';\nexport class SelectStoreResourcePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} id\n * @return {?}\n */\ntransform(id: ResourceIdentifier): Observable<StoreResource> {\n    return this.service.selectStoreResource(id);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'jaSelectStoreResource' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction SelectStoreResourcePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectStoreResourcePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectStoreResourcePipe.ctorParameters;\n/** @type {?} */\nSelectStoreResourcePipe.prototype.service;\n}\n\nexport class DenormaliseStoreResourcePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} obs\n * @return {?}\n */\ntransform(\n    obs: Observable<StoreResource> | Observable<StoreResource[]>\n  ): Observable<StoreResource> | Observable<StoreResource[]> {\n    return this.service.denormaliseResource(obs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'denormaliseStoreResource' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction DenormaliseStoreResourcePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDenormaliseStoreResourcePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDenormaliseStoreResourcePipe.ctorParameters;\n/** @type {?} */\nDenormaliseStoreResourcePipe.prototype.service;\n}\n\nexport class GetDenormalisedValuePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} path\n * @param {?} storeResource\n * @return {?}\n */\ntransform(path: string, storeResource: StoreResource): any {\n    return this.service.getDenormalisedValue(path, storeResource);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'getDenormalisedValue' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction GetDenormalisedValuePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nGetDenormalisedValuePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGetDenormalisedValuePipe.ctorParameters;\n/** @type {?} */\nGetDenormalisedValuePipe.prototype.service;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import * as _ from 'lodash/index';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/finally';\n\nimport { Store } from '@ngrx/store';\n\nimport { NgrxJsonApiSelectors } from './selectors';\nimport {\n  ApiApplyInitAction,\n  ApiPostInitAction,\n  ApiGetInitAction,\n  ApiPatchInitAction,\n  ApiDeleteInitAction,\n  DeleteStoreResourceAction,\n  PatchStoreResourceAction,\n  PostStoreResourceAction,\n  RemoveQueryAction,\n  LocalQueryInitAction,\n  ClearStoreAction,\n  CompactStoreAction,\n  ApiQueryRefreshAction,\n  ModifyStoreResourceErrorsAction,\n  NewStoreResourceAction,\n} from './actions';\nimport {\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  Resource,\n  ResourceIdentifier,\n  Query,\n  QueryResult,\n  OneQueryResult,\n  ManyQueryResult,\n  StoreResource,\n  ResourceError,\n} from './interfaces';\nimport {\n  denormaliseStoreResource,\n  denormaliseStoreResources,\n  getDenormalisedPath,\n  getDenormalisedValue,\n  uuid,\n} from './utils';\n\nexport interface FindOptions {\n  query: Query;\n  fromServer?: boolean;\n  denormalise?: boolean;\n}\n\nexport interface PutQueryOptions {\n  query: Query;\n  fromServer?: boolean;\n}\n\nexport interface PostResourceOptions {\n  resource: Resource;\n  toRemote?: boolean;\n}\n\nexport interface PatchResourceOptions {\n  resource: Resource;\n  toRemote?: boolean;\n}\n\nexport interface NewResourceOptions {\n  resource: Resource;\n}\n\nexport interface DeleteResourceOptions {\n  resourceId: ResourceIdentifier;\n  toRemote?: boolean;\n}\n\n/**\n * This internface is deprecated, do no longer use.\n */\nexport interface Options {\n  query?: Query;\n  denormalise?: boolean;\n  fromServer?: boolean;\n  resource?: Resource;\n  toRemote?: boolean;\n  resourceId?: ResourceIdentifier;\n}\nexport class NgrxJsonApiService {\nprivate test = true;\n/**\n * Keeps current snapshot of the store to allow fast access to resources.\n */\nprivate storeSnapshot: NgrxJsonApiStore;\n/**\n * @param {?} store\n * @param {?} selectors\n */\nconstructor(\nprivate store: Store<any>,\nprivate selectors: NgrxJsonApiSelectors<any>\n  ) {\n    this.store\n      .let(this.selectors.getNgrxJsonApiStore$())\n      .subscribe(it => (this.storeSnapshot = it as NgrxJsonApiStore));\n  }\n/**\n * @param {?} options\n * @return {?}\n */\npublic findOne(options: FindOptions): Observable<OneQueryResult> {\n    return /** @type {?} */(( <Observable<OneQueryResult>>this.findInternal(options, false)));\n  }\n/**\n * @param {?} options\n * @return {?}\n */\npublic findMany(options: FindOptions): Observable<ManyQueryResult> {\n    return /** @type {?} */(( <Observable<ManyQueryResult>>this.findInternal(options, true)));\n  }\n/**\n * Adds the given query to the store. Any existing query with the same queryId is replaced.\n * Make use of selectResults(...) to fetch the data.\n * @param {?} options\n * @return {?}\n */\npublic putQuery(options: PutQueryOptions) {\n    let /** @type {?} */ query = options.query;\n    let /** @type {?} */ fromServer = _.isUndefined(options.fromServer)\n      ? true\n      : options.fromServer;\n\n    if (!query.queryId) {\n      throw new Error('to query must have a queryId');\n    }\n\n    if (fromServer) {\n      this.store.dispatch(new ApiGetInitAction(query));\n    } else {\n      this.store.dispatch(new LocalQueryInitAction(query));\n    }\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic refreshQuery(queryId: string) {\n    this.store.dispatch(new ApiQueryRefreshAction(queryId));\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic removeQuery(queryId: string) {\n    this.store.dispatch(new RemoveQueryAction(queryId));\n  }\n/**\n * @param {?} options\n * @param {?} multi\n * @return {?}\n */\nprivate findInternal(\n    options: FindOptions,\n    multi: boolean\n  ): Observable<QueryResult> {\n    let /** @type {?} */ query = options.query;\n    let /** @type {?} */ fromServer = _.isUndefined(options.fromServer)\n      ? true\n      : options.fromServer;\n    let /** @type {?} */ denormalise = _.isUndefined(options.denormalise)\n      ? false\n      : options.denormalise;\n\n    let /** @type {?} */ newQuery: Query;\n    if (!query.queryId) {\n      newQuery = { ...query, queryId: this.uuid() };\n    } else {\n      newQuery = query;\n    }\n\n    this.putQuery({ query: newQuery, fromServer });\n\n    let /** @type {?} */ queryResult$: Observable<QueryResult>;\n    if (multi) {\n      queryResult$ = this.selectManyResults(newQuery.queryId, denormalise);\n    } else {\n      queryResult$ = this.selectOneResults(newQuery.queryId, denormalise);\n    }\n\n    return /** @type {?} */(( <Observable<QueryResult>>queryResult$.finally(() =>\n      this.removeQuery(newQuery.queryId)\n    )));\n  }\n/**\n * @return {?}\n */\nprivate uuid() {\n    return uuid();\n  }\n/**\n * Gets the current persisted state of the given resources.\n * Consider the use of selectResource(...) to get an observable of the resource.\n * \n * @param {?} identifier\n * @return {?}\n */\npublic getPersistedResourceSnapshot(identifier: ResourceIdentifier) {\n    let /** @type {?} */ snapshot = this.storeSnapshot;\n    if (\n      snapshot.data[identifier.type] &&\n      snapshot.data[identifier.type][identifier.id]\n    ) {\n      return snapshot.data[identifier.type][identifier.id].persistedResource;\n    }\n    return null;\n  }\n/**\n * Gets the current state of the given resources in the store.\n * Consider the use of selectResource(...) to get an observable of the resource.\n * \n * @param {?} identifier\n * @return {?}\n */\npublic getResourceSnapshot(identifier: ResourceIdentifier) {\n    let /** @type {?} */ snapshot = this.storeSnapshot;\n    if (\n      snapshot.data[identifier.type] &&\n      snapshot.data[identifier.type][identifier.id]\n    ) {\n      return snapshot.data[identifier.type][identifier.id];\n    }\n    return null;\n  }\n/**\n * Selects the data of the given query.\n * \n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?} observable holding the data as array of resources.\n */\npublic selectManyResults(\n    queryId: string,\n    denormalize = false\n  ): Observable<ManyQueryResult> {\n    let /** @type {?} */ queryResult$ = this.store\n      .let(this.selectors.getNgrxJsonApiStore$())\n      .let(this.selectors.getManyResults$(queryId, denormalize));\n    return queryResult$;\n  }\n/**\n * Selects the data of the given query.\n * \n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?} observable holding the data as array of resources.\n */\npublic selectOneResults(\n    queryId: string,\n    denormalize = false\n  ): Observable<OneQueryResult> {\n    let /** @type {?} */ queryResult$ = this.store\n      .let(this.selectors.getNgrxJsonApiStore$())\n      .let(this.selectors.getOneResult$(queryId, denormalize));\n    return /** @type {?} */(( queryResult$ as Observable<OneQueryResult>));\n  }\n/**\n * @param {?} identifier of the resource\n * @return {?} observable of the resource\n */\npublic selectStoreResource(\n    identifier: ResourceIdentifier\n  ): Observable<StoreResource> {\n    return this.store.let(this.selectors.getStoreResource$(identifier));\n  }\n/**\n * @param {?} storeResource$\n * @return {?}\n */\npublic denormaliseResource(\n    storeResource$: Observable<StoreResource> | Observable<StoreResource[]>\n  ): Observable<StoreResource> | Observable<StoreResource[]> {\n    return /** @type {?} */(( <\n      | Observable<StoreResource>\n      | Observable<StoreResource[]>>storeResource$.combineLatest(\n      this.store\n        .let(this.selectors.getNgrxJsonApiStore$())\n        .let(this.selectors.getStoreData$()),\n      (\n        storeResource: StoreResource | StoreResource[],\n        storeData: NgrxJsonApiStoreData\n      ) => {\n        if (_.isArray(storeResource)) {\n          return denormaliseStoreResources( /** @type {?} */((\n            storeResource as Array<StoreResource>)),\n            storeData\n          );\n        } else {\n          let /** @type {?} */ resource = /** @type {?} */(( storeResource as StoreResource));\n          return /** @type {?} */(( denormaliseStoreResource(resource, storeData) as StoreResource));\n        }\n      }\n    )));\n  }\n/**\n * @param {?} path\n * @param {?} resourceType\n * @return {?}\n */\npublic getDenormalisedPath(path: string, resourceType: string): string {\n    let /** @type {?} */ pathSeparator = /** @type {?} */(( _.get(\n      this.selectors.config,\n      'filteringConfig.pathSeparator'\n    ) as string));\n    return getDenormalisedPath(\n      path,\n      resourceType,\n      this.selectors.config.resourceDefinitions,\n      pathSeparator\n    );\n  }\n/**\n * @param {?} path\n * @param {?} storeResource\n * @return {?}\n */\npublic getDenormalisedValue(path: string, storeResource: StoreResource): any {\n    let /** @type {?} */ pathSeparator = /** @type {?} */(( _.get(\n      this.selectors.config,\n      'filteringConfig.pathSeparator'\n    ) as string));\n    return getDenormalisedValue(\n      path,\n      storeResource,\n      this.selectors.config.resourceDefinitions,\n      pathSeparator\n    );\n  }\n/**\n * Updates the given resource in the store with the provided data.\n * Use commit() to send the changes to the remote JSON API endpoint.\n * \n * @param {?} options\n * @return {?}\n */\npublic patchResource(options: PatchResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiPatchInitAction(resource));\n    } else {\n      this.store.dispatch(new PatchStoreResourceAction(resource));\n    }\n  }\n/**\n * Creates a new resources that is hold locally in the store\n * and my later be posted.\n * \n * @param {?} options\n * @return {?}\n */\npublic newResource(options: NewResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    this.store.dispatch(new NewStoreResourceAction(resource));\n  }\n/**\n * Adds the given resource to the store. Any already existing\n * resource with the same id gets replaced. Use commit() to send\n * the changes to the remote JSON API endpoint.\n * \n * @param {?} options\n * @return {?}\n */\npublic postResource(options: PostResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiPostInitAction(resource));\n    } else {\n      this.store.dispatch(new PostStoreResourceAction(resource));\n    }\n  }\n/**\n * Marks the given resource for deletion.\n * \n * @param {?} options\n * @return {?}\n */\npublic deleteResource(options: DeleteResourceOptions) {\n    let /** @type {?} */ resourceId = options.resourceId;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiDeleteInitAction(resourceId));\n    } else {\n      this.store.dispatch(new DeleteStoreResourceAction(resourceId));\n    }\n  }\n/**\n * Applies all pending changes to the remote JSON API endpoint.\n * @return {?}\n */\npublic apply() {\n    this.store.dispatch(new ApiApplyInitAction());\n  }\n/**\n * Clear all the contents from the store.\n * @return {?}\n */\npublic clear() {\n    this.store.dispatch(new ClearStoreAction());\n  }\n/**\n * Compacts the store by removing unreferences and unchanges resources.\n * @return {?}\n */\npublic compact() {\n    this.store.dispatch(new CompactStoreAction());\n  }\n/**\n * Adds the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic addResourceErrors(\n    id: ResourceIdentifier,\n    errors: Array<ResourceError>\n  ) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'ADD',\n      })\n    );\n  }\n/**\n * Removes the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic removeResourceErrors(\n    id: ResourceIdentifier,\n    errors: Array<ResourceError>\n  ) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'REMOVE',\n      })\n    );\n  }\n/**\n * Sets the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic setResourceErrors(\n    id: ResourceIdentifier,\n    errors: Array<ResourceError>\n  ) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'SET',\n      })\n    );\n  }\n}\n\nfunction NgrxJsonApiService_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiService.prototype.test;\n/**\n * Keeps current snapshot of the store to allow fast access to resources.\n * @type {?}\n */\nNgrxJsonApiService.prototype.storeSnapshot;\n/** @type {?} */\nNgrxJsonApiService.prototype.store;\n/** @type {?} */\nNgrxJsonApiService.prototype.selectors;\n}\n\n","import * as _ from 'lodash/index';\n\nimport { Actions } from '@ngrx/effects';\n\nimport {\n  Direction,\n  Document,\n  FilteringOperator,\n  FilteringParam,\n  NgrxJsonApiFilteringConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  NgrxJsonApiStoreResources,\n  NgrxJsonApiStoreQueries,\n  OperationType,\n  Payload,\n  Query,\n  Resource,\n  ResourceDefinition,\n  ResourceIdentifier,\n  ResourceError,\n  ResourceState,\n  StoreQuery,\n  SortingParam,\n  StoreResource,\n  ErrorModificationType,\n} from './interfaces';\n\nexport const /** @type {?} */ denormaliseObject = (\n  resource: Resource,\n  storeData: NgrxJsonApiStoreData,\n  bag: NgrxJsonApiStoreData\n): any => {\n  // this function MUST MUTATE resource\n  let /** @type {?} */ denormalised = resource;\n\n  if (resource.hasOwnProperty('relationships')) {\n    Object.keys(resource.relationships).forEach(relation => {\n      resource.relationships[relation]['reference'] = /** @type {?} */(( {} as Resource));\n      let /** @type {?} */ data: ResourceIdentifier | Array<ResourceIdentifier> =\n        resource.relationships[relation].data;\n      // denormalised relation\n      let /** @type {?} */ relationDenorm;\n\n      if (data === null || _.isEqual(data, [])) {\n        relationDenorm = data;\n      } else if (_.isPlainObject(data)) {\n        // hasOne relation\n        let /** @type {?} */ relatedRS = getSingleStoreResource( /** @type {?} */((\n          <ResourceIdentifier>data)),\n          storeData\n        );\n        relationDenorm = denormaliseStoreResource(relatedRS, storeData, bag);\n      } else if (_.isArray(data)) {\n        // hasMany relation\n        let /** @type {?} */ relatedRSs: Array<StoreResource> = getMultipleStoreResource( /** @type {?} */((\n          <ResourceIdentifier[]>data)),\n          storeData\n        );\n        relationDenorm = relatedRSs.map(r =>\n          denormaliseStoreResource(r, storeData, bag)\n        );\n      }\n      let /** @type {?} */ relationDenormPath = 'relationships.' + relation + '.reference';\n      denormalised = /** @type {?} */(( <Resource>_.set(\n        denormalised,\n        relationDenormPath,\n        relationDenorm\n      )));\n    });\n  }\n\n  return denormalised;\n};\n\nexport const /** @type {?} */ denormaliseStoreResources = (\n  items: Array<StoreResource>,\n  storeData: NgrxJsonApiStoreData,\n  bag: any = {}\n): Array<StoreResource> => {\n  let /** @type {?} */ results: Array<StoreResource> = [];\n  for (let /** @type {?} */ item of items) {\n    results.push(denormaliseStoreResource(item, storeData, bag));\n  }\n  return results;\n};\n\nexport const /** @type {?} */ denormaliseStoreResource = (\n  item: StoreResource,\n  storeData: NgrxJsonApiStoreData,\n  bag: any = {}\n): any => {\n  if (!item) {\n    return null;\n  }\n  let /** @type {?} */ storeResource = _.cloneDeep( /** @type {?} */((<StoreResource>item)));\n\n  if (_.isUndefined(bag[storeResource.type])) {\n    bag[storeResource.type] = {};\n  }\n  if (_.isUndefined(bag[storeResource.type][storeResource.id])) {\n    bag[storeResource.type][storeResource.id] = storeResource;\n    storeResource = denormaliseObject(storeResource, storeData, bag);\n    if (storeResource.persistedResource) {\n      storeResource.persistedResource = denormaliseObject(\n        storeResource.persistedResource,\n        storeData,\n        bag\n      );\n    }\n  }\n\n  return bag[storeResource.type][storeResource.id];\n};\n\nexport const /** @type {?} */ getSingleStoreResource = (\n  resourceId: ResourceIdentifier,\n  storeData: NgrxJsonApiStoreData\n): StoreResource => {\n  return _.get(storeData, [resourceId.type, resourceId.id], null);\n};\n\nexport const /** @type {?} */ getMultipleStoreResource = (\n  resourceIds: Array<ResourceIdentifier>,\n  resources: NgrxJsonApiStoreData\n): Array<StoreResource> => {\n  return resourceIds.map(id => getSingleStoreResource(id, resources));\n};\n\nexport const /** @type {?} */ getDenormalisedPath = (\n  path: string,\n  baseResourceType: string,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n): string => {\n  let /** @type {?} */ denormPath: string[] = [];\n  if (_.isUndefined(pathSeparator)) {\n    pathSeparator = '.';\n  }\n  let /** @type {?} */ fields: Array<string> = path.split(pathSeparator);\n  let /** @type {?} */ currentResourceType = baseResourceType;\n  for (let /** @type {?} */ i = 0; i < fields.length; i++) {\n    let /** @type {?} */ definition = _.find(resourceDefinitions, { type: currentResourceType });\n\n    if (_.isUndefined(definition)) {\n      throw new Error('Definition not found');\n    }\n    // if both attributes and relationships are missing, raise an error\n    if (\n      _.isUndefined(definition.attributes) &&\n      _.isUndefined(definition.relationships)\n    ) {\n      throw new Error('Attributes or Relationships must be provided');\n    }\n\n    if (definition.attributes.hasOwnProperty(fields[i])) {\n      denormPath.push('attributes', fields[i]);\n      break;\n    } else if (definition.relationships.hasOwnProperty(fields[i])) {\n      let /** @type {?} */ resourceRelation = definition.relationships[fields[i]];\n      if (resourceRelation.relationType === 'hasMany') {\n        if (i !== fields.length - 1) {\n          throw new Error('Cannot filter past a hasMany relation');\n        } else {\n          denormPath.push('relationships', fields[i], 'reference');\n        }\n      } else {\n        currentResourceType = resourceRelation.type;\n        denormPath.push('relationships', fields[i], 'reference');\n      }\n    } else {\n      throw new Error('Cannot find field in attributes or relationships');\n    }\n  }\n  return denormPath.join(pathSeparator);\n};\n\nexport const /** @type {?} */ getDenormalisedValue = (\n  path: string,\n  storeResource: StoreResource,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n) => {\n  let /** @type {?} */ denormalisedPath = getDenormalisedPath(\n    path,\n    storeResource.type,\n    resourceDefinitions,\n    pathSeparator\n  );\n  return _.get(storeResource, denormalisedPath);\n};\n/**\n * Given two objects, it will merge the second in the first.\n * \n */\nexport const updateResourceObject = (\n  original: Resource,\n  source: Resource\n): Resource => {\n  // by default arrays would make use of concat.\n  function customizer(objValue: any, srcValue: any) {\n    if (_.isArray(objValue)) {\n      return srcValue;\n    }\n  }\n\n  return _.mergeWith({}, original, source, customizer);\n};\n/**\n * Insert a StoreResource given the Resource and the StoreResources\n * \n */\nexport const insertStoreResource = (\n  storeResources: NgrxJsonApiStoreResources,\n  resource: Resource,\n  fromServer: boolean\n): NgrxJsonApiStoreResources => {\n  let newStoreResources = { ...storeResources };\n  if (fromServer) {\n    newStoreResources[resource.id] = {\n      ...resource,\n      persistedResource: resource,\n      state: 'IN_SYNC',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n  } else {\n    newStoreResources[resource.id] = {\n      ...resource,\n      persistedResource: null,\n      state: 'CREATED',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n  }\n  return _.isEqual(storeResources, newStoreResources)\n    ? storeResources\n    : newStoreResources;\n};\n/**\n * Removes a StoreResource given the Resource and the StoreResources\n * \n */\nexport const removeStoreResource = (\n  storeData: NgrxJsonApiStoreData,\n  resourceId: ResourceIdentifier\n): NgrxJsonApiStoreData => {\n  if (storeData[resourceId.type][resourceId.id]) {\n    let newState: NgrxJsonApiStoreData = { ...storeData };\n    newState[resourceId.type] = { ...newState[resourceId.type] };\n    delete newState[resourceId.type][resourceId.id];\n    return newState;\n  }\n  return storeData;\n};\n/**\n * Updates the state of a StoreResource in the store.\n * \n * @param storeData\n * @param resourceId\n * @param resourceState\n * @param loading\n */\nexport const updateResourceState = (\n  storeData: NgrxJsonApiStoreData,\n  resourceId: ResourceIdentifier,\n  resourceState?: ResourceState,\n  loading?: OperationType\n): NgrxJsonApiStoreData => {\n  if (\n    _.isUndefined(storeData[resourceId.type]) ||\n    _.isUndefined(storeData[resourceId.type][resourceId.id])\n  ) {\n    if (resourceState === 'DELETED') {\n      let newState: NgrxJsonApiStoreData = { ...storeData };\n      newState[resourceId.type] = { ...newState[resourceId.type] };\n      newState[resourceId.type][resourceId.id] = {\n        ...newState[resourceId.type][resourceId.id],\n      };\n      newState[resourceId.type][resourceId.id] = {\n        type: resourceId.type,\n        id: resourceId.id,\n        persistedResource: null,\n      } as StoreResource;\n      newState[resourceId.type][resourceId.id].state = 'NOT_LOADED';\n      return newState;\n    } else {\n      return storeData;\n    }\n  }\n  let newState: NgrxJsonApiStoreData = { ...storeData };\n  newState[resourceId.type] = { ...newState[resourceId.type] };\n  newState[resourceId.type][resourceId.id] = {\n    ...newState[resourceId.type][resourceId.id],\n  };\n  if (resourceState !== null) {\n    newState[resourceId.type][resourceId.id].state = resourceState;\n  }\n  if (loading != null) {\n    newState[resourceId.type][resourceId.id].loading = loading;\n  }\n  return newState;\n};\n/**\n * Check equality of resource and ignore additional contents used by the\n * store (state, persistedResource, etc.)\n * @param resource0\n * @param resource1\n */\nexport const isEqualResource = (\n  resource0: Resource,\n  resource1: Resource\n): boolean => {\n  if (resource0 === resource1) {\n    return true;\n  }\n  if (resource0 !== null !== (resource1 !== null)) {\n    return false;\n  }\n\n  return (\n    _.isEqual(resource0.id, resource1.id) &&\n    _.isEqual(resource0.type, resource1.type) &&\n    _.isEqual(resource0.attributes, resource1.attributes) &&\n    _.isEqual(resource0.meta, resource1.meta) &&\n    _.isEqual(resource0.links, resource1.links) &&\n    _.isEqual(resource0.relationships, resource1.relationships)\n  );\n};\n\nexport const /** @type {?} */ updateStoreResource = (\n  state: NgrxJsonApiStoreResources,\n  resource: Resource,\n  fromServer: boolean\n): NgrxJsonApiStoreResources => {\n  let /** @type {?} */ foundStoreResource = state[resource.id];\n  let /** @type {?} */ persistedResource = state[resource.id].persistedResource;\n\n  let /** @type {?} */ newResource: Resource;\n  let /** @type {?} */ newResourceState: ResourceState;\n  if (fromServer) {\n    // form server, override everything\n    // TODO need to handle check and keep local updates?\n    newResource = resource;\n    persistedResource = resource;\n    newResourceState = 'IN_SYNC';\n  } else {\n    let /** @type {?} */ mergedResource = updateResourceObject(foundStoreResource, resource);\n    if (isEqualResource(mergedResource, persistedResource)) {\n      // no changes anymore, do nothing\n      newResource = persistedResource;\n      newResourceState = 'IN_SYNC';\n    } else {\n      // merge changes and mark as CREATED or UPDATED depending on whether\n      // an original version is available\n      newResource = mergedResource;\n      if (persistedResource !== null) {\n        newResourceState = 'UPDATED';\n      } else if (foundStoreResource.state === 'NEW') {\n        newResourceState = 'NEW';\n      } else {\n        newResourceState = 'CREATED';\n      }\n    }\n  }\n\n  let /** @type {?} */ newState = { ...state };\n  newState[resource.id] = /** @type {?} */(( {\n    ...newResource,\n    persistedResource: persistedResource,\n    state: newResourceState,\n    errors: [],\n    loading: false,\n  } as StoreResource));\n\n  return _.isEqual(newState[resource.id], state[resource.id])\n    ? state\n    : newState;\n};\n\nexport const /** @type {?} */ updateQueriesForDeletedResource = (\n  state: NgrxJsonApiStoreQueries,\n  deletedId: ResourceIdentifier\n): NgrxJsonApiStoreQueries => {\n  let /** @type {?} */ newState: NgrxJsonApiStoreQueries = state;\n  for (let /** @type {?} */ queryId in state) {\n    if (state.hasOwnProperty(queryId)) {\n      let /** @type {?} */ queryState = state[queryId];\n      if (\n        queryState.query.id === deletedId.id &&\n        queryState.query.type === deletedId.type\n      ) {\n        // found a query for a resource that was deleted => modify to 404\n        newState = clearQueryResult(newState, queryState.query.queryId);\n        let /** @type {?} */ notFoundError: ResourceError = { code: '404', status: 'Not Found' };\n        newState[queryState.query.queryId].errors = [notFoundError];\n      }\n    }\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ updateResourceErrorsForQuery = (\n  storeData: NgrxJsonApiStoreData,\n  query: Query,\n  document: Document\n): NgrxJsonApiStoreData => {\n  if (!query.type || !query.id || document.data instanceof Array) {\n    throw new Error('invalid parameters');\n  }\n  return updateResourceErrors(\n    storeData,\n    { id: query.id, type: query.type },\n    document.errors,\n    'SET'\n  );\n};\n\nexport const /** @type {?} */ updateResourceErrors = (\n  storeData: NgrxJsonApiStoreData,\n  id: ResourceIdentifier,\n  errors: Array<ResourceError>,\n  modificationType: ErrorModificationType\n): NgrxJsonApiStoreData => {\n  if (!storeData[id.type] || !storeData[id.type][id.id]) {\n    return storeData;\n  }\n  let /** @type {?} */ newState: NgrxJsonApiStoreData = { ...storeData };\n  newState[id.type] = { ...newState[id.type] };\n  let /** @type {?} */ storeResource = { ...newState[id.type][id.id] };\n\n  if (modificationType === 'SET') {\n    storeResource.errors = [];\n    if (errors) {\n      storeResource.errors.push(...errors);\n    }\n  } else if (modificationType === 'ADD') {\n    let /** @type {?} */ currentErrors = storeResource.errors;\n    storeResource.errors = [];\n    if (currentErrors) {\n      storeResource.errors.push(...currentErrors);\n    }\n    if (errors) {\n      storeResource.errors.push(...errors);\n    }\n  } else {\n    let /** @type {?} */ currentErrors = storeResource.errors;\n    storeResource.errors = [];\n    if (currentErrors) {\n      for (let /** @type {?} */ currentError of currentErrors) {\n        let /** @type {?} */ remove =\n          errors && errors.filter(it => _.isEqual(it, currentError)).length > 0;\n        if (!remove) {\n          storeResource.errors.push(currentError);\n        }\n      }\n    }\n  }\n  newState[id.type][id.id] = storeResource;\n  return newState;\n};\n\nexport const /** @type {?} */ rollbackStoreResources = (\n  storeData: NgrxJsonApiStoreData\n): NgrxJsonApiStoreData => {\n  let /** @type {?} */ newState: NgrxJsonApiStoreData = { ...storeData };\n  Object.keys(newState).forEach(type => {\n    newState[type] = { ...newState[type] };\n    Object.keys(newState[type]).forEach(id => {\n      let /** @type {?} */ storeResource = newState[type][id];\n      if (!storeResource.persistedResource) {\n        delete newState[type][id];\n      } else if (storeResource.state !== 'IN_SYNC') {\n        newState[type][id] = /** @type {?} */(( <StoreResource>{\n          ...newState[type][id],\n          state: 'IN_SYNC',\n          resource: newState[type][id].persistedResource,\n        }));\n      }\n    });\n  });\n  return newState;\n};\n\nexport const /** @type {?} */ deleteStoreResources = (\n  storeData: NgrxJsonApiStoreData,\n  query: Query\n) => {\n  let /** @type {?} */ newState = { ...storeData };\n  // if an id is not provided, all resources of the provided type will be deleted\n  if (typeof query.id === 'undefined') {\n    newState[query.type] = {};\n  } else {\n    newState[query.type] = /** @type {?} */(( _.omit(newState[query.type], [\n      query.id,\n    ]) as NgrxJsonApiStoreResources));\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ clearQueryResult = (\n  storeData: NgrxJsonApiStoreQueries,\n  queryId: string\n) => {\n  let /** @type {?} */ newQuery = { ...storeData[queryId] };\n  delete newQuery.resultIds;\n  delete newQuery.errors;\n  delete newQuery.meta;\n  delete newQuery.links;\n\n  let /** @type {?} */ newState = { ...storeData };\n  newState[queryId] = newQuery;\n  return newState;\n};\n/**\n * Updates a given storeData by either inserting a resource or updating\n * an existing resource.\n * \n * @param storeData\n * @param resource\n * @param fromServer\n * @param override \n * \n * @return a new NgrxJsonApiStoreData with an inserted/updated resource.\n */\nexport const updateStoreDataFromResource = (\n  storeData: NgrxJsonApiStoreData,\n  resource: Resource,\n  fromServer: boolean,\n  override: boolean\n): NgrxJsonApiStoreData => {\n  if (_.isUndefined(storeData[resource.type])) {\n    let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n    newStoreData[resource.type] = {};\n    newStoreData[resource.type] = insertStoreResource(\n      newStoreData[resource.type],\n      resource,\n      fromServer\n    );\n    return newStoreData;\n  } else if (_.isUndefined(storeData[resource.type][resource.id]) || override) {\n    let updatedStoreResources = insertStoreResource(\n      storeData[resource.type],\n      resource,\n      fromServer\n    );\n\n    // check if nothing has changed\n    if (updatedStoreResources !== storeData[resource.type]) {\n      let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n      newStoreData[resource.type] = updatedStoreResources;\n      return newStoreData;\n    }\n    return storeData;\n  } else {\n    let updatedStoreResources = updateStoreResource(\n      storeData[resource.type],\n      resource,\n      fromServer\n    );\n\n    // check if nothing has changed\n    if (updatedStoreResources !== storeData[resource.type]) {\n      let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n      newStoreData[resource.type] = updatedStoreResources;\n      return newStoreData;\n    }\n    return storeData;\n  }\n};\n\nexport const /** @type {?} */ updateStoreDataFromPayload = (\n  storeData: NgrxJsonApiStoreData,\n  payload: Document\n): NgrxJsonApiStoreData => {\n  let /** @type {?} */ data = /** @type {?} */(( <Array<Resource> | Resource>_.get(payload, 'data')));\n\n  if (_.isUndefined(data)) {\n    return storeData;\n  }\n\n  data = _.isArray(data) ? /** @type {?} */(( <Resource[]>data)) : /** @type {?} */(( <Resource[]>[data]));\n\n  let /** @type {?} */ included = /** @type {?} */(( <Array<Resource>>_.get(payload, 'included')));\n\n  if (!_.isUndefined(included)) {\n    data = [...data, ...included];\n  }\n\n  return /** @type {?} */(( <NgrxJsonApiStoreData>_.reduce(\n    data,\n    (result: NgrxJsonApiStoreData, resource: Resource) => {\n      // let resourcePath: string = getResourcePath(\n      //   result.resourcesDefinitions, resource.type);\n      // Extremely ugly, needs refactoring!\n      // let newPartialState = { data: {} };\n      // newPartialState.data[resourcePath] = { data: {} } ;\n      // newPartialState.data = updateOrInsertResource(\n      // result.data, resource);\n      return updateStoreDataFromResource(result, resource, true, true);\n      // result.data[resourcePath].data = updateOrInsertResource(\n      // result.data[resourcePath].data, resource);\n      // return <NgrxJsonApiStore>_.merge({}, result, newPartialState);\n    },\n    storeData\n  )));\n};\n/**\n * Updates the storeQueries by either adding a new ResourceQueryStore\n * or modifying an existing one.\n * \n * @param storeQueries\n * @param query \n * \n * @return a new NgrxJsonApiStoreQueries with the inserted/modified\n * ResourceQueryStore\n */\nexport const updateQueryParams = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  query: Query\n): NgrxJsonApiStoreQueries => {\n  if (!query.queryId) {\n    return storeQueries;\n  }\n\n  let newStoreQuery = { ...storeQueries[query.queryId] };\n  newStoreQuery.loading = true;\n  newStoreQuery.query = _.cloneDeep(query);\n\n  if (_.isUndefined(newStoreQuery.errors)) {\n    newStoreQuery.errors = [];\n  }\n\n  let newStoreQueries: NgrxJsonApiStoreQueries = { ...storeQueries };\n  newStoreQueries[newStoreQuery.query.queryId] = newStoreQuery;\n  return newStoreQueries;\n};\n/**\n * Updates the query results for given a queryId and the results.\n */\nexport const updateQueryResults = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string,\n  document: Document\n): NgrxJsonApiStoreQueries => {\n  let storeQuery: StoreQuery = storeQueries[queryId];\n  if (storeQuery) {\n    let data = _.isArray(document.data) ? document.data : [document.data];\n    let newQueryStore = {\n      ...storeQuery,\n      resultIds: data.map(it => (it ? toResourceIdentifier(it) : [])),\n      meta: document.meta,\n      links: document.links,\n      loading: false,\n    };\n\n    let newState: NgrxJsonApiStoreQueries = { ...storeQueries };\n    newState[queryId] = <StoreQuery>newQueryStore;\n    return newState;\n  }\n  return storeQueries;\n};\n/**\n * Update the query errors given the queryId and a storeQueries and the\n * document containing the error\n * \n * \n */\nexport const updateQueryErrors = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string,\n  document: Document\n): NgrxJsonApiStoreQueries => {\n  if (!queryId || !storeQueries[queryId]) {\n    return storeQueries;\n  }\n  let newState = { ...storeQueries };\n  let newStoreQuery = { ...newState[queryId] };\n  newStoreQuery.errors = [];\n  if (document.errors) {\n    newStoreQuery.errors.push(...document.errors);\n  }\n  newState[queryId] = newStoreQuery;\n  return newState;\n};\n/**\n * Removes a query given its queryId from the NgrxJsonApiStoreQueries.\n */\nexport const removeQuery = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string\n): NgrxJsonApiStoreQueries => {\n  let newState: NgrxJsonApiStoreQueries = { ...storeQueries };\n  delete newState[queryId];\n  return newState;\n};\n/**\n * Given a resource, it will return an object containing the resource id and type.\n */\nexport const toResourceIdentifier = (\n  resource: Resource\n): ResourceIdentifier => {\n  return { type: resource.type, id: resource.id };\n};\n/**\n * Get the value for the last field in a given fitering path.\n * \n * @param path\n * @param baseStoreResource\n * @param storeData\n * @param resourceDefinitions\n * @param pathSepartor\n * @return the value of the last field in the path.\n */\nexport const getResourceFieldValueFromPath = (\n  path: string,\n  baseStoreResource: StoreResource,\n  storeData: NgrxJsonApiStoreData,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n) => {\n  if (_.isUndefined(pathSeparator)) {\n    pathSeparator = '.';\n  }\n  let fields: Array<string> = path.split(pathSeparator);\n  let currentStoreResource = baseStoreResource;\n  for (let i = 0; i < fields.length; i++) {\n    let definition = _.find(resourceDefinitions, {\n      type: currentStoreResource.type,\n    });\n\n    if (_.isUndefined(definition)) {\n      throw new Error('Definition not found');\n    }\n    // if both attributes and relationships are missing, raise an error\n    if (\n      _.isUndefined(definition.attributes) &&\n      _.isUndefined(definition.relationships)\n    ) {\n      throw new Error('Attributes or Relationships must be provided');\n    }\n    if (definition.attributes.hasOwnProperty(fields[i])) {\n      return _.get(currentStoreResource, 'attributes.' + fields[i], null);\n    } else if (definition.relationships.hasOwnProperty(fields[i])) {\n      if (i === fields.length - 1) {\n        throw new Error(\n          'The last field in the filtering path cannot be a relation'\n        );\n      }\n      let resourceRelation = definition.relationships[fields[i]];\n      if (resourceRelation.relationType === 'hasMany') {\n        throw new Error('Cannot filter past a hasMany relation');\n      } else {\n        let relation = _.get(\n          currentStoreResource,\n          'relationships.' + fields[i],\n          null\n        );\n        if (!relation || !relation.data) {\n          return null;\n        } else {\n          let relatedPath = [resourceRelation.type, relation.data.id];\n          currentStoreResource = <StoreResource>_.get(storeData, relatedPath);\n        }\n      }\n    } else {\n      throw new Error('Cannot find field in attributes or relationships');\n    }\n    if (_.isUndefined(currentStoreResource)) {\n      return null;\n    }\n  }\n};\n\nexport const /** @type {?} */ filterResources = (\n  resources: NgrxJsonApiStoreResources,\n  storeData: NgrxJsonApiStoreData,\n  query: Query,\n  resourceDefinitions: Array<ResourceDefinition>,\n  filteringConfig?: NgrxJsonApiFilteringConfig\n) => {\n  return _.filter(resources, resource => {\n    if (\n      query.hasOwnProperty('params') &&\n      query.params.hasOwnProperty('filtering')\n    ) {\n      return query.params.filtering.every(element => {\n        let /** @type {?} */ pathSeparator;\n        let /** @type {?} */ filteringOperators;\n\n        if (!_.isUndefined(filteringConfig)) {\n          pathSeparator = /** @type {?} */(( <string>_.get(filteringConfig, 'pathSeparator')));\n          filteringOperators = /** @type {?} */(( <Array<FilteringOperator>>_.get(\n            filteringConfig,\n            'filteringOperators'\n          )));\n        }\n        // resource type and attribute\n        let /** @type {?} */ resourceFieldValue = getResourceFieldValueFromPath(\n          element.path,\n          resource,\n          storeData,\n          resourceDefinitions,\n          pathSeparator\n        );\n        if (!resourceFieldValue) {\n          return false;\n        }\n\n        let /** @type {?} */ operator = /** @type {?} */(( <FilteringOperator>_.find(filteringOperators, {\n          name: element.operator,\n        })));\n\n        if (operator) {\n          return operator.comparison(element.value, resourceFieldValue);\n        }\n\n        element.operator = element.hasOwnProperty('operator')\n          ? element.operator\n          : 'iexact';\n\n        switch (element.operator) {\n          case 'iexact':\n            if (_.isString(element.value) && _.isString(resourceFieldValue)) {\n              return (\n                element.value.toLowerCase() === resourceFieldValue.toLowerCase()\n              );\n            } else {\n              return element.value === resourceFieldValue;\n            }\n\n          case 'exact':\n            return element.value === resourceFieldValue;\n\n          case 'contains':\n            return _.includes(resourceFieldValue, element.value);\n\n          case 'icontains':\n            return _.includes(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          case 'in':\n            if (_.isArray(element.value)) {\n              return _.includes(element.value, resourceFieldValue);\n            } else {\n              return _.includes([element.value], resourceFieldValue);\n            }\n          case 'gt':\n            return element.value > resourceFieldValue;\n\n          case 'gte':\n            return element.value >= resourceFieldValue;\n\n          case 'lt':\n            return element.value < resourceFieldValue;\n\n          case 'lte':\n            return element.value <= resourceFieldValue;\n\n          case 'startswith':\n            return _.startsWith(resourceFieldValue, element.value);\n\n          case 'istartswith':\n            return _.startsWith(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          case 'endswith':\n            return _.endsWith(resourceFieldValue, element.value);\n\n          case 'iendswith':\n            return _.endsWith(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          default:\n            return true;\n        }\n      });\n    } else {\n      return true;\n    }\n  });\n};\n\nexport const /** @type {?} */ generateIncludedQueryParams = (\n  included: Array<string>\n): string => {\n  if (_.isEmpty(included)) {\n    return '';\n  }\n\n  return 'include=' + included.join();\n};\n\nexport const /** @type {?} */ generateFieldsQueryParams = (fields: Array<string>): string => {\n  if (_.isEmpty(fields)) {\n    return '';\n  }\n\n  return 'fields=' + fields.join();\n};\n\nexport const /** @type {?} */ generateFilteringQueryParams = (\n  filtering: Array<FilteringParam>\n): string => {\n  if (_.isEmpty(filtering)) {\n    return '';\n  }\n  let /** @type {?} */ filteringParams = filtering.map(f => {\n    return (\n      'filter[' +\n      f.path +\n      ']' +\n      (f.operator ? '[' + f.operator + ']' : '') +\n      '=' +\n      encodeURIComponent(f.value)\n    );\n  });\n  return filteringParams.join('&');\n};\n\nexport const /** @type {?} */ generateSortingQueryParams = (\n  sorting: Array<SortingParam>\n): string => {\n  if (_.isEmpty(sorting)) {\n    return '';\n  }\n  return (\n    'sort=' +\n    sorting\n      .map(f => (f.direction === Direction.ASC ? '' : '-') + f.api)\n      .join(',')\n  );\n};\n\nexport const /** @type {?} */ generateQueryParams = (...params: Array<string>) => {\n  let /** @type {?} */ newParams = params.filter(p => p !== '');\n  if (newParams.length !== 0) {\n    return '?' + newParams.join('&');\n  } else {\n    return '';\n  }\n};\n\nexport const /** @type {?} */ generatePayload = (\n  resource: StoreResource,\n  operation: OperationType\n): Payload => {\n  let /** @type {?} */ payload: Payload = {\n    query: {\n      type: resource.type,\n    },\n  };\n\n  // the data to be updated or created\n  if (operation === 'POST' || operation === 'PATCH') {\n    payload.jsonApiData = {\n      data: {\n        id: resource.id,\n        type: resource.type,\n        attributes: resource.attributes,\n        relationships: resource.relationships,\n      },\n    };\n  }\n\n  if (operation === 'POST' && resource.hasTemporaryId) {\n    delete payload.jsonApiData.data.id;\n  }\n\n  // 'DELETE' only needs a query and it also needs an id in its query\n  // 'PATCH' also needs an id in its query\n  // 'POST' needed locally to allow to write back errors to store if id is available\n  if (operation === 'PATCH' || operation === 'DELETE' || operation === 'POST') {\n    payload.query.id = resource.id;\n  }\n\n  return payload;\n};\n\n/* tslint:disable */\nexport const /** @type {?} */ uuid = () => {\n  let /** @type {?} */ lut = [];\n  for (let /** @type {?} */ i = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n  }\n  let /** @type {?} */ d0 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d1 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d2 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d3 = (Math.random() * 0xffffffff) | 0;\n  return (\n    lut[d0 & 0xff] +\n    lut[(d0 >> 8) & 0xff] +\n    lut[(d0 >> 16) & 0xff] +\n    lut[(d0 >> 24) & 0xff] +\n    '-' +\n    lut[d1 & 0xff] +\n    lut[(d1 >> 8) & 0xff] +\n    '-' +\n    lut[((d1 >> 16) & 0x0f) | 0x40] +\n    lut[(d1 >> 24) & 0xff] +\n    '-' +\n    lut[(d2 & 0x3f) | 0x80] +\n    lut[(d2 >> 8) & 0xff] +\n    '-' +\n    lut[(d2 >> 16) & 0xff] +\n    lut[(d2 >> 24) & 0xff] +\n    lut[d3 & 0xff] +\n    lut[(d3 >> 8) & 0xff] +\n    lut[(d3 >> 16) & 0xff] +\n    lut[(d3 >> 24) & 0xff]\n  );\n};\n/* tslint:enable */\n\nconst /** @type {?} */ toKey = (id: ResourceIdentifier) => {\n  return id.id + '@' + id.type;\n};\n\nconst /** @type {?} */ collectQueryResults = (state: NgrxJsonApiStore, usedResources: any) => {\n  for (let /** @type {?} */ queryName in state.queries) {\n    if (state.queries.hasOwnProperty(queryName)) {\n      let /** @type {?} */ query = state.queries[queryName];\n      if (query.resultIds) {\n        for (let /** @type {?} */ resultId of query.resultIds) {\n          usedResources[toKey(resultId)] = true;\n        }\n      }\n    }\n  }\n};\n\nconst /** @type {?} */ collectPendingChanges = (state: NgrxJsonApiStore, usedResources: any) => {\n  for (let /** @type {?} */ type in state.data) {\n    if (state.data.hasOwnProperty(type)) {\n      let /** @type {?} */ resources = state.data[type];\n      for (let /** @type {?} */ id in resources) {\n        if (resources.hasOwnProperty(id)) {\n          let /** @type {?} */ resource = resources[id];\n          if (resource.state !== 'IN_SYNC') {\n            usedResources[toKey(resource)] = true;\n          }\n        }\n      }\n    }\n  }\n};\n\nconst /** @type {?} */ collectReferencesForResource = (\n  state: NgrxJsonApiStore,\n  usedResources: any,\n  resource: Resource\n) => {\n  let /** @type {?} */ hasChanges: boolean;\n  for (let /** @type {?} */ relationshipName in resource.relationships) {\n    if (resource.relationships.hasOwnProperty(relationshipName)) {\n      let /** @type {?} */ data = resource.relationships[relationshipName].data;\n      if (data) {\n        let /** @type {?} */ dependencyIds: Array<ResourceIdentifier> =\n          data instanceof Array ? data : [data];\n        for (let /** @type {?} */ dependencyId of dependencyIds) {\n          let /** @type {?} */ dependencyKey = toKey(dependencyId);\n          if (!usedResources[dependencyKey]) {\n            // change found, an other iteration will be necssary to detect\n            // transitive dependencies\n            hasChanges = true;\n            usedResources[dependencyKey] = true;\n          }\n        }\n      }\n    }\n  }\n  return hasChanges;\n};\n\nconst /** @type {?} */ collectReferences = (state: NgrxJsonApiStore, usedResources: any) => {\n  while (true) {\n    let /** @type {?} */ hasChanges = false;\n    for (let /** @type {?} */ type in state.data) {\n      if (state.data.hasOwnProperty(type)) {\n        let /** @type {?} */ resources = state.data[type];\n        for (let /** @type {?} */ id in resources) {\n          if (resources.hasOwnProperty(id)) {\n            let /** @type {?} */ resource = resources[id];\n            if (usedResources[toKey(resource)]) {\n              // in use, do not collect its relations\n              hasChanges =\n                hasChanges ||\n                collectReferencesForResource(state, usedResources, resource);\n            }\n          }\n        }\n      }\n    }\n    if (!hasChanges) {\n      break;\n    }\n  }\n};\n\nconst /** @type {?} */ sweepUnusedResources = (state: NgrxJsonApiStore, usedResources: any) => {\n  let /** @type {?} */ hasDeletions = false;\n  let /** @type {?} */ newState = _.cloneDeep(state);\n  for (let /** @type {?} */ type in newState.data) {\n    if (newState.data.hasOwnProperty(type)) {\n      let /** @type {?} */ resources = newState.data[type];\n      for (let /** @type {?} */ id in resources) {\n        if (resources.hasOwnProperty(id)) {\n          let /** @type {?} */ resource = resources[id];\n          if (!usedResources[toKey(resource)]) {\n            hasDeletions = true;\n            delete resources[id];\n          }\n        }\n      }\n\n      if (_.isEmpty(resources)) {\n        delete newState.data[type];\n      }\n    }\n  }\n  return hasDeletions ? newState : state;\n};\n\nexport const /** @type {?} */ compactStore = (state: NgrxJsonApiStore) => {\n  let /** @type {?} */ usedResources = {};\n\n  // query results can not be collected\n  collectQueryResults(state, usedResources);\n\n  // pending changes cannot be collected\n  collectPendingChanges(state, usedResources);\n\n  // references from non-collected objects cannot be collected as well\n  collectReferences(state, usedResources);\n\n  // remove everything that is not collected\n  return sweepUnusedResources(state, usedResources);\n};\n\ninterface TopologySortContext {\n  pendingResources: Array<StoreResource>;\n  cursor: number;\n  sorted: Array<StoreResource>;\n  visited: Array<boolean>;\n  dependencies: { [id: string]: Array<StoreResource> };\n}\n\nexport const /** @type {?} */ sortPendingChanges = (\n  pendingResources: Array<StoreResource>\n): Array<StoreResource> => {\n  // allocate dependency\n  let /** @type {?} */ dependencies: any = {};\n  let /** @type {?} */ pendingMap: any = {};\n  for (let /** @type {?} */ pendingResource of pendingResources) {\n    let /** @type {?} */ resource = pendingResource;\n    let /** @type {?} */ key = toKey(resource);\n    dependencies[key] = [];\n    pendingMap[key] = pendingResource;\n  }\n\n  // extract dependencies\n  for (let /** @type {?} */ pendingResource of pendingResources) {\n    let /** @type {?} */ resource = pendingResource;\n    if (resource.relationships) {\n      let /** @type {?} */ key = toKey(resource);\n      Object.keys(resource.relationships).forEach(relationshipName => {\n        let /** @type {?} */ data = resource.relationships[relationshipName].data;\n        if (data) {\n          let /** @type {?} */ dependencyIds: Array<ResourceIdentifier> =\n            data instanceof Array ? data : [data];\n          for (let /** @type {?} */ dependencyId of dependencyIds) {\n            let /** @type {?} */ dependencyKey = toKey(dependencyId);\n            if (\n              pendingMap[dependencyKey] &&\n              pendingMap[dependencyKey].state === 'CREATED'\n            ) {\n              // we have a dependency between two unsaved objects\n              dependencies[key].push(pendingMap[dependencyKey]);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  // order\n  let /** @type {?} */ context = {\n    pendingResources: pendingResources,\n    cursor: pendingResources.length,\n    sorted: new Array(pendingResources.length),\n    dependencies: dependencies,\n    visited: /** @type {?} */(( <any[]>[])),\n  };\n\n  let /** @type {?} */ i = context.cursor;\n  while (i--) {\n    if (!context.visited[i]) {\n      visitPending(pendingResources[i], i, [], context);\n    }\n  }\n\n  return context.sorted;\n};\n\nconst /** @type {?} */ visitPending = (\n  pendingResource: StoreResource,\n  i: any,\n  predecessors: any,\n  context: TopologySortContext\n) => {\n  let /** @type {?} */ key = toKey(pendingResource);\n  if (predecessors.indexOf(key) >= 0) {\n    throw new Error(\n      'Cyclic dependency: ' + key + ' with ' + JSON.stringify(predecessors)\n    );\n  }\n\n  if (context.visited[i]) {\n    return;\n  }\n  context.visited[i] = true;\n\n  // outgoing edges\n  let /** @type {?} */ outgoing: Array<StoreResource> = context.dependencies[key];\n\n  let /** @type {?} */ preds = predecessors.concat(key);\n  for (let /** @type {?} */ child of outgoing) {\n    visitPending(\n      child,\n      context.pendingResources.indexOf(child),\n      preds,\n      context\n    );\n  }\n\n  context.sorted[--context.cursor] = pendingResource;\n};\n/**\n * @param {?} state\n * @return {?}\n */\nexport function getPendingChanges(\n  state: NgrxJsonApiStore\n): Array<StoreResource> {\n  let /** @type {?} */ pending: Array<StoreResource> = [];\n  Object.keys(state.data).forEach(type => {\n    Object.keys(state.data[type]).forEach(id => {\n      let /** @type {?} */ storeResource = state.data[type][id];\n      if (storeResource.state !== 'IN_SYNC' && storeResource.state !== 'NEW') {\n        pending.push(storeResource);\n      }\n    });\n  });\n  return pending;\n}\n","import { Injectable } from '@angular/core';\n\nimport { Action } from '@ngrx/store';\n\nimport {\n  Payload,\n  Resource,\n  ResourceIdentifier,\n  Query,\n  ModifyStoreResourceErrorsPayload,\n} from './interfaces';\n\nexport const /** @type {?} */ NgrxJsonApiActionTypes = {\n  API_POST_INIT: '[NgrxJsonApi] API_POST_INIT',\n  API_POST_SUCCESS: '[NgrxJsonApi] API_POST_SUCCESS',\n  API_POST_FAIL: '[NgrxJsonApi] API_POST_FAIL',\n  API_GET_INIT: '[NgrxJsonApi] API_GET_INIT',\n  API_GET_SUCCESS: '[NgrxJsonApi] API_GET_SUCCESS',\n  API_GET_FAIL: '[NgrxJsonApi] API_GET_FAIL',\n  API_PATCH_INIT: '[NgrxJsonApi] API_PATCH_INIT',\n  API_PATCH_SUCCESS: '[NgrxJsonApi] API_PATCH_SUCCESS',\n  API_PATCH_FAIL: '[NgrxJsonApi] API_PATCH_FAIL',\n  API_DELETE_INIT: '[NgrxJsonApi] API_DELETE_INIT',\n  API_DELETE_SUCCESS: '[NgrxJsonApi] API_DELETE_SUCCESS',\n  API_DELETE_FAIL: '[NgrxJsonApi] API_DELETE_FAIL',\n  API_APPLY_INIT: '[NgrxJsonApi] API_APPLY_INIT',\n  API_APPLY_SUCCESS: '[NgrxJsonApi] API_APPLY_SUCCESS',\n  API_APPLY_FAIL: '[NgrxJsonApi] API_APPLY_FAIL',\n  API_ROLLBACK: '[NgrxJsonApi] API_ROLLBACK',\n  API_QUERY_REFRESH: '[NgrxJsonApi] API_QUERY_REFRESH',\n  LOCAL_QUERY_INIT: '[NgrxJsonApi] LOCAL_QUERY_INIT',\n  LOCAL_QUERY_SUCCESS: '[NgrxJsonApi] LOCAL_QUERY_SUCCESS',\n  LOCAL_QUERY_FAIL: '[NgrxJsonApi] LOCAL_QUERY_FAIL',\n  DELETE_STORE_RESOURCE: '[NgrxJsonApi] DELETE_STORE_RESOURCE',\n  PATCH_STORE_RESOURCE: '[NgrxJsonApi] PATCH_STORE_RESOURCE',\n  NEW_STORE_RESOURCE: '[NgrxJsonApi] NEW_STORE_RESOURCE',\n  POST_STORE_RESOURCE: '[NgrxJsonApi] POST_STORE_RESOURCE',\n  MODIFY_STORE_RESOURCE_ERRORS: '[NgrxJsonApi] MODIFY_STORE_RESOURCE_ERRORS',\n  REMOVE_QUERY: '[NgrxJsonApi] REMOVE_QUERY',\n  COMPACT_STORE: '[NgrxJsonApi] COMPACT_STORE',\n  CLEAR_STORE: '[NgrxJsonApi] CLEAR_STORE',\n};\nexport class ApiApplyInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_INIT;\n}\n\nfunction ApiApplyInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplyInitAction.prototype.type;\n}\n\nexport class ApiApplySuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Array<Action>) {}\n}\n\nfunction ApiApplySuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplySuccessAction.prototype.type;\n/** @type {?} */\nApiApplySuccessAction.prototype.payload;\n}\n\nexport class ApiApplyFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Array<Action>) {}\n}\n\nfunction ApiApplyFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplyFailAction.prototype.type;\n/** @type {?} */\nApiApplyFailAction.prototype.payload;\n}\n\nexport class ApiPostInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_POST_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction ApiPostInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostInitAction.prototype.type;\n/** @type {?} */\nApiPostInitAction.prototype.payload;\n}\n\nexport class ApiPostSuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_POST_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiPostSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostSuccessAction.prototype.type;\n/** @type {?} */\nApiPostSuccessAction.prototype.payload;\n}\n\nexport class ApiPostFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_POST_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiPostFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostFailAction.prototype.type;\n/** @type {?} */\nApiPostFailAction.prototype.payload;\n}\n\nexport class ApiDeleteInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: ResourceIdentifier) {}\n}\n\nfunction ApiDeleteInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteInitAction.prototype.type;\n/** @type {?} */\nApiDeleteInitAction.prototype.payload;\n}\n\nexport class ApiDeleteSuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiDeleteSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteSuccessAction.prototype.type;\n/** @type {?} */\nApiDeleteSuccessAction.prototype.payload;\n}\n\nexport class ApiDeleteFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiDeleteFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteFailAction.prototype.type;\n/** @type {?} */\nApiDeleteFailAction.prototype.payload;\n}\n\nexport class ApiGetInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_GET_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Query) {}\n}\n\nfunction ApiGetInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetInitAction.prototype.type;\n/** @type {?} */\nApiGetInitAction.prototype.payload;\n}\n\nexport class ApiGetSuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_GET_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiGetSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetSuccessAction.prototype.type;\n/** @type {?} */\nApiGetSuccessAction.prototype.payload;\n}\n\nexport class ApiGetFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_GET_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiGetFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetFailAction.prototype.type;\n/** @type {?} */\nApiGetFailAction.prototype.payload;\n}\n\nexport class ApiRollbackAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_ROLLBACK;\nconstructor() {}\n}\n\nfunction ApiRollbackAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiRollbackAction.prototype.type;\n}\n\nexport class ApiPatchInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction ApiPatchInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchInitAction.prototype.type;\n/** @type {?} */\nApiPatchInitAction.prototype.payload;\n}\n\nexport class ApiPatchSuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiPatchSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchSuccessAction.prototype.type;\n/** @type {?} */\nApiPatchSuccessAction.prototype.payload;\n}\n\nexport class ApiPatchFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiPatchFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchFailAction.prototype.type;\n/** @type {?} */\nApiPatchFailAction.prototype.payload;\n}\n\nexport class DeleteStoreResourceAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.DELETE_STORE_RESOURCE;\n/**\n * @param {?} payload\n */\nconstructor(public payload: ResourceIdentifier) {}\n}\n\nfunction DeleteStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nDeleteStoreResourceAction.prototype.type;\n/** @type {?} */\nDeleteStoreResourceAction.prototype.payload;\n}\n\nexport class PatchStoreResourceAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.PATCH_STORE_RESOURCE;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction PatchStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nPatchStoreResourceAction.prototype.type;\n/** @type {?} */\nPatchStoreResourceAction.prototype.payload;\n}\n\nexport class NewStoreResourceAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.NEW_STORE_RESOURCE;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction NewStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nNewStoreResourceAction.prototype.type;\n/** @type {?} */\nNewStoreResourceAction.prototype.payload;\n}\n\nexport class PostStoreResourceAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.POST_STORE_RESOURCE;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction PostStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nPostStoreResourceAction.prototype.type;\n/** @type {?} */\nPostStoreResourceAction.prototype.payload;\n}\n\nexport class RemoveQueryAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.REMOVE_QUERY;\n/**\n * @param {?} payload\n */\nconstructor(public payload: string) {}\n}\n\nfunction RemoveQueryAction_tsickle_Closure_declarations() {\n/** @type {?} */\nRemoveQueryAction.prototype.type;\n/** @type {?} */\nRemoveQueryAction.prototype.payload;\n}\n\nexport class LocalQueryInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Query) {}\n}\n\nfunction LocalQueryInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQueryInitAction.prototype.type;\n/** @type {?} */\nLocalQueryInitAction.prototype.payload;\n}\n\nexport class LocalQuerySuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction LocalQuerySuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQuerySuccessAction.prototype.type;\n/** @type {?} */\nLocalQuerySuccessAction.prototype.payload;\n}\n\nexport class LocalQueryFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction LocalQueryFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQueryFailAction.prototype.type;\n/** @type {?} */\nLocalQueryFailAction.prototype.payload;\n}\n\nexport class CompactStoreAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.COMPACT_STORE;\nconstructor() {}\n}\n\nfunction CompactStoreAction_tsickle_Closure_declarations() {\n/** @type {?} */\nCompactStoreAction.prototype.type;\n}\n\nexport class ClearStoreAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.CLEAR_STORE;\nconstructor() {}\n}\n\nfunction ClearStoreAction_tsickle_Closure_declarations() {\n/** @type {?} */\nClearStoreAction.prototype.type;\n}\n\nexport class ApiQueryRefreshAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_QUERY_REFRESH;\n/**\n * @param {?} payload\n */\nconstructor(public payload: string) {\n    if (!payload) {\n      throw new Error('no query id provided for ApiQueryRefreshAction');\n    }\n  }\n}\n\nfunction ApiQueryRefreshAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiQueryRefreshAction.prototype.type;\n/** @type {?} */\nApiQueryRefreshAction.prototype.payload;\n}\n\nexport class ModifyStoreResourceErrorsAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.MODIFY_STORE_RESOURCE_ERRORS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: ModifyStoreResourceErrorsPayload) {}\n}\n\nfunction ModifyStoreResourceErrorsAction_tsickle_Closure_declarations() {\n/** @type {?} */\nModifyStoreResourceErrorsAction.prototype.type;\n/** @type {?} */\nModifyStoreResourceErrorsAction.prototype.payload;\n}\n\n\nexport type NgrxJsonApiActions =\n  | ApiApplyInitAction\n  | ApiApplySuccessAction\n  | ApiApplyFailAction\n  | ApiPostInitAction\n  | ApiPostSuccessAction\n  | ApiPostFailAction\n  | ApiDeleteInitAction\n  | ApiDeleteSuccessAction\n  | ApiDeleteFailAction\n  | ApiGetInitAction\n  | ApiGetSuccessAction\n  | ApiGetFailAction\n  | ApiRollbackAction\n  | ApiPatchInitAction\n  | ApiPatchSuccessAction\n  | ApiPatchFailAction\n  | DeleteStoreResourceAction\n  | PatchStoreResourceAction\n  | PostStoreResourceAction\n  | NewStoreResourceAction\n  | RemoveQueryAction\n  | ApiQueryRefreshAction\n  | LocalQueryInitAction\n  | LocalQuerySuccessAction\n  | LocalQueryFailAction\n  | ModifyStoreResourceErrorsAction\n  | CompactStoreAction\n  | ClearStoreAction;\n","import { Observable } from 'rxjs/Observable';\nimport { AnonymousSubscription } from 'rxjs/Subscription';\nexport type Direction = number;\nexport let Direction: any = {};\nDirection.ASC = 0;\nDirection.DESC = 1;\nDirection[Direction.ASC] = \"ASC\";\nDirection[Direction.DESC] = \"DESC\";\n\n\nexport interface Document {\n  data?: any;\n  included?: any;\n  meta?: any;\n  links?: any;\n  errors?: Array<ResourceError>;\n}\n\nexport interface FilteringParam {\n  path?: string;\n  operator?: string;\n  value?: any;\n}\n\nexport interface FilteringOperator {\n  name: string;\n  apiName?: string;\n  comparison: (value: any, resourceFieldValue: any) => boolean;\n}\n\nexport interface ManyResourceRelationship {\n  data?: Array<ResourceIdentifier>;\n  reference?: Array<StoreResource>;\n}\n\n/**\n * Used by code generators to navigate relationships in a type-safe manner.\n * See crnk.io for a first such generator.\n */\nexport interface TypedManyResourceRelationship<T extends StoreResource>\n  extends ManyResourceRelationship {\n  reference?: Array<T>;\n}\n\n/**\n * Used by code generators to navigate relationships in a type-safe manner.\n * See crnk.io for a first such generator.\n */\nexport interface TypedOneResourceRelationship<T extends StoreResource>\n  extends OneResourceRelationship {\n  reference?: T;\n}\n\nexport interface NgrxJsonApiConfig {\n  apiUrl: string;\n  initialState?: any;\n  resourceDefinitions: Array<ResourceDefinition>;\n  urlBuilder?: NgrxJsonApiUrlBuilder;\n  filteringConfig?: NgrxJsonApiFilteringConfig;\n}\n\nexport interface NgrxJsonApiStore {\n  data: NgrxJsonApiStoreData;\n  queries: NgrxJsonApiStoreQueries;\n  isCreating: number;\n  isReading: number;\n  isUpdating: number;\n  isDeleting: number;\n  isApplying: number;\n}\n\nexport interface NgrxJsonApiStoreData {\n  [id: string]: NgrxJsonApiStoreResources;\n}\n\nexport interface NgrxJsonApiStoreQueries {\n  [id: string]: StoreQuery;\n}\n\nexport interface NgrxJsonApiStoreResources {\n  [id: string]: StoreResource;\n}\n\nexport interface NgrxJsonApiFilteringConfig {\n  pathSeparator?: string;\n  filteringOperators?: Array<FilteringOperator>;\n}\n\nexport interface NgrxJsonApiUrlBuilder {\n  generateFilteringQueryParams?: (params: Array<FilteringParam>) => string;\n  generateFieldsQueryParams?: (params: Array<string>) => string;\n  generateIncludedQueryParams?: (params: Array<string>) => string;\n  generateSortingQueryParams?: (params: Array<SortingParam>) => string;\n  generateQueryParams?: (...params: Array<string>) => string;\n}\n\nexport type OperationType = 'GET' | 'DELETE' | 'PATCH' | 'POST' | false;\n\nexport interface OneResourceRelationship {\n  data?: ResourceIdentifier;\n  reference?: StoreResource;\n}\n\nexport type ErrorModificationType = 'ADD' | 'REMOVE' | 'SET';\n\nexport interface ModifyStoreResourceErrorsPayload {\n  resourceId: ResourceIdentifier;\n  errors: Array<ResourceError>;\n  modificationType: ErrorModificationType;\n}\n\nexport interface Payload {\n  jsonApiData?: Document;\n  query?: Query;\n}\n\nexport interface Query {\n  queryId?: string;\n  type?: string;\n  id?: string;\n  params?: QueryParams;\n}\n\nexport interface QueryParams {\n  filtering?: Array<FilteringParam>;\n  sorting?: Array<SortingParam>;\n  include?: Array<string>;\n  fields?: Array<string>;\n  offset?: number;\n  limit?: number;\n}\n\nexport interface Resource extends ResourceIdentifier {\n  attributes?: { [key: string]: any };\n  relationships?: { [key: string]: ResourceRelationship };\n  meta?: any;\n  links?: any;\n}\n\nexport interface ResourceAttributeDefinition {\n  apiName?: string;\n}\n\nexport interface ResourceDefinition {\n  type: string;\n  collectionPath: string;\n  attributes?: { [key: string]: ResourceAttributeDefinition };\n  relationships?: { [key: string]: ResourceRelationDefinition };\n}\n\nexport interface ResourceError {\n  id?: string;\n  links?: any;\n  status?: string;\n  code?: string;\n  title?: string;\n  detail?: string;\n  source?: ResourceErrorSource;\n  meta?: any;\n}\n\nexport interface ResourceErrorSource {\n  pointer?: string;\n  parameter?: string;\n}\n\nexport interface ResourceIdentifier {\n  type: string;\n  id: string;\n}\n\nexport interface ResourceRelationship {\n  data?: any;\n  links?: any;\n  reference?: any;\n}\n\nexport interface ResourceRelationDefinition {\n  type: string;\n  relationType: ResourceRelationType;\n}\n\nexport type ResourceRelationType = 'hasOne' | 'hasMany';\n\nexport type ResourceState =\n  | 'NEW'\n  | 'IN_SYNC'\n  | 'CREATED'\n  | 'UPDATED'\n  | 'DELETED'\n  | 'NOT_LOADED';\n\nexport interface SortingParam {\n  api: string;\n  direction: Direction;\n}\n\nexport interface QueryResult extends StoreQuery {\n  data?: StoreResource | Array<StoreResource>;\n}\n\nexport interface ManyQueryResult extends QueryResult {\n  data?: Array<StoreResource>;\n}\n\nexport interface OneQueryResult extends QueryResult {\n  data?: StoreResource;\n}\n\nexport interface StoreQuery {\n  query: Query;\n  loading: Boolean;\n  resultIds?: Array<ResourceIdentifier>;\n  meta?: any;\n  links?: any;\n\n  /**\n   * Errors received from the server after attempting to perform a GET request.\n   */\n  errors: Array<ResourceError>;\n}\n\n/**\n* Container to hold a Resource in the store with state information.\n*/\nexport interface StoreResource extends Resource {\n  /**\n  * State of the resource to track local changes not yet\n  * published to the json api endpoint.\n  */\n  state?: ResourceState;\n  /**\n  * The original resource obtained from the server.\n  */\n  persistedResource?: Resource;\n  /**\n  * One of the operation types: reading, creating, updating or deleting.\n  */\n  loading?: OperationType;\n  /**\n  * Errors received from the server after attempting to store the resource.\n  */\n  errors?: Array<ResourceError>;\n\n  /**\n   * new resources may only obtain an id when posted to the server. Till that point\n   * a StoreResource can assign make use of a temporary id and signal this by setting\n   * this flag to true. The id will not be transmitted to the server and the resource\n   * is removed from its temporary location (given by its id) as soon as it is posted\n   * to the server.\n   */\n  hasTemporaryId?: boolean;\n}\n"],"names":["_.isEmpty","_.isEqual","_.findIndex","_.isUndefined","_.hasIn","_.find","_.get","_.isArray","_.cloneDeep","_.endsWith","_.startsWith","_.includes","_.isString","_.filter","_.reduce","_.omit","_.mergeWith","_.set","_.isPlainObject"],"mappings":"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"}