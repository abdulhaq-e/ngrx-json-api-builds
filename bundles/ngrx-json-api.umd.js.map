{"version":3,"file":"ngrx-json-api.umd.js","sources":["../../src/module.ts","../../src/reducers.ts","../../src/effects.ts","../../src/api.ts","../../src/pipes.ts","../../src/services.ts","../../src/actions.ts","../../src/selectors.ts","../../src/utils.ts","../../src/interfaces.ts"],"sourcesContent":["import {InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\n\nimport { Store, StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { NgrxJsonApi } from './api';\nimport { NgrxJsonApiEffects } from './effects';\nimport { NgrxJsonApiService } from './services';\nimport { reducer } from './reducers';\nimport {\n  DenormaliseStoreResourcePipe,\n  GetDenormalisedValuePipe,\n  SelectStoreResourcePipe,\n} from './pipes';\n\nimport { NgrxJsonApiConfig } from './interfaces';\nimport {NgrxJsonApiSelectors} from './selectors';\n\nexport const /** @type {?} */ NGRX_JSON_API_CONFIG = new InjectionToken<NgrxJsonApiConfig>('NGRX_JSON_API_CONFIG');\n/**\n * @param {?} http\n * @param {?} config\n * @return {?}\n */\nexport function apiFactory(http: HttpClient, config: NgrxJsonApiConfig) {\n  return new NgrxJsonApi(http, config);\n}\n/**\n * Deprecated, do not use any longer\n * @return {?}\n */\nexport function selectorsFactory() {\n  return new NgrxJsonApiSelectors();\n}\n/**\n * @param {?} store\n * @param {?} config\n * @return {?}\n */\nexport function serviceFactory(\n  store: Store<any>,\n  config: NgrxJsonApiConfig\n) {\n  return new NgrxJsonApiService(store, config);\n}\n/**\n * @param {?} config\n * @return {?}\n */\nexport function configure(config: NgrxJsonApiConfig): Array<any> {\n  return [\n    {\n      provide: NgrxJsonApi,\n      useFactory: apiFactory,\n      deps: [HttpClient, NGRX_JSON_API_CONFIG],\n    },\n    {\n      provide: NgrxJsonApiSelectors,\n      useFactory: selectorsFactory,\n    },\n    {\n      provide: NgrxJsonApiService,\n      useFactory: serviceFactory,\n      deps: [Store, NGRX_JSON_API_CONFIG],\n    },\n    {\n      provide: NGRX_JSON_API_CONFIG,\n      useValue: config,\n    },\n  ];\n}\nexport class NgrxJsonApiModule {\n/**\n * @param {?} config\n * @return {?}\n */\nstatic configure(config: NgrxJsonApiConfig): ModuleWithProviders {\n    return {\n      ngModule: NgrxJsonApiModule,\n      providers: configure(config),\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    DenormaliseStoreResourcePipe,\n    GetDenormalisedValuePipe,\n    SelectStoreResourcePipe,\n  ],\n  imports: [\n    EffectsModule.forFeature([NgrxJsonApiEffects]),\n    StoreModule.forFeature('NgrxJsonApi', reducer, {}),\n  ],\n  exports: [\n    DenormaliseStoreResourcePipe,\n    GetDenormalisedValuePipe,\n    SelectStoreResourcePipe,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgrxJsonApiModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgrxJsonApiModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Action } from '@ngrx/store';\n\nimport {\n  ApiApplyInitAction,\n  ApiRollbackAction,\n  NgrxJsonApiActionTypes,\n} from './actions';\nimport {\n  ModifyStoreResourceErrorsPayload, NgrxJsonApiState,\n  NgrxJsonApiZone,\n  Query,\n  ResourceIdentifier,\n  StoreResource,\n} from './interfaces';\nimport {\n  clearQueryResult,\n  compactStore,\n  deleteStoreResources,\n  getPendingChanges,\n  removeQuery,\n  removeStoreResource,\n  rollbackStoreResources, setIn,\n  updateQueriesForDeletedResource,\n  updateQueryErrors,\n  updateQueryParams,\n  updateQueryResults,\n  updateResourceErrors,\n  updateResourceErrorsForQuery,\n  updateResourceState,\n  updateStoreDataFromPayload,\n  updateStoreDataFromResource,\n} from './utils';\n\nexport const /** @type {?} */ initialNgrxJsonApiZone: NgrxJsonApiZone = {\n  isCreating: 0,\n  isReading: 0,\n  isUpdating: 0,\n  isDeleting: 0,\n  isApplying: 0,\n  data: {},\n  queries: {},\n};\n\nexport const /** @type {?} */ initialNgrxJsonApiState: NgrxJsonApiState = {\n  zones: {}\n};\n/**\n * @param {?=} state\n * @param {?=} action\n * @return {?}\n */\nexport function NgrxJsonApiStoreReducer(\n  state: NgrxJsonApiState = initialNgrxJsonApiState,\n  action: any\n): NgrxJsonApiState {\n  const /** @type {?} */ zoneId = action['zoneId'];\n  if (!zoneId) {\n    return state;\n  }\n  let /** @type {?} */ zone = state.zones[zoneId];\n  if (!zone) {\n    zone = initialNgrxJsonApiZone;\n  }\n  let /** @type {?} */ newZone = NgrxJsonApiZoneReducer(zone, action);\n  if(zone != newZone){\n    return {\n      ...state,\n      zones: {\n        ...state.zones,\n        [zoneId]: newZone\n      }\n    }\n  }else{\n    return state;\n  }\n}\n/**\n * @param {?} zone\n * @param {?} action\n * @return {?}\n */\nexport function NgrxJsonApiZoneReducer(zone: NgrxJsonApiZone, action: any): NgrxJsonApiZone {\n  let /** @type {?} */ newZone;\n  switch (action.type) {\n    case NgrxJsonApiActionTypes.API_POST_INIT: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        true\n      );\n      newZone = {\n        ...zone,\n        data: updatedData,\n        isCreating: zone.isCreating + 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_GET_INIT: {\n      let /** @type {?} */ query = /** @type {?} */(( action.payload as Query));\n      newZone = {\n        ...zone,\n        queries: updateQueryParams(zone.queries, query),\n        isReading: zone.isReading + 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_INIT: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        false\n      );\n      newZone = {\n        ...zone,\n        data: updatedData,\n        isUpdating: zone.isUpdating + 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_INIT: {\n      newZone = {\n        ...zone,\n        data: updateResourceState(zone.data, action.payload, 'DELETED'),\n        isDeleting: zone.isDeleting + 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_POST_SUCCESS: {\n      newZone = {\n        ...zone,\n        data: updateStoreDataFromPayload(\n          zone.data,\n          action.payload.jsonApiData\n        ),\n        isCreating: zone.isCreating - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_GET_SUCCESS: {\n      newZone = {\n        ...zone,\n        data: updateStoreDataFromPayload(\n          zone.data,\n          action.payload.jsonApiData\n        ),\n        queries: updateQueryResults(\n          zone.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n        isReading: zone.isReading - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_SUCCESS: {\n      newZone = {\n        ...zone,\n        data: updateStoreDataFromPayload(\n          zone.data,\n          action.payload.jsonApiData\n        ),\n        isUpdating: zone.isUpdating - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_SUCCESS: {\n      newZone = {\n        ...zone,\n        data: deleteStoreResources(zone.data, action.payload.query),\n        queries: updateQueriesForDeletedResource(zone.queries, {\n          id: action.payload.query.id,\n          type: action.payload.query.type,\n        }),\n        isDeleting: zone.isDeleting - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_QUERY_REFRESH: {\n      // clear result ids and wait until new data is fetched (triggered by effect)\n      newZone = {\n        ...zone,\n        queries: clearQueryResult(zone.queries, action.payload),\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_POST_FAIL: {\n      newZone = {\n        ...zone,\n        data: updateResourceErrorsForQuery(\n          zone.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isCreating: zone.isCreating - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_GET_FAIL: {\n      newZone = {\n        ...zone,\n        queries: updateQueryErrors(\n          zone.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n        isReading: zone.isReading - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_FAIL: {\n      newZone = {\n        ...zone,\n        data: updateResourceErrorsForQuery(\n          zone.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isUpdating: zone.isUpdating - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_FAIL: {\n      newZone = {\n        ...zone,\n        data: updateResourceErrorsForQuery(\n          zone.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isDeleting: zone.isDeleting - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.REMOVE_QUERY: {\n      let /** @type {?} */ queryId = /** @type {?} */(( action.payload as string));\n      newZone = { ...zone, queries: removeQuery(zone.queries, queryId) };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.LOCAL_QUERY_INIT: {\n      let /** @type {?} */ query = /** @type {?} */(( action.payload as Query));\n      newZone = { ...zone, queries: updateQueryParams(zone.queries, query) };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.MODIFY_STORE_RESOURCE_ERRORS: {\n      let /** @type {?} */ payload = /** @type {?} */(( action.payload as ModifyStoreResourceErrorsPayload));\n      newZone = {\n        ...zone,\n        data: updateResourceErrors(\n          zone.data,\n          payload.resourceId,\n          payload.errors,\n          payload.modificationType\n        ),\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.LOCAL_QUERY_SUCCESS: {\n      return setIn(zone, 'queries', updateQueryResults(\n        zone.queries,\n        action.payload.query.queryId,\n        action.payload.jsonApiData\n      ));\n    }\n    case NgrxJsonApiActionTypes.PATCH_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        false\n      );\n      if (updatedData !== zone.data) {\n        newZone = { ...zone, data: updatedData };\n        return newZone;\n      } else {\n        return zone;\n      }\n    }\n    case NgrxJsonApiActionTypes.POST_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        true\n      );\n      if (updatedData !== zone.data) {\n        newZone = { ...zone, data: updatedData };\n        return newZone;\n      } else {\n        return zone;\n      }\n    }\n    case NgrxJsonApiActionTypes.NEW_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        true\n      );\n      updatedData = updateResourceState(updatedData, action.payload, 'NEW');\n      if (updatedData !== zone.data) {\n        newZone = { ...zone, data: updatedData };\n        return newZone;\n      } else {\n        return zone;\n      }\n    }\n    case NgrxJsonApiActionTypes.DELETE_STORE_RESOURCE: {\n      let /** @type {?} */ resourceId = /** @type {?} */(( action.payload as ResourceIdentifier));\n      if (\n        zone.data[resourceId.type] &&\n        zone.data[resourceId.type][resourceId.id]\n      ) {\n        let /** @type {?} */ resource = zone.data[resourceId.type][resourceId.id];\n\n        if (resource.state === 'NEW' || resource.state === 'CREATED') {\n          // not yet stored on server-side, just delete\n          newZone = {\n            ...zone,\n            data: removeStoreResource(zone.data, resourceId),\n          };\n          return newZone;\n        } else {\n          // stored on server, mark for deletion\n          newZone = {\n            ...zone,\n            data: updateResourceState(zone.data, action.payload, 'DELETED'),\n          };\n          return newZone;\n        }\n      }\n      return zone;\n    }\n    case NgrxJsonApiActionTypes.API_APPLY_INIT: {\n      let /** @type {?} */ payload = ( /** @type {?} */((action as ApiApplyInitAction))).payload;\n      let /** @type {?} */ pending: Array<StoreResource> = getPendingChanges(\n        zone.data,\n        payload.ids,\n        payload.include\n      );\n      newZone = { ...zone, isApplying: zone.isApplying + 1 };\n      for (let /** @type {?} */ pendingChange of pending) {\n        if (pendingChange.state === 'CREATED') {\n          newZone.isCreating++;\n        } else if (pendingChange.state === 'UPDATED') {\n          newZone.isUpdating++;\n        } else if (pendingChange.state === 'DELETED') {\n          newZone.isDeleting++;\n        } else {\n          throw new Error('unknown state ' + pendingChange.state);\n        }\n      }\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_APPLY_SUCCESS:\n    case NgrxJsonApiActionTypes.API_APPLY_FAIL: {\n      // apply all the committed or failed changes\n      let /** @type {?} */ actions = /** @type {?} */(( action.payload as Array<Action>));\n      newZone = zone;\n      for (let /** @type {?} */ commitAction of actions) {\n        newZone = NgrxJsonApiZoneReducer(newZone, commitAction);\n      }\n      newZone = { ...newZone, isApplying: zone['isApplying'] - 1 };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_ROLLBACK: {\n      let /** @type {?} */ payload = ( /** @type {?} */((action as ApiRollbackAction))).payload;\n      newZone = {\n        ...zone,\n        data: rollbackStoreResources(zone.data, payload.ids, payload.include),\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.CLEAR_STORE: {\n      return initialNgrxJsonApiZone;\n    }\n    case NgrxJsonApiActionTypes.COMPACT_STORE: {\n      return compactStore(zone);\n    }\n    default:\n      return zone;\n  }\n}\n\nexport const /** @type {?} */ reducer = NgrxJsonApiStoreReducer;\n","import {Injectable, OnDestroy} from '@angular/core';\n\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\n\nimport * as _ from 'lodash/index';\n\nimport {Action, Store} from '@ngrx/store';\nimport {Actions, Effect} from '@ngrx/effects';\n\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/concatAll';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/mapTo';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/switchMapTo';\nimport'rxjs/add/operator/take';\nimport'rxjs/add/operator/toArray';\nimport'rxjs/add/operator/withLatestFrom';\nimport'rxjs/add/operator/takeWhile';\nimport'rxjs/add/operator/takeUntil';\n\nimport {\n  ApiApplyFailAction,\n  ApiApplyInitAction,\n  ApiApplySuccessAction,\n  ApiDeleteFailAction,\n  ApiDeleteInitAction,\n  ApiDeleteSuccessAction,\n  ApiGetFailAction,\n  ApiGetInitAction,\n  ApiGetSuccessAction,\n  ApiPatchFailAction,\n  ApiPatchInitAction,\n  ApiPatchSuccessAction,\n  ApiPostFailAction,\n  ApiPostInitAction,\n  ApiPostSuccessAction,\n  ApiQueryRefreshAction,\n  LocalQueryFailAction,\n  LocalQueryInitAction,\n  LocalQuerySuccessAction,\n  NgrxJsonApiActionTypes,\n} from './actions';\nimport {NgrxJsonApi} from './api';\nimport {\n  getNgrxJsonApiZone, selectNgrxJsonApiZone, selectStoreResource,\n  selectStoreResourcesOfType\n} from './selectors';\nimport {\n  NgrxJsonApiConfig,\n  NgrxJsonApiStore, NgrxJsonApiStoreData, NgrxJsonApiStoreResources, OperationType, Payload, Query, Resource,\n  ResourceError,\n  StoreResource,\n} from './interfaces';\nimport {generatePayload, getPendingChanges, sortPendingChanges,filterResources} from './utils';\nexport class NgrxJsonApiEffects implements OnDestroy {\n  @Effect()\n  createResource$: Observable<Action> = this.actions$\n    .ofType<ApiPostInitAction>(NgrxJsonApiActionTypes.API_POST_INIT)\n    .mergeMap((action: ApiPostInitAction) => {\n      const /** @type {?} */ payload = this.generatePayload(action.payload, 'POST');\n      return this.jsonApi\n        .create(payload.query, payload.jsonApiData)\n        .map(\n          (response: HttpResponse<any>) =>\n            new ApiPostSuccessAction({\n              jsonApiData: response.body,\n              query: payload.query,\n            }, action.zoneId)\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiPostFailAction(this.toErrorPayload(payload.query, error), action.zoneId)\n          )\n        );\n    });\n\n  @Effect()\n  updateResource$ = this.actions$\n    .ofType<ApiPatchInitAction>(NgrxJsonApiActionTypes.API_PATCH_INIT)\n    .mergeMap((action: ApiPatchInitAction) => {\n      const /** @type {?} */ payload = this.generatePayload(action.payload, 'PATCH');\n      return this.jsonApi\n        .update(payload.query, payload.jsonApiData)\n        .map(\n          (response: HttpResponse<any>) =>\n            new ApiPatchSuccessAction({\n              jsonApiData: response.body,\n              query: payload.query,\n            }, action.zoneId)\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiPatchFailAction(this.toErrorPayload(payload.query, error), action.zoneId)\n          )\n        );\n    });\n\n  @Effect()\n  readResource$ = this.actions$\n    .ofType<ApiGetInitAction>(NgrxJsonApiActionTypes.API_GET_INIT)\n    .mergeMap((action: ApiGetInitAction) => {\n      const /** @type {?} */ query = action.payload;\n      return this.jsonApi\n        .find(query)\n        .map((response: HttpResponse<any>) => response.body)\n        .map(\n          data =>\n            new ApiGetSuccessAction({\n              jsonApiData: data,\n              query: query,\n            }, action.zoneId)\n        )\n        .catch(error =>\n          Observable.of(new ApiGetFailAction(this.toErrorPayload(query, error), action.zoneId))\n        );\n    });\n/**\n * @param {?} query\n * @return {?}\n */\nprivate localQueryInitEventFor(query: Query) {\n    return this.actions$\n      .ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.LOCAL_QUERY_INIT)\n      .map(action => /** @type {?} */(( action as LocalQueryInitAction)))\n      .filter(action => query.queryId == action.payload.queryId);\n  }\n/**\n * @param {?} query\n * @return {?}\n */\nprivate removeQueryEventFor(query: Query) {\n    return this.actions$\n      .ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.REMOVE_QUERY)\n      .map(action => /** @type {?} */(( action as LocalQueryInitAction)))\n      .filter(action => query.queryId == action.payload);\n  }\n\n  @Effect()\n  queryStore$ = this.actions$\n    .ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.LOCAL_QUERY_INIT)\n    .mergeMap((action: LocalQueryInitAction) => {\n      const /** @type {?} */ query = action.payload;\n      return this.store\n        .let(selectNgrxJsonApiZone(action.zoneId))\n        .let(this.executeLocalQuery(query))\n        .map(\n          results =>\n            new LocalQuerySuccessAction({\n              jsonApiData: { data: results },\n              query: query,\n            }, action.zoneId)\n        )\n        .catch(error =>\n          Observable.of(\n            new LocalQueryFailAction(this.toErrorPayload(query, error), action.zoneId)\n          )\n        )\n        .takeUntil(this.localQueryInitEventFor(query))\n        .takeUntil(this.removeQueryEventFor(query));\n    });\n/**\n * @param {?} query\n * @return {?}\n */\nprivate executeLocalQuery(query: Query) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      let /** @type {?} */ selected$: Observable<any>;\n      if (!query.type) {\n        return state$.map(() => Observable.throw('Unknown query'));\n      } else if (query.type && query.id) {\n        selected$ = state$.let(\n          selectStoreResource({ type: query.type, id: query.id })\n        );\n      } else {\n        selected$ = state$\n          .let(selectStoreResourcesOfType(query.type))\n          .combineLatest(\n            state$.map(it => it.data),\n            (\n              resources: NgrxJsonApiStoreResources,\n              storeData: NgrxJsonApiStoreData\n            ) =>\n              filterResources(\n                resources,\n                storeData,\n                query,\n                this.config.resourceDefinitions,\n                this.config.filteringConfig\n              )\n          );\n      }\n      return selected$.distinctUntilChanged();\n    };\n  }\n\n  @Effect()\n  deleteResource$ = this.actions$\n    .ofType<ApiDeleteInitAction>(NgrxJsonApiActionTypes.API_DELETE_INIT)\n    .mergeMap((action: ApiDeleteInitAction) => {\n      const /** @type {?} */ payload = this.generatePayload(action.payload, 'DELETE');\n      return this.jsonApi\n        .delete(payload.query)\n        .map((response: HttpResponse<any>) => response.body)\n        .map(\n          data =>\n            new ApiDeleteSuccessAction({\n              jsonApiData: data,\n              query: payload.query,\n            }, action.zoneId)\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiDeleteFailAction(this.toErrorPayload(payload.query, error), action.zoneId)\n          )\n        );\n    });\n\n  @Effect()\n  triggerReadOnQueryRefresh$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_QUERY_REFRESH)\n    .withLatestFrom(this.store, (action: ApiQueryRefreshAction, store) => {\n      let /** @type {?} */ queryId = action.payload;\n      let /** @type {?} */ state = getNgrxJsonApiZone(store, action.zoneId);\n      let /** @type {?} */ query = state.queries[queryId].query;\n      return new ApiGetInitAction(query, action.zoneId);\n    });\n\n  @Effect()\n  refreshQueriesOnDelete$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_DELETE_SUCCESS)\n    .withLatestFrom(this.store, (action: ApiDeleteSuccessAction, store) => {\n      let /** @type {?} */ id = { id: action.payload.query.id, type: action.payload.query.type };\n      if (!id.id || !id.type) {\n        throw new Error(\n          'API_DELETE_SUCCESS did not carry resource id and type information'\n        );\n      }\n\n      let /** @type {?} */ state = getNgrxJsonApiZone(store, action.zoneId);\n      let /** @type {?} */ actions = [];\n      for (let /** @type {?} */ queryId in state.queries) {\n        if (state.queries.hasOwnProperty(queryId)) {\n          let /** @type {?} */ query = state.queries[queryId];\n          if (query.resultIds) {\n            let /** @type {?} */ needsRefresh =\n              _.findIndex(query.resultIds, function(o) {\n                return _.isEqual(id, o);\n              }) !== -1;\n\n            let /** @type {?} */ sameIdRequested =\n              query.query.id === id.id && query.query.type === id.type;\n            if (sameIdRequested && (needsRefresh || _.isEmpty(query.errors))) {\n              throw new Error(\n                'store is in invalid state, queries for deleted' +\n                  ' resource should have been emptied and marked with 404 error'\n              );\n            }\n\n            if (needsRefresh) {\n              actions.push(new ApiQueryRefreshAction(queryId, action.zoneId));\n            }\n          }\n        }\n      }\n      return actions;\n    })\n    .flatMap(actions => Observable.of(...actions));\n/**\n * @param {?} pendingChange\n * @param {?} zoneId\n * @return {?}\n */\nprivate handlePendingCreate(pendingChange: StoreResource, zoneId: string){\n    let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'POST');\n    return this.jsonApi\n      .create(payload.query, payload.jsonApiData)\n      .map(\n        response =>\n          new ApiPostSuccessAction({\n            jsonApiData: response.body,\n            query: payload.query,\n          }, zoneId)\n      )\n      .catch(error =>\n        Observable.of(\n          new ApiPostFailAction(\n            this.toErrorPayload(payload.query, error), zoneId\n          )\n        )\n      );\n  }\n/**\n * @param {?} pendingChange\n * @param {?} zoneId\n * @return {?}\n */\nprivate handlePendingUpdate(pendingChange: StoreResource, zoneId: string) {\n    let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'PATCH');\n    return (\n      this.jsonApi\n        .update(payload.query, payload.jsonApiData)\n        .map(\n          response =>\n            new ApiPatchSuccessAction({\n              jsonApiData: response.body,\n              query: payload.query,\n            }, zoneId)\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiPatchFailAction(\n              this.toErrorPayload(payload.query, error), zoneId\n            )\n          )\n        )\n    );\n  }\n/**\n * @param {?} pendingChange\n * @param {?} zoneId\n * @return {?}\n */\nprivate handlePendingDelete(pendingChange: StoreResource, zoneId: string) {\n    let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'DELETE');\n    return (\n      this.jsonApi\n        .delete(payload.query)\n        .map(\n          response =>\n            new ApiDeleteSuccessAction({\n              jsonApiData: response.body,\n              query: payload.query,\n            }, zoneId)\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiDeleteFailAction(\n              this.toErrorPayload(payload.query, error), zoneId\n            )\n          )\n        )\n    );\n  }\n\n\n  @Effect()\n  applyResources$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_APPLY_INIT)\n    .filter(() => this.jsonApi.config.applyEnabled !== false)\n    .withLatestFrom(this.store,\n      (action: ApiApplyInitAction, storeState: any) => {\n        const /** @type {?} */ ngrxstore = getNgrxJsonApiZone(storeState, action.zoneId);\n        const /** @type {?} */ payload = ( /** @type {?} */((action as ApiApplyInitAction))).payload;\n        const /** @type {?} */ pending: Array<StoreResource> = getPendingChanges(\n          ngrxstore.data,\n          payload.ids,\n          payload.include\n        );\n\n        if (pending.length === 0) {\n          return Observable.of(new ApiApplySuccessAction([], action.zoneId));\n        }\n        const /** @type {?} */ sortedPending = sortPendingChanges(pending);\n        let /** @type {?} */ actions: Array<Observable<Action>> = [];\n        for (let /** @type {?} */ pendingChange of sortedPending) {\n          if (pendingChange.state === 'CREATED') {\n            actions.push(this.handlePendingCreate(pendingChange, action.zoneId));\n          } else if (pendingChange.state === 'UPDATED') {\n            actions.push(this.handlePendingUpdate(pendingChange, action.zoneId));\n          } else if (pendingChange.state === 'DELETED') {\n            actions.push(this.handlePendingDelete(pendingChange, action.zoneId));\n          } else {\n            throw new Error('unknown state ' + pendingChange.state);\n          }\n        }\n        return Observable.of(...actions)\n          .concatAll()\n          .toArray()\n          .map(actions => this.toApplyAction(actions, action.zoneId));\n      }\n    )\n    .flatMap(actions => actions);\nprivate config: NgrxJsonApiConfig;\n/**\n * @param {?} actions$\n * @param {?} jsonApi\n * @param {?} store\n */\nconstructor(\nprivate actions$: Actions,\nprivate jsonApi: NgrxJsonApi,\nprivate store: Store<any>,\n  ) {\n    this.config = this.jsonApi.config;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {}\n/**\n * @param {?} actions\n * @param {?} zoneId\n * @return {?}\n */\nprivate toApplyAction(actions: Array<Action>, zoneId: string): any {\n    for (let /** @type {?} */ action of actions) {\n      if (\n        action.type === NgrxJsonApiActionTypes.API_POST_FAIL ||\n        action.type === NgrxJsonApiActionTypes.API_PATCH_FAIL ||\n        action.type === NgrxJsonApiActionTypes.API_DELETE_FAIL\n      ) {\n        return new ApiApplyFailAction(actions, zoneId);\n      }\n    }\n    return new ApiApplySuccessAction(actions, zoneId);\n  }\n/**\n * @param {?} query\n * @param {?} response\n * @return {?}\n */\nprivate toErrorPayload(\n    query: Query,\n    response: HttpErrorResponse | any\n  ): Payload {\n    let /** @type {?} */ contentType: String = null;\n    if (response && response.headers) {\n      contentType = response.headers.get('Content-Type');\n    }\n    let /** @type {?} */ document = null;\n    if (\n      contentType != null &&\n      contentType.startsWith('application/vnd.api+json')\n    ) {\n      document = response;\n    }\n    if (\n      document &&\n      document.error &&\n      document.error.errors &&\n      document.error.errors.length > 0\n    ) {\n      return {\n        query: query,\n        jsonApiData: document.error,\n      };\n    } else {\n      // transform http to json api error\n      let /** @type {?} */ errors: Array<ResourceError> = [];\n      let /** @type {?} */ error: ResourceError = {\n        status: String(response.status),\n        code: response.statusText,\n      };\n\n      errors.push(error);\n      // got json api errors\n\n      return {\n        query: query,\n        jsonApiData: {\n          errors: errors,\n        },\n      };\n    }\n  }\n/**\n * @param {?} resource\n * @param {?} operation\n * @return {?}\n */\nprivate generatePayload(\n    resource: Resource,\n    operation: OperationType\n  ): Payload {\n    return generatePayload(resource, operation);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Actions, },\n{type: NgrxJsonApi, },\n{type: Store, },\n];\n}\n\nfunction NgrxJsonApiEffects_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiEffects.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgrxJsonApiEffects.ctorParameters;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.createResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.updateResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.readResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.queryStore$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.deleteResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.triggerReadOnQueryRefresh$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.refreshQueriesOnDelete$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.applyResources$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.config;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.actions$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.jsonApi;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.store;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import * as _ from 'lodash/index';\n\nimport {\n  HttpHeaders,\n  HttpClient,\n  HttpRequest,\n  // required for building\n  HttpHeaderResponse,\n  HttpProgressEvent,\n  HttpResponse,\n  HttpSentEvent,\n  HttpUserEvent,\n} from '@angular/common/http';\n\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/observable/throw';\n\nimport {\n  Document,\n  NgrxJsonApiConfig,\n  OperationType,\n  ResourceDefinition,\n  Query,\n  QueryParams,\n} from './interfaces';\nimport {\n  generateIncludedQueryParams,\n  generateFieldsQueryParams,\n  generateFilteringQueryParams,\n  generateSortingQueryParams,\n  generateQueryParams,\n} from './utils';\nexport class NgrxJsonApi {\npublic headers: HttpHeaders = new HttpHeaders({\n    'Content-Type': 'application/vnd.api+json',\n    Accept: 'application/vnd.api+json',\n  });\npublic requestUrl: string;\npublic definitions = this.config.resourceDefinitions;\n/**\n * @param {?} http\n * @param {?} config\n */\nconstructor(private http: HttpClient,\npublic config: NgrxJsonApiConfig) {}\n/**\n * @param {?} query\n * @param {?} operation\n * @return {?}\n */\nprivate urlBuilder(query: Query, operation: OperationType) {\n    switch (operation) {\n      case 'GET': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        } else if (query.type) {\n          return this.collectionUrlFor(query.type);\n        }\n      }\n      case 'DELETE': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        }\n      }\n      case 'PATCH': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        }\n      }\n      case 'POST': {\n        return this.collectionUrlFor(query.type);\n      }\n    }\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate collectionPathFor(type: string) {\n    // assume that type == collectionPath if not configured otherwise\n    let /** @type {?} */ definition = _.find(this.definitions, { type: type });\n    if (definition) {\n      return `${definition.collectionPath}`;\n    } else {\n      return type;\n    }\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate collectionUrlFor(type: string) {\n    let /** @type {?} */ collectionPath = this.collectionPathFor(type);\n    return `${this.config.apiUrl}/${collectionPath}`;\n  }\n/**\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nprivate resourcePathFor(type: string, id: string) {\n    let /** @type {?} */ collectionPath = this.collectionPathFor(type);\n    return `${collectionPath}/${encodeURIComponent(id)}`;\n  }\n/**\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nprivate resourceUrlFor(type: string, id: string) {\n    let /** @type {?} */ resourcePath = this.resourcePathFor(type, id);\n    return `${this.config.apiUrl}/${resourcePath}`;\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic find(query: Query) {\n    let /** @type {?} */ _generateIncludedQueryParams = generateIncludedQueryParams;\n    let /** @type {?} */ _generateFilteringQueryParams = generateFilteringQueryParams;\n    let /** @type {?} */ _generateFieldsQueryParams = generateFieldsQueryParams;\n    let /** @type {?} */ _generateSortingQueryParams = generateSortingQueryParams;\n    let /** @type {?} */ _generateQueryParams = generateQueryParams;\n\n    if (this.config.hasOwnProperty('urlBuilder')) {\n      let /** @type {?} */ urlBuilder = this.config.urlBuilder;\n\n      if (urlBuilder.generateIncludedQueryParams) {\n        _generateIncludedQueryParams = urlBuilder.generateIncludedQueryParams;\n      }\n      if (urlBuilder.generateFilteringQueryParams) {\n        _generateFilteringQueryParams = urlBuilder.generateFilteringQueryParams;\n      }\n      if (urlBuilder.generateFieldsQueryParams) {\n        _generateFieldsQueryParams = urlBuilder.generateFieldsQueryParams;\n      }\n      if (urlBuilder.generateSortingQueryParams) {\n        _generateSortingQueryParams = urlBuilder.generateSortingQueryParams;\n      }\n      if (urlBuilder.generateQueryParams) {\n        _generateQueryParams = urlBuilder.generateQueryParams;\n      }\n    }\n\n    let /** @type {?} */ queryParams = '';\n    let /** @type {?} */ includedParam = '';\n    let /** @type {?} */ filteringParams = '';\n    let /** @type {?} */ sortingParams = '';\n    let /** @type {?} */ fieldsParams = '';\n    let /** @type {?} */ offsetParams = '';\n    let /** @type {?} */ limitParams = '';\n\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (query.hasOwnProperty('params') && !_.isEmpty(query.params)) {\n      if (_.hasIn(query.params, 'include')) {\n        includedParam = _generateIncludedQueryParams(query.params.include);\n      }\n      if (_.hasIn(query.params, 'filtering')) {\n        filteringParams = _generateFilteringQueryParams(query.params.filtering);\n      }\n      if (_.hasIn(query.params, 'sorting')) {\n        sortingParams = _generateSortingQueryParams(query.params.sorting);\n      }\n      if (_.hasIn(query.params, 'fields')) {\n        fieldsParams = _generateFieldsQueryParams(query.params.fields);\n      }\n      if (_.hasIn(query.params, 'limit')) {\n        limitParams = 'page[limit]=' + query.params.limit;\n      }\n      if (_.hasIn(query.params, 'offset')) {\n        offsetParams = 'page[offset]=' + query.params.offset;\n      }\n    }\n    queryParams = _generateQueryParams(\n      includedParam,\n      filteringParams,\n      sortingParams,\n      fieldsParams,\n      offsetParams,\n      limitParams\n    );\n\n    let /** @type {?} */ requestOptions = {\n      method: 'GET',\n      url: this.urlBuilder(query, 'GET') + queryParams,\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @param {?} document\n * @return {?}\n */\npublic create(query: Query, document: Document) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (typeof document === undefined) {\n      return Observable.throw('Data not found');\n    }\n\n    let /** @type {?} */ requestOptions = {\n      method: 'POST',\n      url: this.urlBuilder(query, 'POST'),\n      body: JSON.stringify({ data: document.data }),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @param {?} document\n * @return {?}\n */\npublic update(query: Query, document: Document) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (typeof document === undefined) {\n      return Observable.throw('Data not found');\n    }\n    let /** @type {?} */ requestOptions = {\n      method: 'PATCH',\n      url: this.urlBuilder(query, 'PATCH'),\n      body: JSON.stringify({ data: document.data }),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic delete(query: Query) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    let /** @type {?} */ requestOptions = {\n      method: 'DELETE',\n      url: this.urlBuilder(query, 'DELETE'),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} requestOptions\n * @return {?}\n */\nprivate request(requestOptions: any) {\n    let /** @type {?} */ request: HttpRequest<any>;\n    let /** @type {?} */ newRequestOptions = {\n      ...requestOptions,\n      headers: this.headers,\n      observe: 'response',\n    };\n\n    if (requestOptions.method === 'GET') {\n      let { method, url, ...init } = newRequestOptions;\n      return this.http.get(url, init);\n    } else if (requestOptions.method === 'POST') {\n      let { method, url, body, ...init } = newRequestOptions;\n      return this.http.post(url, body, init);\n    } else if (requestOptions.method === 'PATCH') {\n      let { method, url, body, ...init } = newRequestOptions;\n      return this.http.patch(url, body, init);\n    } else if (requestOptions.method === 'DELETE') {\n      let { method, url, ...init } = newRequestOptions;\n      return this.http.delete(url, init);\n    }\n  }\n}\n\nfunction NgrxJsonApi_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApi.prototype.headers;\n/** @type {?} */\nNgrxJsonApi.prototype.requestUrl;\n/** @type {?} */\nNgrxJsonApi.prototype.definitions;\n/** @type {?} */\nNgrxJsonApi.prototype.http;\n/** @type {?} */\nNgrxJsonApi.prototype.config;\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/let';\n\nimport { NgrxJsonApiService } from './services';\nimport { Resource, ResourceIdentifier, StoreResource } from './interfaces';\nexport class SelectStoreResourcePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} id\n * @return {?}\n */\ntransform(id: ResourceIdentifier): Observable<StoreResource> {\n    return this.service.selectStoreResource(id);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'jaSelectStoreResource' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction SelectStoreResourcePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectStoreResourcePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectStoreResourcePipe.ctorParameters;\n/** @type {?} */\nSelectStoreResourcePipe.prototype.service;\n}\n\nexport class DenormaliseStoreResourcePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} obs\n * @return {?}\n */\ntransform(\n    obs: Observable<StoreResource> | Observable<StoreResource[]>\n  ): Observable<StoreResource> | Observable<StoreResource[]> {\n    return this.service.denormaliseResource(obs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'denormaliseStoreResource' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction DenormaliseStoreResourcePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDenormaliseStoreResourcePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDenormaliseStoreResourcePipe.ctorParameters;\n/** @type {?} */\nDenormaliseStoreResourcePipe.prototype.service;\n}\n\nexport class GetDenormalisedValuePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} path\n * @param {?} storeResource\n * @return {?}\n */\ntransform(path: string, storeResource: StoreResource): any {\n    return this.service.getDenormalisedValue(path, storeResource);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'getDenormalisedValue' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction GetDenormalisedValuePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nGetDenormalisedValuePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGetDenormalisedValuePipe.ctorParameters;\n/** @type {?} */\nGetDenormalisedValuePipe.prototype.service;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import * as _ from 'lodash/index';\n\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/finally';\n\nimport {Store} from '@ngrx/store';\n\nimport {\n  selectManyQueryResult, selectNgrxJsonApiDefaultZone, selectNgrxJsonApiZone,\n  selectOneQueryResult,\n  selectStoreResource\n} from './selectors';\nimport {\n  ApiApplyInitAction,\n  ApiDeleteInitAction,\n  ApiGetInitAction,\n  ApiPatchInitAction,\n  ApiPostInitAction,\n  ApiQueryRefreshAction,\n  ClearStoreAction,\n  CompactStoreAction,\n  DeleteStoreResourceAction,\n  LocalQueryInitAction,\n  ModifyStoreResourceErrorsAction,\n  NewStoreResourceAction,\n  PatchStoreResourceAction,\n  PostStoreResourceAction,\n  RemoveQueryAction,\n} from './actions';\nimport {\n  ManyQueryResult, NGRX_JSON_API_DEFAULT_ZONE, NgrxJsonApiConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  OneQueryResult,\n  Query,\n  QueryResult,\n  Resource,\n  ResourceError,\n  ResourceIdentifier,\n  StoreResource,\n} from './interfaces';\nimport {\n  denormaliseStoreResource,\n  denormaliseStoreResources,\n  getDenormalisedPath,\n  getDenormalisedValue,\n  uuid,\n} from './utils';\n\nexport interface FindOptions {\n  query: Query;\n  fromServer?: boolean;\n  denormalise?: boolean;\n}\n\nexport interface PutQueryOptions {\n  query: Query;\n  fromServer?: boolean;\n}\n\nexport interface PostResourceOptions {\n  resource: Resource;\n  toRemote?: boolean;\n}\n\nexport interface PatchResourceOptions {\n  resource: Resource;\n  toRemote?: boolean;\n}\n\nexport interface NewResourceOptions {\n  resource: Resource;\n}\n\nexport interface DeleteResourceOptions {\n  resourceId: ResourceIdentifier;\n  toRemote?: boolean;\n}\n\n/**\n * This internface is deprecated, do no longer use.\n */\nexport interface Options {\n  query?: Query;\n  denormalise?: boolean;\n  fromServer?: boolean;\n  resource?: Resource;\n  toRemote?: boolean;\n  resourceId?: ResourceIdentifier;\n}\n/**\n * Represents an isolated area in the store with its own set of resources and queries.\n * 'api' is the default zone that already historically has been put beneath NgrxJsonApi within the store.\n */\nexport class NgrxJsonApiZoneService {\n/**\n * @param {?} zoneId\n * @param {?} store\n */\nconstructor(protected zoneId: string, protected store: Store<any>) {\n  }\n/**\n * Adds the given query to the store. Any existing query with the same queryId is replaced.\n * Make use of selectResults(...) to fetch the data.\n * @param {?} options\n * @return {?}\n */\npublic putQuery(options: PutQueryOptions) {\n    let /** @type {?} */ query = options.query;\n    let /** @type {?} */ fromServer = _.isUndefined(options.fromServer)\n      ? true\n      : options.fromServer;\n\n    if (!query.queryId) {\n      throw new Error('to query must have a queryId');\n    }\n\n    if (fromServer) {\n      this.store.dispatch(new ApiGetInitAction(query, this.zoneId));\n    } else {\n      this.store.dispatch(new LocalQueryInitAction(query, this.zoneId));\n    }\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic refreshQuery(queryId: string) {\n    this.store.dispatch(new ApiQueryRefreshAction(queryId, this.zoneId));\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic removeQuery(queryId: string) {\n    this.store.dispatch(new RemoveQueryAction(queryId, this.zoneId));\n  }\n/**\n * Selects the data of the given query.\n * \n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?} observable holding the data as array of resources.\n */\npublic selectManyResults(queryId: string, denormalize = false): Observable<ManyQueryResult> {\n    return this.store.let(selectNgrxJsonApiZone(this.zoneId)).let(selectManyQueryResult(queryId, denormalize));\n  }\n/**\n * Selects the data of the given query.\n * \n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?} observable holding the data as array of resources.\n */\npublic selectOneResults(queryId: string, denormalize = false): Observable<OneQueryResult> {\n    return this.store.let(selectNgrxJsonApiZone(this.zoneId)).let(selectOneQueryResult(queryId, denormalize));\n  }\n/**\n * @param {?} identifier of the resource\n * @return {?} observable of the resource\n */\npublic selectStoreResource(identifier: ResourceIdentifier): Observable<StoreResource> {\n    return this.store.let(selectNgrxJsonApiZone(this.zoneId)).let(selectStoreResource(identifier));\n  }\n/**\n * Updates the given resource in the store with the provided data.\n * Use commit() to send the changes to the remote JSON API endpoint.\n * \n * @param {?} options\n * @return {?}\n */\npublic patchResource(options: PatchResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiPatchInitAction(resource, this.zoneId));\n    } else {\n      this.store.dispatch(new PatchStoreResourceAction(resource, this.zoneId));\n    }\n  }\n/**\n * Creates a new resources that is hold locally in the store\n * and my later be posted.\n * \n * @param {?} options\n * @return {?}\n */\npublic newResource(options: NewResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    this.store.dispatch(new NewStoreResourceAction(resource, this.zoneId));\n  }\n/**\n * Adds the given resource to the store. Any already existing\n * resource with the same id gets replaced. Use commit() to send\n * the changes to the remote JSON API endpoint.\n * \n * @param {?} options\n * @return {?}\n */\npublic postResource(options: PostResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiPostInitAction(resource, this.zoneId));\n    } else {\n      this.store.dispatch(new PostStoreResourceAction(resource, this.zoneId));\n    }\n  }\n/**\n * Marks the given resource for deletion.\n * \n * @param {?} options\n * @return {?}\n */\npublic deleteResource(options: DeleteResourceOptions) {\n    let /** @type {?} */ resourceId = options.resourceId;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiDeleteInitAction(resourceId, this.zoneId));\n    } else {\n      this.store.dispatch(new DeleteStoreResourceAction(resourceId, this.zoneId));\n    }\n  }\n/**\n * Applies all pending changes to the remote JSON API endpoint.\n * @return {?}\n */\npublic apply() {\n    this.store.dispatch(new ApiApplyInitAction({}, this.zoneId));\n  }\n/**\n * Clear all the contents from the store.\n * @return {?}\n */\npublic clear() {\n    this.store.dispatch(new ClearStoreAction(this.zoneId));\n  }\n/**\n * Compacts the store by removing unreferences and unchanges resources.\n * @return {?}\n */\npublic compact() {\n    this.store.dispatch(new CompactStoreAction(this.zoneId));\n  }\n/**\n * Adds the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic addResourceErrors(id: ResourceIdentifier,\n                           errors: Array<ResourceError>) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'ADD',\n      }, this.zoneId)\n    );\n  }\n/**\n * Removes the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic removeResourceErrors(id: ResourceIdentifier,\n                              errors: Array<ResourceError>) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'REMOVE',\n      }, this.zoneId)\n    );\n  }\n/**\n * Sets the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic setResourceErrors(id: ResourceIdentifier,\n                           errors: Array<ResourceError>) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'SET',\n      }, this.zoneId)\n    );\n  }\n\n}\n\nfunction NgrxJsonApiZoneService_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiZoneService.prototype.zoneId;\n/** @type {?} */\nNgrxJsonApiZoneService.prototype.store;\n}\n\nexport class NgrxJsonApiService extends NgrxJsonApiZoneService {\nprivate test = true;\n/**\n * Keeps current snapshot of the store to allow fast access to resources.\n */\nprivate _storeSnapshot: NgrxJsonApiStore;\n/**\n * @param {?} store\n * @param {?} config\n */\nconstructor(store: Store<any>,\nprivate config: NgrxJsonApiConfig) {\n    super(NGRX_JSON_API_DEFAULT_ZONE, store);\n  }\n/**\n * @return {?}\n */\npublic getDefaultZone(): NgrxJsonApiZoneService{\n    return this;\n  }\n/**\n * @param {?} zoneId\n * @return {?}\n */\npublic getZone(zoneId: string): NgrxJsonApiZoneService{\n    return new NgrxJsonApiZoneService(zoneId, this.store);\n  }\n/**\n * @param {?} options\n * @return {?}\n */\npublic findOne(options: FindOptions): Observable<OneQueryResult> {\n    return /** @type {?} */(( <Observable<OneQueryResult>>this.findInternal(options, false)));\n  }\n/**\n * @param {?} options\n * @return {?}\n */\npublic findMany(options: FindOptions): Observable<ManyQueryResult> {\n    return /** @type {?} */(( <Observable<ManyQueryResult>>this.findInternal(options, true)));\n  }\n/**\n * @return {?}\n */\npublic get storeSnapshot() {\n    if (!this._storeSnapshot) {\n      this.store\n        .let(selectNgrxJsonApiDefaultZone())\n        .subscribe(it => (this._storeSnapshot = /** @type {?} */(( it as NgrxJsonApiStore))));\n\n      if (!this._storeSnapshot) {\n        throw new Error('failed to initialize store snapshot');\n      }\n    }\n    return this._storeSnapshot;\n  }\n/**\n * @param {?} options\n * @param {?} multi\n * @return {?}\n */\nprivate findInternal(options: FindOptions,\n                       multi: boolean): Observable<QueryResult> {\n    let /** @type {?} */ query = options.query;\n    let /** @type {?} */ fromServer = _.isUndefined(options.fromServer)\n      ? true\n      : options.fromServer;\n    let /** @type {?} */ denormalise = _.isUndefined(options.denormalise)\n      ? false\n      : options.denormalise;\n\n    let /** @type {?} */ newQuery: Query;\n    if (!query.queryId) {\n      newQuery = {...query, queryId: this.uuid()};\n    } else {\n      newQuery = query;\n    }\n\n    this.putQuery({query: newQuery, fromServer});\n    let /** @type {?} */ queryResult$: Observable<QueryResult>;\n    if (multi) {\n      queryResult$ = this.selectManyResults(newQuery.queryId, denormalise);\n    } else {\n      queryResult$ = this.selectOneResults(newQuery.queryId, denormalise);\n    }\n    return /** @type {?} */(( <Observable<QueryResult>>queryResult$.finally(() =>\n      this.removeQuery(newQuery.queryId)\n    )));\n  }\n/**\n * @return {?}\n */\nprivate uuid() {\n    return uuid();\n  }\n/**\n * Gets the current persisted state of the given resources.\n * Consider the use of selectResource(...) to get an observable of the resource.\n * \n * @param {?} identifier\n * @return {?}\n */\npublic getPersistedResourceSnapshot(identifier: ResourceIdentifier) {\n    let /** @type {?} */ snapshot = this.storeSnapshot;\n    if (\n      snapshot.data[identifier.type] &&\n      snapshot.data[identifier.type][identifier.id]\n    ) {\n      return snapshot.data[identifier.type][identifier.id].persistedResource;\n    }\n    return null;\n  }\n/**\n * Gets the current state of the given resources in the store.\n * Consider the use of selectResource(...) to get an observable of the resource.\n * \n * @param {?} identifier\n * @return {?}\n */\npublic getResourceSnapshot(identifier: ResourceIdentifier) {\n    let /** @type {?} */ snapshot = this.storeSnapshot;\n    if (\n      snapshot.data[identifier.type] &&\n      snapshot.data[identifier.type][identifier.id]\n    ) {\n      return snapshot.data[identifier.type][identifier.id];\n    }\n    return null;\n  }\n/**\n * @param {?} storeResource$\n * @return {?}\n */\npublic denormaliseResource(storeResource$: Observable<StoreResource> | Observable<StoreResource[]>): Observable<StoreResource> | Observable<StoreResource[]> {\n    return /** @type {?} */(( <\n      | Observable<StoreResource>\n      | Observable<StoreResource[]>>storeResource$.combineLatest(\n      this.store\n        .let(selectNgrxJsonApiZone(this.zoneId))\n        .map(state => state.data),\n      (storeResource: StoreResource | StoreResource[],\n       storeData: NgrxJsonApiStoreData) => {\n        if (_.isArray(storeResource)) {\n          return denormaliseStoreResources( /** @type {?} */((\n            storeResource as Array<StoreResource>)),\n            storeData\n          );\n        } else {\n          let /** @type {?} */ resource = /** @type {?} */(( storeResource as StoreResource));\n          return /** @type {?} */(( denormaliseStoreResource(resource, storeData) as StoreResource));\n        }\n      }\n    )));\n  }\n/**\n * @param {?} path\n * @param {?} resourceType\n * @return {?}\n */\npublic getDenormalisedPath(path: string, resourceType: string): string {\n    let /** @type {?} */ pathSeparator = /** @type {?} */(( _.get(\n      this.config,\n      'filteringConfig.pathSeparator'\n    ) as string));\n    return getDenormalisedPath(\n      path,\n      resourceType,\n      this.config.resourceDefinitions,\n      pathSeparator\n    );\n  }\n/**\n * @param {?} path\n * @param {?} storeResource\n * @return {?}\n */\npublic getDenormalisedValue(path: string, storeResource: StoreResource): any {\n    let /** @type {?} */ pathSeparator = /** @type {?} */(( _.get(\n      this.config,\n      'filteringConfig.pathSeparator'\n    ) as string));\n    return getDenormalisedValue(\n      path,\n      storeResource,\n      this.config.resourceDefinitions,\n      pathSeparator\n    );\n  }\n\n\n}\n\nfunction NgrxJsonApiService_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiService.prototype.test;\n/**\n * Keeps current snapshot of the store to allow fast access to resources.\n * @type {?}\n */\nNgrxJsonApiService.prototype._storeSnapshot;\n/** @type {?} */\nNgrxJsonApiService.prototype.config;\n}\n\n","import { Injectable } from '@angular/core';\n\nimport { Action } from '@ngrx/store';\n\nimport {\n  Payload,\n  Resource,\n  ResourceIdentifier,\n  Query,\n  ModifyStoreResourceErrorsPayload,\n} from './interfaces';\n\nexport const /** @type {?} */ NgrxJsonApiActionTypes = {\n  API_POST_INIT: '[NgrxJsonApi] API_POST_INIT',\n  API_POST_SUCCESS: '[NgrxJsonApi] API_POST_SUCCESS',\n  API_POST_FAIL: '[NgrxJsonApi] API_POST_FAIL',\n  API_GET_INIT: '[NgrxJsonApi] API_GET_INIT',\n  API_GET_SUCCESS: '[NgrxJsonApi] API_GET_SUCCESS',\n  API_GET_FAIL: '[NgrxJsonApi] API_GET_FAIL',\n  API_PATCH_INIT: '[NgrxJsonApi] API_PATCH_INIT',\n  API_PATCH_SUCCESS: '[NgrxJsonApi] API_PATCH_SUCCESS',\n  API_PATCH_FAIL: '[NgrxJsonApi] API_PATCH_FAIL',\n  API_DELETE_INIT: '[NgrxJsonApi] API_DELETE_INIT',\n  API_DELETE_SUCCESS: '[NgrxJsonApi] API_DELETE_SUCCESS',\n  API_DELETE_FAIL: '[NgrxJsonApi] API_DELETE_FAIL',\n  API_APPLY_INIT: '[NgrxJsonApi] API_APPLY_INIT',\n  API_APPLY_SUCCESS: '[NgrxJsonApi] API_APPLY_SUCCESS',\n  API_APPLY_FAIL: '[NgrxJsonApi] API_APPLY_FAIL',\n  API_ROLLBACK: '[NgrxJsonApi] API_ROLLBACK',\n  API_QUERY_REFRESH: '[NgrxJsonApi] API_QUERY_REFRESH',\n  LOCAL_QUERY_INIT: '[NgrxJsonApi] LOCAL_QUERY_INIT',\n  LOCAL_QUERY_SUCCESS: '[NgrxJsonApi] LOCAL_QUERY_SUCCESS',\n  LOCAL_QUERY_FAIL: '[NgrxJsonApi] LOCAL_QUERY_FAIL',\n  DELETE_STORE_RESOURCE: '[NgrxJsonApi] DELETE_STORE_RESOURCE',\n  PATCH_STORE_RESOURCE: '[NgrxJsonApi] PATCH_STORE_RESOURCE',\n  NEW_STORE_RESOURCE: '[NgrxJsonApi] NEW_STORE_RESOURCE',\n  POST_STORE_RESOURCE: '[NgrxJsonApi] POST_STORE_RESOURCE',\n  MODIFY_STORE_RESOURCE_ERRORS: '[NgrxJsonApi] MODIFY_STORE_RESOURCE_ERRORS',\n  REMOVE_QUERY: '[NgrxJsonApi] REMOVE_QUERY',\n  COMPACT_STORE: '[NgrxJsonApi] COMPACT_STORE',\n  CLEAR_STORE: '[NgrxJsonApi] CLEAR_STORE',\n};\n\nexport interface ApiApplyInitPayload {\n  /**\n   * optional list of resource identifiers to perform apply. If not specified all change will be applied\n   * to the backend.\n   */\n  ids?: Array<ResourceIdentifier>;\n\n  /**\n   * if the apply action is restricted to a set of resources with the ids parameter. The include flag allows to\n   * specify which relationships to apply as well. Nested relationships are separated by a dot.\n   */\n  include?: Array<string>;\n}\n\nexport interface ApiApplyRollbackPayload extends ApiApplyInitPayload {}\n/**\n * @abstract\n */\nexport abstract class NgrxJsonApiAction implements Action{\n  abstract zoneId?: string;\n  abstract type: string;\nconstructor(){\n  }\n}\n\nfunction NgrxJsonApiAction_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiAction.prototype.zoneId;\n/** @type {?} */\nNgrxJsonApiAction.prototype.type;\n}\n\nexport class ApiApplyInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_INIT;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: ApiApplyInitPayload,\npublic zoneId: string) {\n    super();\n  }\n}\n\nfunction ApiApplyInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplyInitAction.prototype.type;\n/** @type {?} */\nApiApplyInitAction.prototype.payload;\n/** @type {?} */\nApiApplyInitAction.prototype.zoneId;\n}\n\nexport class ApiApplySuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_SUCCESS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Array<Action>,\npublic zoneId: string) {super();}\n}\n\nfunction ApiApplySuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplySuccessAction.prototype.type;\n/** @type {?} */\nApiApplySuccessAction.prototype.payload;\n/** @type {?} */\nApiApplySuccessAction.prototype.zoneId;\n}\n\nexport class ApiApplyFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_FAIL;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Array<Action>,\npublic zoneId: string) {super();}\n}\n\nfunction ApiApplyFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplyFailAction.prototype.type;\n/** @type {?} */\nApiApplyFailAction.prototype.payload;\n/** @type {?} */\nApiApplyFailAction.prototype.zoneId;\n}\n\nexport class ApiPostInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_POST_INIT;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Resource,\npublic zoneId: string) {super();}\n}\n\nfunction ApiPostInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostInitAction.prototype.type;\n/** @type {?} */\nApiPostInitAction.prototype.payload;\n/** @type {?} */\nApiPostInitAction.prototype.zoneId;\n}\n\nexport class ApiPostSuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_POST_SUCCESS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiPostSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostSuccessAction.prototype.type;\n/** @type {?} */\nApiPostSuccessAction.prototype.payload;\n/** @type {?} */\nApiPostSuccessAction.prototype.zoneId;\n}\n\nexport class ApiPostFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_POST_FAIL;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiPostFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostFailAction.prototype.type;\n/** @type {?} */\nApiPostFailAction.prototype.payload;\n/** @type {?} */\nApiPostFailAction.prototype.zoneId;\n}\n\nexport class ApiDeleteInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_INIT;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: ResourceIdentifier,\npublic zoneId: string) {super();}\n}\n\nfunction ApiDeleteInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteInitAction.prototype.type;\n/** @type {?} */\nApiDeleteInitAction.prototype.payload;\n/** @type {?} */\nApiDeleteInitAction.prototype.zoneId;\n}\n\nexport class ApiDeleteSuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_SUCCESS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiDeleteSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteSuccessAction.prototype.type;\n/** @type {?} */\nApiDeleteSuccessAction.prototype.payload;\n/** @type {?} */\nApiDeleteSuccessAction.prototype.zoneId;\n}\n\nexport class ApiDeleteFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_FAIL;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiDeleteFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteFailAction.prototype.type;\n/** @type {?} */\nApiDeleteFailAction.prototype.payload;\n/** @type {?} */\nApiDeleteFailAction.prototype.zoneId;\n}\n\nexport class ApiGetInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_GET_INIT;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Query,\npublic zoneId: string) {super();}\n}\n\nfunction ApiGetInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetInitAction.prototype.type;\n/** @type {?} */\nApiGetInitAction.prototype.payload;\n/** @type {?} */\nApiGetInitAction.prototype.zoneId;\n}\n\nexport class ApiGetSuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_GET_SUCCESS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiGetSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetSuccessAction.prototype.type;\n/** @type {?} */\nApiGetSuccessAction.prototype.payload;\n/** @type {?} */\nApiGetSuccessAction.prototype.zoneId;\n}\n\nexport class ApiGetFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_GET_FAIL;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiGetFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetFailAction.prototype.type;\n/** @type {?} */\nApiGetFailAction.prototype.payload;\n/** @type {?} */\nApiGetFailAction.prototype.zoneId;\n}\n\nexport class ApiRollbackAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_ROLLBACK;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: ApiApplyRollbackPayload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiRollbackAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiRollbackAction.prototype.type;\n/** @type {?} */\nApiRollbackAction.prototype.payload;\n/** @type {?} */\nApiRollbackAction.prototype.zoneId;\n}\n\nexport class ApiPatchInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_INIT;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Resource,\npublic zoneId: string) {super();}\n}\n\nfunction ApiPatchInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchInitAction.prototype.type;\n/** @type {?} */\nApiPatchInitAction.prototype.payload;\n/** @type {?} */\nApiPatchInitAction.prototype.zoneId;\n}\n\nexport class ApiPatchSuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_SUCCESS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiPatchSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchSuccessAction.prototype.type;\n/** @type {?} */\nApiPatchSuccessAction.prototype.payload;\n/** @type {?} */\nApiPatchSuccessAction.prototype.zoneId;\n}\n\nexport class ApiPatchFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_FAIL;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiPatchFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchFailAction.prototype.type;\n/** @type {?} */\nApiPatchFailAction.prototype.payload;\n/** @type {?} */\nApiPatchFailAction.prototype.zoneId;\n}\n\nexport class DeleteStoreResourceAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.DELETE_STORE_RESOURCE;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: ResourceIdentifier,\npublic zoneId: string) {super();}\n}\n\nfunction DeleteStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nDeleteStoreResourceAction.prototype.type;\n/** @type {?} */\nDeleteStoreResourceAction.prototype.payload;\n/** @type {?} */\nDeleteStoreResourceAction.prototype.zoneId;\n}\n\nexport class PatchStoreResourceAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.PATCH_STORE_RESOURCE;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Resource,\npublic zoneId: string) {super();}\n}\n\nfunction PatchStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nPatchStoreResourceAction.prototype.type;\n/** @type {?} */\nPatchStoreResourceAction.prototype.payload;\n/** @type {?} */\nPatchStoreResourceAction.prototype.zoneId;\n}\n\nexport class NewStoreResourceAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.NEW_STORE_RESOURCE;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Resource,\npublic zoneId: string) {super();}\n}\n\nfunction NewStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nNewStoreResourceAction.prototype.type;\n/** @type {?} */\nNewStoreResourceAction.prototype.payload;\n/** @type {?} */\nNewStoreResourceAction.prototype.zoneId;\n}\n\nexport class PostStoreResourceAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.POST_STORE_RESOURCE;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Resource,\npublic zoneId: string) {super();}\n}\n\nfunction PostStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nPostStoreResourceAction.prototype.type;\n/** @type {?} */\nPostStoreResourceAction.prototype.payload;\n/** @type {?} */\nPostStoreResourceAction.prototype.zoneId;\n}\n\nexport class RemoveQueryAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.REMOVE_QUERY;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: string,\npublic zoneId: string) {super();}\n}\n\nfunction RemoveQueryAction_tsickle_Closure_declarations() {\n/** @type {?} */\nRemoveQueryAction.prototype.type;\n/** @type {?} */\nRemoveQueryAction.prototype.payload;\n/** @type {?} */\nRemoveQueryAction.prototype.zoneId;\n}\n\nexport class LocalQueryInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_INIT;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Query,\npublic zoneId: string) {super();}\n}\n\nfunction LocalQueryInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQueryInitAction.prototype.type;\n/** @type {?} */\nLocalQueryInitAction.prototype.payload;\n/** @type {?} */\nLocalQueryInitAction.prototype.zoneId;\n}\n\nexport class LocalQuerySuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_SUCCESS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction LocalQuerySuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQuerySuccessAction.prototype.type;\n/** @type {?} */\nLocalQuerySuccessAction.prototype.payload;\n/** @type {?} */\nLocalQuerySuccessAction.prototype.zoneId;\n}\n\nexport class LocalQueryFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_FAIL;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction LocalQueryFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQueryFailAction.prototype.type;\n/** @type {?} */\nLocalQueryFailAction.prototype.payload;\n/** @type {?} */\nLocalQueryFailAction.prototype.zoneId;\n}\n\nexport class CompactStoreAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.COMPACT_STORE;\n/**\n * @param {?} zoneId\n */\nconstructor(public zoneId: string) {super();}\n}\n\nfunction CompactStoreAction_tsickle_Closure_declarations() {\n/** @type {?} */\nCompactStoreAction.prototype.type;\n/** @type {?} */\nCompactStoreAction.prototype.zoneId;\n}\n\nexport class ClearStoreAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.CLEAR_STORE;\n/**\n * @param {?} zoneId\n */\nconstructor(public zoneId: string) {super();}\n}\n\nfunction ClearStoreAction_tsickle_Closure_declarations() {\n/** @type {?} */\nClearStoreAction.prototype.type;\n/** @type {?} */\nClearStoreAction.prototype.zoneId;\n}\n\nexport class ApiQueryRefreshAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_QUERY_REFRESH;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: string,\npublic zoneId: string) {\n    super();\n    if (!payload) {\n      throw new Error('no query id provided for ApiQueryRefreshAction');\n    }\n  }\n}\n\nfunction ApiQueryRefreshAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiQueryRefreshAction.prototype.type;\n/** @type {?} */\nApiQueryRefreshAction.prototype.payload;\n/** @type {?} */\nApiQueryRefreshAction.prototype.zoneId;\n}\n\nexport class ModifyStoreResourceErrorsAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.MODIFY_STORE_RESOURCE_ERRORS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: ModifyStoreResourceErrorsPayload,\npublic zoneId: string) {super();}\n}\n\nfunction ModifyStoreResourceErrorsAction_tsickle_Closure_declarations() {\n/** @type {?} */\nModifyStoreResourceErrorsAction.prototype.type;\n/** @type {?} */\nModifyStoreResourceErrorsAction.prototype.payload;\n/** @type {?} */\nModifyStoreResourceErrorsAction.prototype.zoneId;\n}\n\n\nexport type NgrxJsonApiActions =\n  | ApiApplyInitAction\n  | ApiApplySuccessAction\n  | ApiApplyFailAction\n  | ApiPostInitAction\n  | ApiPostSuccessAction\n  | ApiPostFailAction\n  | ApiDeleteInitAction\n  | ApiDeleteSuccessAction\n  | ApiDeleteFailAction\n  | ApiGetInitAction\n  | ApiGetSuccessAction\n  | ApiGetFailAction\n  | ApiRollbackAction\n  | ApiPatchInitAction\n  | ApiPatchSuccessAction\n  | ApiPatchFailAction\n  | DeleteStoreResourceAction\n  | PatchStoreResourceAction\n  | PostStoreResourceAction\n  | NewStoreResourceAction\n  | RemoveQueryAction\n  | ApiQueryRefreshAction\n  | LocalQueryInitAction\n  | LocalQuerySuccessAction\n  | LocalQueryFailAction\n  | ModifyStoreResourceErrorsAction\n  | CompactStoreAction\n  | ClearStoreAction;\n","import * as _ from 'lodash/index';\n\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/concat';\nimport'rxjs/add/observable/throw';\nimport'rxjs/add/operator/combineLatest';\nimport'rxjs/add/operator/concat';\nimport'rxjs/add/operator/concatMap';\nimport'rxjs/add/operator/distinctUntilChanged';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/let';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/observable/zip';\n\nimport {Store} from '@ngrx/store';\n\nimport {\n  ManyQueryResult, NGRX_JSON_API_DEFAULT_ZONE,\n  NgrxJsonApiState,\n  NgrxJsonApiStore, NgrxJsonApiStoreResources,\n  NgrxJsonApiZone, OneQueryResult, Resource,\n  ResourceIdentifier, NgrxJsonApiStoreQueries,\n  StoreResource, NgrxJsonApiStoreData, StoreQuery\n} from './interfaces';\nimport {denormaliseStoreResource, denormaliseStoreResources} from './utils';\n/**\n * @return {?}\n */\nexport function selectNgrxJson(){\n  return  (state$: Store<any>) => state$.select('NgrxJsonApi')\n    .map(it => /** @type {?} */(( it as NgrxJsonApiState)))\n    .filter(it => !_.isUndefined(it));\n}\n/**\n * @return {?}\n */\nexport function selectNgrxJsonApiDefaultZone(){\n  return selectNgrxJsonApiZone(NGRX_JSON_API_DEFAULT_ZONE);\n}\n/**\n * @param {?} zoneId\n * @return {?}\n */\nexport function selectNgrxJsonApiZone(zoneId: string){\n  return (state$: Store<any>) => state$.let(selectNgrxJson())\n    .map(it => /** @type {?} */(( it.zones[zoneId] as NgrxJsonApiZone)));\n}\n/**\n * @param {?} state\n * @param {?} zoneId\n * @return {?}\n */\nexport function getNgrxJsonApiZone(state: any, zoneId: string){\n  return /** @type {?} */(( state['NgrxJsonApi']['zones'][zoneId] as NgrxJsonApiZone));\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nexport function selectStoreQuery(queryId: string):\n(state: Observable<NgrxJsonApiStore>) => Observable<StoreQuery>{\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$\n      .map(state => state.queries[queryId])\n  };\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function selectStoreResourcesOfType(type: string):\n  (state: Observable<NgrxJsonApiStore>) => Observable<NgrxJsonApiStoreResources>{\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$\n      .map(state => state.data)\n      .map(data => (data ? data[type] : undefined));\n  };\n}\n/**\n * @param {?} identifier\n * @return {?}\n */\nexport function selectStoreResource(identifier: ResourceIdentifier) {\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$\n      .let(selectStoreResourcesOfType(identifier.type))\n      .map(\n        resources => /** @type {?} */((\n          (resources ? resources[identifier.id] : undefined) as StoreResource))\n      );\n  };\n}\n/**\n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?}\n */\nexport function selectManyQueryResult(queryId: string, denormalize?: boolean):\n  (state: Observable<NgrxJsonApiStore>) => Observable<ManyQueryResult> {\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$.map(state => {\n      let /** @type {?} */ storeQuery = state.queries[queryId];\n      if (!storeQuery) {\n        return undefined;\n      }\n\n      if (_.isEmpty(storeQuery.resultIds)) {\n        let /** @type {?} */ queryResult: ManyQueryResult = {\n          ...storeQuery,\n          data: _.isUndefined(storeQuery.resultIds) ? undefined : [],\n        };\n        return queryResult;\n      } else {\n        let /** @type {?} */ results = storeQuery.resultIds.map(\n          id => (state.data[id.type] ? state.data[id.type][id.id] : undefined)\n        );\n        if (denormalize) {\n          results = denormaliseStoreResources(results, state.data);\n        }\n        return {\n          ...storeQuery,\n          data: /** @type {?} */(( results as Array<StoreResource>)),\n        };\n      }\n    });\n  };\n}\n/**\n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?}\n */\nexport function selectOneQueryResult(queryId: string, denormalize?: boolean) :\n (state: Observable<NgrxJsonApiStore>) => Observable<OneQueryResult> {\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$.map(state => {\n      let /** @type {?} */ storeQuery = state.queries[queryId];\n      if (!storeQuery) {\n        return undefined;\n      }\n\n      if (_.isEmpty(storeQuery.resultIds)) {\n        let /** @type {?} */ queryResult: OneQueryResult = {\n          ...storeQuery,\n          data: _.isUndefined(storeQuery.resultIds) ? undefined : null,\n        };\n        return queryResult;\n      } else {\n        if (storeQuery.resultIds.length >= 2) {\n          throw new Error(\n            'expected single result for query ' + storeQuery.query.queryId\n          );\n        }\n\n        let /** @type {?} */ resultId = storeQuery.resultIds[0];\n        let /** @type {?} */ result = state.data[resultId.type]\n          ? state.data[resultId.type][resultId.id]\n          : undefined;\n        if (denormalize) {\n          result = denormaliseStoreResource(result, state.data);\n        }\n        const /** @type {?} */ queryResult: OneQueryResult = {\n          ...storeQuery,\n          data: result\n        };\n        return queryResult;\n      }\n    });\n  };\n}\n/**\n * deprecated, to not use any longer\n * @param {?} state$\n * @return {?}\n */\nexport function getNgrxJsonApiStore(state$: Store<any>): Observable<NgrxJsonApiStore>{\n  return state$.let(selectNgrxJsonApiDefaultZone());\n}\n/**\n * deprecated, to not use any longer\n */\nexport class NgrxJsonApiSelectors {\nconstructor() {}\n/**\n * @return {?}\n */\npublic getNgrxJsonApiStore$(): (\n    state$: Store<any>\n  ) => Observable<NgrxJsonApiStore> {\n    return (state$: Store<any>): Observable<NgrxJsonApiStore> => {\n      return state$.let(selectNgrxJsonApiDefaultZone());\n    };\n  }\n/**\n * @return {?}\n */\npublic getStoreData$(): (\n    state$: Store<NgrxJsonApiStore>\n  ) => Observable<NgrxJsonApiStoreData> {\n    return (\n      state$: Store<NgrxJsonApiStore>\n    ): Observable<NgrxJsonApiStoreData> => {\n      return state$.select('data');\n    };\n  }\n/**\n * @param {?} type\n * @return {?}\n */\npublic getStoreResourceOfType$(type: string) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreData$())\n        .map(resources => (resources ? resources[type] : undefined));\n    };\n  }\n/**\n * @return {?}\n */\npublic getStoreQueries$() {\n    return (state$: Store<NgrxJsonApiStore>) => {\n      return state$.select('queries');\n    };\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic getResourceQuery$(queryId: string) {\n    return selectStoreQuery(queryId);\n  }\n/**\n * @param {?} identifier\n * @return {?}\n */\npublic getStoreResource$(identifier: ResourceIdentifier) {\n    return selectStoreResource(identifier);\n  }\n/**\n * @param {?} queryId\n * @param {?} denormalize\n * @return {?}\n */\npublic getManyResults$(queryId: string, denormalize: boolean) {\n    return selectManyQueryResult(queryId, denormalize);\n  }\n/**\n * @param {?} queryId\n * @param {?} denormalize\n * @return {?}\n */\npublic getOneResult$(queryId: string, denormalize: boolean) {\n    return selectOneQueryResult(queryId, denormalize);\n  }\n/**\n * @param {?} identifier\n * @return {?}\n */\npublic getPersistedResource$(identifier: ResourceIdentifier) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreResource$(identifier))\n        .map(it => (it ? it.persistedResource : undefined));\n    };\n  }\n}\n","import * as _ from 'lodash/index';\n\nimport { Actions } from '@ngrx/effects';\n\nimport {\n  Direction,\n  Document,\n  FilteringOperator,\n  FilteringParam,\n  NgrxJsonApiFilteringConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  NgrxJsonApiStoreResources,\n  NgrxJsonApiStoreQueries,\n  OperationType,\n  Payload,\n  Query,\n  Resource,\n  ResourceDefinition,\n  ResourceIdentifier,\n  ResourceError,\n  ResourceState,\n  StoreQuery,\n  SortingParam,\n  StoreResource,\n  ErrorModificationType,\n} from './interfaces';\n/**\n * @param {?} state\n * @param {?} path\n * @param {?} value\n * @return {?}\n */\nexport function setIn(state: any, path:string, value: any){\n  let /** @type {?} */ currentValue = _.get(state, path);\n  if(value === currentValue){\n    return state;\n  }\n  return _.setWith(_.clone(state), path, value, (nsValue: any, key: string, nsObject: any) => {\n    const /** @type {?} */ newObject = _.clone(nsObject);\n    newObject[key] = nsValue;\n    return newObject;\n  });\n}\n\nexport const /** @type {?} */ denormaliseObject = (\n  resource: Resource,\n  storeData: NgrxJsonApiStoreData,\n  bag: NgrxJsonApiStoreData\n): any => {\n  // this function MUST MUTATE resource\n  let /** @type {?} */ denormalised = resource;\n\n  if (resource.hasOwnProperty('relationships')) {\n    Object.keys(resource.relationships).forEach(relation => {\n      resource.relationships[relation]['reference'] = /** @type {?} */(( {} as Resource));\n      let /** @type {?} */ data: ResourceIdentifier | Array<ResourceIdentifier> =\n        resource.relationships[relation].data;\n      // denormalised relation\n      let /** @type {?} */ relationDenorm;\n\n      if (data === null || _.isEqual(data, [])) {\n        relationDenorm = data;\n      } else if (_.isPlainObject(data)) {\n        // hasOne relation\n        let /** @type {?} */ relatedRS = getSingleStoreResource( /** @type {?} */((\n          <ResourceIdentifier>data)),\n          storeData\n        );\n        relationDenorm = denormaliseStoreResource(relatedRS, storeData, bag);\n      } else if (_.isArray(data)) {\n        // hasMany relation\n        let /** @type {?} */ relatedRSs: Array<StoreResource> = getMultipleStoreResource( /** @type {?} */((\n          <ResourceIdentifier[]>data)),\n          storeData\n        );\n        relationDenorm = relatedRSs.map(r =>\n          denormaliseStoreResource(r, storeData, bag)\n        );\n      }\n      let /** @type {?} */ relationDenormPath = 'relationships.' + relation + '.reference';\n      denormalised = /** @type {?} */(( <Resource>_.set(\n        denormalised,\n        relationDenormPath,\n        relationDenorm\n      )));\n    });\n  }\n\n  return denormalised;\n};\n\nexport const /** @type {?} */ denormaliseStoreResources = (\n  items: Array<StoreResource>,\n  storeData: NgrxJsonApiStoreData,\n  bag: any = {}\n): Array<StoreResource> => {\n  let /** @type {?} */ results: Array<StoreResource> = [];\n  for (let /** @type {?} */ item of items) {\n    results.push(denormaliseStoreResource(item, storeData, bag));\n  }\n  return results;\n};\n\nexport const /** @type {?} */ denormaliseStoreResource = (\n  item: StoreResource,\n  storeData: NgrxJsonApiStoreData,\n  bag: any = {}\n): any => {\n  if (!item) {\n    return null;\n  }\n  let /** @type {?} */ storeResource = _.cloneDeep( /** @type {?} */((<StoreResource>item)));\n\n  if (_.isUndefined(bag[storeResource.type])) {\n    bag[storeResource.type] = {};\n  }\n  if (_.isUndefined(bag[storeResource.type][storeResource.id])) {\n    bag[storeResource.type][storeResource.id] = storeResource;\n    storeResource = denormaliseObject(storeResource, storeData, bag);\n    if (storeResource.persistedResource) {\n      storeResource.persistedResource = denormaliseObject(\n        storeResource.persistedResource,\n        storeData,\n        bag\n      );\n    }\n  }\n\n  return bag[storeResource.type][storeResource.id];\n};\n\nexport const /** @type {?} */ getSingleStoreResource = (\n  resourceId: ResourceIdentifier,\n  storeData: NgrxJsonApiStoreData\n): StoreResource => {\n  return _.get(storeData, [resourceId.type, resourceId.id], null);\n};\n\nexport const /** @type {?} */ getMultipleStoreResource = (\n  resourceIds: Array<ResourceIdentifier>,\n  resources: NgrxJsonApiStoreData\n): Array<StoreResource> => {\n  return resourceIds.map(id => getSingleStoreResource(id, resources));\n};\n\nexport const /** @type {?} */ getDenormalisedPath = (\n  path: string,\n  baseResourceType: string,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n): string => {\n  let /** @type {?} */ denormPath: string[] = [];\n  if (_.isUndefined(pathSeparator)) {\n    pathSeparator = '.';\n  }\n  let /** @type {?} */ fields: Array<string> = path.split(pathSeparator);\n  let /** @type {?} */ currentResourceType = baseResourceType;\n  for (let /** @type {?} */ i = 0; i < fields.length; i++) {\n    let /** @type {?} */ definition = _.find(resourceDefinitions, { type: currentResourceType });\n\n    if (_.isUndefined(definition)) {\n      throw new Error('Definition not found');\n    }\n    // if both attributes and relationships are missing, raise an error\n    if (\n      _.isUndefined(definition.attributes) &&\n      _.isUndefined(definition.relationships)\n    ) {\n      throw new Error('Attributes or Relationships must be provided');\n    }\n\n    if (definition.attributes.hasOwnProperty(fields[i])) {\n      denormPath.push('attributes', fields[i]);\n      break;\n    } else if (definition.relationships.hasOwnProperty(fields[i])) {\n      let /** @type {?} */ resourceRelation = definition.relationships[fields[i]];\n      if (resourceRelation.relationType === 'hasMany') {\n        if (i !== fields.length - 1) {\n          throw new Error('Cannot filter past a hasMany relation');\n        } else {\n          denormPath.push('relationships', fields[i], 'reference');\n        }\n      } else {\n        currentResourceType = resourceRelation.type;\n        denormPath.push('relationships', fields[i], 'reference');\n      }\n    } else {\n      throw new Error('Cannot find field in attributes or relationships');\n    }\n  }\n  return denormPath.join(pathSeparator);\n};\n\nexport const /** @type {?} */ getDenormalisedValue = (\n  path: string,\n  storeResource: StoreResource,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n) => {\n  let /** @type {?} */ denormalisedPath = getDenormalisedPath(\n    path,\n    storeResource.type,\n    resourceDefinitions,\n    pathSeparator\n  );\n  return _.get(storeResource, denormalisedPath);\n};\n/**\n * Given two objects, it will merge the second in the first.\n * \n */\nexport const updateResourceObject = (\n  original: Resource,\n  source: Resource\n): Resource => {\n  // by default arrays would make use of concat.\n  function customizer(objValue: any, srcValue: any) {\n    if (_.isArray(objValue)) {\n      return srcValue;\n    }\n  }\n\n  return _.mergeWith({}, original, source, customizer);\n};\n/**\n * Insert a StoreResource given the Resource and the StoreResources\n * \n */\nexport const insertStoreResource = (\n  storeResources: NgrxJsonApiStoreResources,\n  resource: Resource,\n  fromServer: boolean\n): NgrxJsonApiStoreResources => {\n  let newStoreResources = { ...storeResources };\n  if (fromServer) {\n    newStoreResources[resource.id] = {\n      ...resource,\n      persistedResource: resource,\n      state: 'IN_SYNC',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n  } else {\n    newStoreResources[resource.id] = {\n      ...resource,\n      persistedResource: null,\n      state: 'CREATED',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n  }\n  return _.isEqual(storeResources, newStoreResources)\n    ? storeResources\n    : newStoreResources;\n};\n/**\n * Removes a StoreResource given the Resource and the StoreResources\n * \n */\nexport const removeStoreResource = (\n  storeData: NgrxJsonApiStoreData,\n  resourceId: ResourceIdentifier\n): NgrxJsonApiStoreData => {\n  if (storeData[resourceId.type][resourceId.id]) {\n    let newState: NgrxJsonApiStoreData = { ...storeData };\n    newState[resourceId.type] = { ...newState[resourceId.type] };\n    delete newState[resourceId.type][resourceId.id];\n    return newState;\n  }\n  return storeData;\n};\n/**\n * Updates the state of a StoreResource in the store.\n * \n * @param storeData\n * @param resourceId\n * @param resourceState\n * @param loading\n * @return\n */\nexport const updateResourceState = (\n  storeData: NgrxJsonApiStoreData,\n  resourceId: ResourceIdentifier,\n  resourceState?: ResourceState,\n  loading?: OperationType\n): NgrxJsonApiStoreData => {\n  if (\n    _.isUndefined(storeData[resourceId.type]) ||\n    _.isUndefined(storeData[resourceId.type][resourceId.id])\n  ) {\n    if (resourceState === 'DELETED') {\n      let newState: NgrxJsonApiStoreData = { ...storeData };\n      newState[resourceId.type] = { ...newState[resourceId.type] };\n      newState[resourceId.type][resourceId.id] = {\n        ...newState[resourceId.type][resourceId.id],\n      };\n      newState[resourceId.type][resourceId.id] = {\n        type: resourceId.type,\n        id: resourceId.id,\n        persistedResource: null,\n      } as StoreResource;\n      newState[resourceId.type][resourceId.id].state = 'NOT_LOADED';\n      return newState;\n    } else {\n      return storeData;\n    }\n  }\n  let newState: NgrxJsonApiStoreData = { ...storeData };\n  newState[resourceId.type] = { ...newState[resourceId.type] };\n  newState[resourceId.type][resourceId.id] = {\n    ...newState[resourceId.type][resourceId.id],\n  };\n  if (resourceState !== null) {\n    newState[resourceId.type][resourceId.id].state = resourceState;\n  }\n  if (loading != null) {\n    newState[resourceId.type][resourceId.id].loading = loading;\n  }\n  return newState;\n};\n/**\n * Check equality of resource and ignore additional contents used by the\n * store (state, persistedResource, etc.)\n * @param resource0\n * @param resource1\n * @return\n */\nexport const isEqualResource = (\n  resource0: Resource,\n  resource1: Resource\n): boolean => {\n  if (resource0 === resource1) {\n    return true;\n  }\n  if (resource0 !== null !== (resource1 !== null)) {\n    return false;\n  }\n\n  return (\n    _.isEqual(resource0.id, resource1.id) &&\n    _.isEqual(resource0.type, resource1.type) &&\n    _.isEqual(resource0.attributes, resource1.attributes) &&\n    _.isEqual(resource0.meta, resource1.meta) &&\n    _.isEqual(resource0.links, resource1.links) &&\n    _.isEqual(resource0.relationships, resource1.relationships)\n  );\n};\n\nexport const /** @type {?} */ updateStoreResource = (\n  state: NgrxJsonApiStoreResources,\n  resource: Resource,\n  fromServer: boolean\n): NgrxJsonApiStoreResources => {\n  let /** @type {?} */ foundStoreResource = state[resource.id];\n  let /** @type {?} */ persistedResource = state[resource.id].persistedResource;\n\n  let /** @type {?} */ newResource: Resource;\n  let /** @type {?} */ newResourceState: ResourceState;\n  if (fromServer) {\n    // form server, override everything\n    // TODO need to handle check and keep local updates?\n    newResource = resource;\n    persistedResource = resource;\n    newResourceState = 'IN_SYNC';\n  } else {\n    let /** @type {?} */ mergedResource = updateResourceObject(foundStoreResource, resource);\n    if (isEqualResource(mergedResource, persistedResource)) {\n      // no changes anymore, do nothing\n      newResource = persistedResource;\n      newResourceState = 'IN_SYNC';\n    } else {\n      // merge changes and mark as CREATED or UPDATED depending on whether\n      // an original version is available\n      newResource = mergedResource;\n      if (persistedResource !== null) {\n        newResourceState = 'UPDATED';\n      } else if (foundStoreResource.state === 'NEW') {\n        newResourceState = 'NEW';\n      } else {\n        newResourceState = 'CREATED';\n      }\n    }\n  }\n\n  let /** @type {?} */ newState = { ...state };\n  newState[resource.id] = /** @type {?} */(( {\n    ...newResource,\n    persistedResource: persistedResource,\n    state: newResourceState,\n    errors: [],\n    loading: false,\n  } as StoreResource));\n\n  return _.isEqual(newState[resource.id], state[resource.id])\n    ? state\n    : newState;\n};\n\nexport const /** @type {?} */ updateQueriesForDeletedResource = (\n  state: NgrxJsonApiStoreQueries,\n  deletedId: ResourceIdentifier\n): NgrxJsonApiStoreQueries => {\n  let /** @type {?} */ newState: NgrxJsonApiStoreQueries = state;\n  for (let /** @type {?} */ queryId in state) {\n    if (state.hasOwnProperty(queryId)) {\n      let /** @type {?} */ queryState = state[queryId];\n      if (\n        queryState.query.id === deletedId.id &&\n        queryState.query.type === deletedId.type\n      ) {\n        // found a query for a resource that was deleted => modify to 404\n        newState = clearQueryResult(newState, queryState.query.queryId);\n        let /** @type {?} */ notFoundError: ResourceError = { code: '404', status: 'Not Found' };\n        newState[queryState.query.queryId].errors = [notFoundError];\n      }\n    }\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ updateResourceErrorsForQuery = (\n  storeData: NgrxJsonApiStoreData,\n  query: Query,\n  document: Document\n): NgrxJsonApiStoreData => {\n  if (!query.type || !query.id || document.data instanceof Array) {\n    throw new Error('invalid parameters');\n  }\n  return updateResourceErrors(\n    storeData,\n    { id: query.id, type: query.type },\n    document.errors,\n    'SET'\n  );\n};\n\nexport const /** @type {?} */ updateResourceErrors = (\n  storeData: NgrxJsonApiStoreData,\n  id: ResourceIdentifier,\n  errors: Array<ResourceError>,\n  modificationType: ErrorModificationType\n): NgrxJsonApiStoreData => {\n  if (!storeData[id.type] || !storeData[id.type][id.id]) {\n    return storeData;\n  }\n  let /** @type {?} */ newState: NgrxJsonApiStoreData = { ...storeData };\n  newState[id.type] = { ...newState[id.type] };\n  let /** @type {?} */ storeResource = { ...newState[id.type][id.id] };\n\n  if (modificationType === 'SET') {\n    storeResource.errors = [];\n    if (errors) {\n      storeResource.errors.push(...errors);\n    }\n  } else if (modificationType === 'ADD') {\n    let /** @type {?} */ currentErrors = storeResource.errors;\n    storeResource.errors = [];\n    if (currentErrors) {\n      storeResource.errors.push(...currentErrors);\n    }\n    if (errors) {\n      storeResource.errors.push(...errors);\n    }\n  } else {\n    let /** @type {?} */ currentErrors = storeResource.errors;\n    storeResource.errors = [];\n    if (currentErrors) {\n      for (let /** @type {?} */ currentError of currentErrors) {\n        let /** @type {?} */ remove =\n          errors && errors.filter(it => _.isEqual(it, currentError)).length > 0;\n        if (!remove) {\n          storeResource.errors.push(currentError);\n        }\n      }\n    }\n  }\n  newState[id.type][id.id] = storeResource;\n  return newState;\n};\n/**\n * @param {?} newState\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nfunction rollbackResource(\n  newState: NgrxJsonApiStoreData,\n  type: string,\n  id: string\n) {\n  let /** @type {?} */ storeResource = newState[type][id];\n  if (!storeResource.persistedResource) {\n    delete newState[type][id];\n  } else if (storeResource.state !== 'IN_SYNC') {\n    newState[type][id] = /** @type {?} */(( <StoreResource>{\n      ...newState[type][id],\n      state: 'IN_SYNC',\n      resource: newState[type][id].persistedResource,\n    }));\n  }\n}\n\nexport const /** @type {?} */ rollbackStoreResources = (\n  storeData: NgrxJsonApiStoreData,\n  ids: Array<ResourceIdentifier>,\n  include: Array<string>\n): NgrxJsonApiStoreData => {\n  let /** @type {?} */ newState: NgrxJsonApiStoreData = { ...storeData };\n\n  if (_.isUndefined(ids)) {\n    Object.keys(newState).forEach(type => {\n      newState[type] = { ...newState[type] };\n      Object.keys(newState[type]).forEach(id => {\n        rollbackResource(newState, type, id);\n      });\n    });\n  } else {\n    let /** @type {?} */ modifiedResources = getPendingChanges(newState, ids, include, true);\n    for (let /** @type {?} */ modifiedResource of modifiedResources) {\n      rollbackResource(newState, modifiedResource.type, modifiedResource.id);\n    }\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ deleteStoreResources = (\n  storeData: NgrxJsonApiStoreData,\n  query: Query\n) => {\n  let /** @type {?} */ newState = { ...storeData };\n  // if an id is not provided, all resources of the provided type will be deleted\n  if (typeof query.id === 'undefined') {\n    newState[query.type] = {};\n  } else {\n    newState[query.type] = /** @type {?} */(( _.omit(newState[query.type], [\n      query.id,\n    ]) as NgrxJsonApiStoreResources));\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ clearQueryResult = (\n  storeData: NgrxJsonApiStoreQueries,\n  queryId: string\n) => {\n  let /** @type {?} */ newQuery = { ...storeData[queryId] };\n  delete newQuery.resultIds;\n  delete newQuery.errors;\n  delete newQuery.meta;\n  delete newQuery.links;\n\n  let /** @type {?} */ newState = { ...storeData };\n  newState[queryId] = newQuery;\n  return newState;\n};\n/**\n * Updates a given storeData by either inserting a resource or updating\n * an existing resource.\n * \n * @param storeData\n * @param resource\n * @param fromServer\n * @param override \n * \n * @return a new NgrxJsonApiStoreData with an inserted/updated resource.\n */\nexport const updateStoreDataFromResource = (\n  storeData: NgrxJsonApiStoreData,\n  resource: Resource,\n  fromServer: boolean,\n  override: boolean\n): NgrxJsonApiStoreData => {\n  if (_.isUndefined(storeData[resource.type])) {\n    let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n    newStoreData[resource.type] = {};\n    newStoreData[resource.type] = insertStoreResource(\n      newStoreData[resource.type],\n      resource,\n      fromServer\n    );\n    return newStoreData;\n  } else if (_.isUndefined(storeData[resource.type][resource.id]) || override) {\n    let updatedStoreResources = insertStoreResource(\n      storeData[resource.type],\n      resource,\n      fromServer\n    );\n\n    // check if nothing has changed\n    if (updatedStoreResources !== storeData[resource.type]) {\n      let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n      newStoreData[resource.type] = updatedStoreResources;\n      return newStoreData;\n    }\n    return storeData;\n  } else {\n    let updatedStoreResources = updateStoreResource(\n      storeData[resource.type],\n      resource,\n      fromServer\n    );\n\n    // check if nothing has changed\n    if (updatedStoreResources !== storeData[resource.type]) {\n      let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n      newStoreData[resource.type] = updatedStoreResources;\n      return newStoreData;\n    }\n    return storeData;\n  }\n};\n\nexport const /** @type {?} */ updateStoreDataFromPayload = (\n  storeData: NgrxJsonApiStoreData,\n  payload: Document\n): NgrxJsonApiStoreData => {\n  let /** @type {?} */ data = /** @type {?} */(( <Array<Resource> | Resource>_.get(payload, 'data')));\n\n  if (_.isUndefined(data)) {\n    return storeData;\n  }\n\n  data = _.isArray(data) ? /** @type {?} */(( <Resource[]>data)) : /** @type {?} */(( <Resource[]>[data]));\n\n  let /** @type {?} */ included = /** @type {?} */(( <Array<Resource>>_.get(payload, 'included')));\n\n  if (!_.isUndefined(included)) {\n    data = [...data, ...included];\n  }\n\n  return /** @type {?} */(( <NgrxJsonApiStoreData>_.reduce(\n    data,\n    (result: NgrxJsonApiStoreData, resource: Resource) => {\n      // let resourcePath: string = getResourcePath(\n      //   result.resourcesDefinitions, resource.type);\n      // Extremely ugly, needs refactoring!\n      // let newPartialState = { data: {} };\n      // newPartialState.data[resourcePath] = { data: {} } ;\n      // newPartialState.data = updateOrInsertResource(\n      // result.data, resource);\n      return updateStoreDataFromResource(result, resource, true, true);\n      // result.data[resourcePath].data = updateOrInsertResource(\n      // result.data[resourcePath].data, resource);\n      // return <NgrxJsonApiStore>_.merge({}, result, newPartialState);\n    },\n    storeData\n  )));\n};\n/**\n * Updates the storeQueries by either adding a new ResourceQueryStore\n * or modifying an existing one.\n * \n * @param storeQueries\n * @param query \n * \n * @return a new NgrxJsonApiStoreQueries with the inserted/modified\n * ResourceQueryStore\n */\nexport const updateQueryParams = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  query: Query\n): NgrxJsonApiStoreQueries => {\n  if (!query.queryId) {\n    return storeQueries;\n  }\n\n  let newStoreQuery = { ...storeQueries[query.queryId] };\n  newStoreQuery.loading = true;\n  newStoreQuery.query = _.cloneDeep(query);\n\n  if (_.isUndefined(newStoreQuery.errors)) {\n    newStoreQuery.errors = [];\n  }\n\n  let newStoreQueries: NgrxJsonApiStoreQueries = { ...storeQueries };\n  newStoreQueries[newStoreQuery.query.queryId] = newStoreQuery;\n  return newStoreQueries;\n};\n/**\n * Updates the query results for given a queryId and the results.\n */\nexport const updateQueryResults = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string,\n  document: Document\n): NgrxJsonApiStoreQueries => {\n  let storeQuery: StoreQuery = storeQueries[queryId];\n  if (storeQuery) {\n    let data = _.isArray(document.data) ? document.data : [document.data];\n    let newQueryStore = {\n      ...storeQuery,\n      resultIds: data.map(it => (it ? toResourceIdentifier(it) : [])),\n      meta: document.meta,\n      links: document.links,\n      loading: false,\n    };\n\n    if(!_.isEqual(newQueryStore, storeQuery)){\n      let newState: NgrxJsonApiStoreQueries = { ...storeQueries };\n      newState[queryId] = <StoreQuery>newQueryStore;\n      return newState;\n    }\n  }\n  return storeQueries;\n};\n/**\n * Update the query errors given the queryId and a storeQueries and the\n * document containing the error\n * \n * \n */\nexport const updateQueryErrors = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string,\n  document: Document\n): NgrxJsonApiStoreQueries => {\n  if (!queryId || !storeQueries[queryId]) {\n    return storeQueries;\n  }\n  let newState = { ...storeQueries };\n  let newStoreQuery = { ...newState[queryId] };\n  newStoreQuery.errors = [];\n  if (document.errors) {\n    newStoreQuery.errors.push(...document.errors);\n  }\n  newState[queryId] = newStoreQuery;\n  return newState;\n};\n/**\n * Removes a query given its queryId from the NgrxJsonApiStoreQueries.\n */\nexport const removeQuery = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string\n): NgrxJsonApiStoreQueries => {\n  let newState: NgrxJsonApiStoreQueries = { ...storeQueries };\n  delete newState[queryId];\n  return newState;\n};\n/**\n * Given a resource, it will return an object containing the resource id and type.\n */\nexport const toResourceIdentifier = (\n  resource: Resource\n): ResourceIdentifier => {\n  return { type: resource.type, id: resource.id };\n};\n/**\n * Get the value for the last field in a given fitering path.\n * \n * @param path\n * @param baseStoreResource\n * @param storeData\n * @param resourceDefinitions\n * @param pathSepartor\n * @return the value of the last field in the path.\n */\nexport const getResourceFieldValueFromPath = (\n  path: string,\n  baseStoreResource: StoreResource,\n  storeData: NgrxJsonApiStoreData,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n) => {\n  if (_.isUndefined(pathSeparator)) {\n    pathSeparator = '.';\n  }\n  let fields: Array<string> = path.split(pathSeparator);\n  let currentStoreResource = baseStoreResource;\n  for (let i = 0; i < fields.length; i++) {\n    let definition = _.find(resourceDefinitions, {\n      type: currentStoreResource.type,\n    });\n\n    if (_.isUndefined(definition)) {\n      throw new Error('Definition not found');\n    }\n    // if both attributes and relationships are missing, raise an error\n    if (\n      _.isUndefined(definition.attributes) &&\n      _.isUndefined(definition.relationships)\n    ) {\n      throw new Error('Attributes or Relationships must be provided');\n    }\n    if (definition.attributes.hasOwnProperty(fields[i])) {\n      return _.get(currentStoreResource, 'attributes.' + fields[i], null);\n    } else if (definition.relationships.hasOwnProperty(fields[i])) {\n      if (i === fields.length - 1) {\n        throw new Error(\n          'The last field in the filtering path cannot be a relation'\n        );\n      }\n      let resourceRelation = definition.relationships[fields[i]];\n      if (resourceRelation.relationType === 'hasMany') {\n        throw new Error('Cannot filter past a hasMany relation');\n      } else {\n        let relation = _.get(\n          currentStoreResource,\n          'relationships.' + fields[i],\n          null\n        );\n        if (!relation || !relation.data) {\n          return null;\n        } else {\n          let relatedPath = [resourceRelation.type, relation.data.id];\n          currentStoreResource = <StoreResource>_.get(storeData, relatedPath);\n        }\n      }\n    } else {\n      throw new Error('Cannot find field in attributes or relationships');\n    }\n    if (_.isUndefined(currentStoreResource)) {\n      return null;\n    }\n  }\n};\n\nexport const /** @type {?} */ filterResources = (\n  resources: NgrxJsonApiStoreResources,\n  storeData: NgrxJsonApiStoreData,\n  query: Query,\n  resourceDefinitions: Array<ResourceDefinition>,\n  filteringConfig?: NgrxJsonApiFilteringConfig\n) => {\n  return _.filter(resources, resource => {\n    if (\n      query.hasOwnProperty('params') &&\n      query.params.hasOwnProperty('filtering')\n    ) {\n      return query.params.filtering.every(element => {\n        let /** @type {?} */ pathSeparator;\n        let /** @type {?} */ filteringOperators;\n\n        if (!_.isUndefined(filteringConfig)) {\n          pathSeparator = /** @type {?} */(( <string>_.get(filteringConfig, 'pathSeparator')));\n          filteringOperators = /** @type {?} */(( <Array<FilteringOperator>>_.get(\n            filteringConfig,\n            'filteringOperators'\n          )));\n        }\n        // resource type and attribute\n        let /** @type {?} */ resourceFieldValue = getResourceFieldValueFromPath(\n          element.path,\n          resource,\n          storeData,\n          resourceDefinitions,\n          pathSeparator\n        );\n        if (!resourceFieldValue) {\n          return false;\n        }\n\n        let /** @type {?} */ operator = /** @type {?} */(( <FilteringOperator>_.find(filteringOperators, {\n          name: element.operator,\n        })));\n\n        if (operator) {\n          return operator.comparison(element.value, resourceFieldValue);\n        }\n\n        element.operator = element.hasOwnProperty('operator')\n          ? element.operator\n          : 'iexact';\n\n        switch (element.operator) {\n          case 'iexact':\n            if (_.isString(element.value) && _.isString(resourceFieldValue)) {\n              return (\n                element.value.toLowerCase() === resourceFieldValue.toLowerCase()\n              );\n            } else {\n              return element.value === resourceFieldValue;\n            }\n\n          case 'exact':\n            return element.value === resourceFieldValue;\n\n          case 'contains':\n            return _.includes(resourceFieldValue, element.value);\n\n          case 'icontains':\n            return _.includes(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          case 'in':\n            if (_.isArray(element.value)) {\n              return _.includes(element.value, resourceFieldValue);\n            } else {\n              return _.includes([element.value], resourceFieldValue);\n            }\n          case 'gt':\n            return element.value > resourceFieldValue;\n\n          case 'gte':\n            return element.value >= resourceFieldValue;\n\n          case 'lt':\n            return element.value < resourceFieldValue;\n\n          case 'lte':\n            return element.value <= resourceFieldValue;\n\n          case 'startswith':\n            return _.startsWith(resourceFieldValue, element.value);\n\n          case 'istartswith':\n            return _.startsWith(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          case 'endswith':\n            return _.endsWith(resourceFieldValue, element.value);\n\n          case 'iendswith':\n            return _.endsWith(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          default:\n            return true;\n        }\n      });\n    } else {\n      return true;\n    }\n  });\n};\n\nexport const /** @type {?} */ generateIncludedQueryParams = (\n  included: Array<string>\n): string => {\n  if (_.isEmpty(included)) {\n    return '';\n  }\n\n  return 'include=' + included.join();\n};\n\nexport const /** @type {?} */ generateFieldsQueryParams = (fields: Array<string>): string => {\n  if (_.isEmpty(fields)) {\n    return '';\n  }\n\n  return 'fields=' + fields.join();\n};\n\nexport const /** @type {?} */ generateFilteringQueryParams = (\n  filtering: Array<FilteringParam>\n): string => {\n  if (_.isEmpty(filtering)) {\n    return '';\n  }\n  let /** @type {?} */ filteringParams = filtering.map(f => {\n    return (\n      'filter[' +\n      f.path +\n      ']' +\n      (f.operator ? '[' + f.operator + ']' : '') +\n      '=' +\n      encodeURIComponent(f.value)\n    );\n  });\n  return filteringParams.join('&');\n};\n\nexport const /** @type {?} */ generateSortingQueryParams = (\n  sorting: Array<SortingParam>\n): string => {\n  if (_.isEmpty(sorting)) {\n    return '';\n  }\n  return (\n    'sort=' +\n    sorting\n      .map(f => (f.direction === Direction.ASC ? '' : '-') + f.api)\n      .join(',')\n  );\n};\n\nexport const /** @type {?} */ generateQueryParams = (...params: Array<string>) => {\n  let /** @type {?} */ newParams = params.filter(p => p !== '');\n  if (newParams.length !== 0) {\n    return '?' + newParams.join('&');\n  } else {\n    return '';\n  }\n};\n\nexport const /** @type {?} */ generatePayload = (\n  resource: StoreResource,\n  operation: OperationType\n): Payload => {\n  let /** @type {?} */ payload: Payload = {\n    query: {\n      type: resource.type,\n    },\n  };\n\n  // the data to be updated or created\n  if (operation === 'POST' || operation === 'PATCH') {\n    payload.jsonApiData = {\n      data: {\n        id: resource.id,\n        type: resource.type,\n        attributes: resource.attributes,\n        relationships: resource.relationships,\n      },\n    };\n  }\n\n  if (operation === 'POST' && resource.hasTemporaryId) {\n    delete payload.jsonApiData.data.id;\n  }\n\n  // 'DELETE' only needs a query and it also needs an id in its query\n  // 'PATCH' also needs an id in its query\n  // 'POST' needed locally to allow to write back errors to store if id is available\n  if (operation === 'PATCH' || operation === 'DELETE' || operation === 'POST') {\n    payload.query.id = resource.id;\n  }\n\n  return payload;\n};\n\n/* tslint:disable */\nexport const /** @type {?} */ uuid = () => {\n  let /** @type {?} */ lut = [];\n  for (let /** @type {?} */ i = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n  }\n  let /** @type {?} */ d0 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d1 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d2 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d3 = (Math.random() * 0xffffffff) | 0;\n  return (\n    lut[d0 & 0xff] +\n    lut[(d0 >> 8) & 0xff] +\n    lut[(d0 >> 16) & 0xff] +\n    lut[(d0 >> 24) & 0xff] +\n    '-' +\n    lut[d1 & 0xff] +\n    lut[(d1 >> 8) & 0xff] +\n    '-' +\n    lut[((d1 >> 16) & 0x0f) | 0x40] +\n    lut[(d1 >> 24) & 0xff] +\n    '-' +\n    lut[(d2 & 0x3f) | 0x80] +\n    lut[(d2 >> 8) & 0xff] +\n    '-' +\n    lut[(d2 >> 16) & 0xff] +\n    lut[(d2 >> 24) & 0xff] +\n    lut[d3 & 0xff] +\n    lut[(d3 >> 8) & 0xff] +\n    lut[(d3 >> 16) & 0xff] +\n    lut[(d3 >> 24) & 0xff]\n  );\n};\n/* tslint:enable */\n\nconst /** @type {?} */ toKey = (id: ResourceIdentifier) => {\n  return id.id + '@' + id.type;\n};\n\nconst /** @type {?} */ collectQueryResults = (state: NgrxJsonApiStore, usedResources: any) => {\n  for (let /** @type {?} */ queryName in state.queries) {\n    if (state.queries.hasOwnProperty(queryName)) {\n      let /** @type {?} */ query = state.queries[queryName];\n      if (query.resultIds) {\n        for (let /** @type {?} */ resultId of query.resultIds) {\n          usedResources[toKey(resultId)] = true;\n        }\n      }\n    }\n  }\n};\n\nconst /** @type {?} */ collectPendingChanges = (state: NgrxJsonApiStore, usedResources: any) => {\n  for (let /** @type {?} */ type in state.data) {\n    if (state.data.hasOwnProperty(type)) {\n      let /** @type {?} */ resources = state.data[type];\n      for (let /** @type {?} */ id in resources) {\n        if (resources.hasOwnProperty(id)) {\n          let /** @type {?} */ resource = resources[id];\n          if (resource.state !== 'IN_SYNC') {\n            usedResources[toKey(resource)] = true;\n          }\n        }\n      }\n    }\n  }\n};\n\nconst /** @type {?} */ collectReferencesForResource = (\n  state: NgrxJsonApiStore,\n  usedResources: any,\n  resource: Resource\n) => {\n  let /** @type {?} */ hasChanges: boolean;\n  for (let /** @type {?} */ relationshipName in resource.relationships) {\n    if (resource.relationships.hasOwnProperty(relationshipName)) {\n      let /** @type {?} */ data = resource.relationships[relationshipName].data;\n      if (data) {\n        let /** @type {?} */ dependencyIds: Array<ResourceIdentifier> =\n          data instanceof Array ? data : [data];\n        for (let /** @type {?} */ dependencyId of dependencyIds) {\n          let /** @type {?} */ dependencyKey = toKey(dependencyId);\n          if (!usedResources[dependencyKey]) {\n            // change found, an other iteration will be necssary to detect\n            // transitive dependencies\n            hasChanges = true;\n            usedResources[dependencyKey] = true;\n          }\n        }\n      }\n    }\n  }\n  return hasChanges;\n};\n\nconst /** @type {?} */ collectReferences = (state: NgrxJsonApiStore, usedResources: any) => {\n  while (true) {\n    let /** @type {?} */ hasChanges = false;\n    for (let /** @type {?} */ type in state.data) {\n      if (state.data.hasOwnProperty(type)) {\n        let /** @type {?} */ resources = state.data[type];\n        for (let /** @type {?} */ id in resources) {\n          if (resources.hasOwnProperty(id)) {\n            let /** @type {?} */ resource = resources[id];\n            if (usedResources[toKey(resource)]) {\n              // in use, do not collect its relations\n              hasChanges =\n                hasChanges ||\n                collectReferencesForResource(state, usedResources, resource);\n            }\n          }\n        }\n      }\n    }\n    if (!hasChanges) {\n      break;\n    }\n  }\n};\n\nconst /** @type {?} */ sweepUnusedResources = (state: NgrxJsonApiStore, usedResources: any) => {\n  let /** @type {?} */ hasDeletions = false;\n  let /** @type {?} */ newState = _.cloneDeep(state);\n  for (let /** @type {?} */ type in newState.data) {\n    if (newState.data.hasOwnProperty(type)) {\n      let /** @type {?} */ resources = newState.data[type];\n      for (let /** @type {?} */ id in resources) {\n        if (resources.hasOwnProperty(id)) {\n          let /** @type {?} */ resource = resources[id];\n          if (!usedResources[toKey(resource)]) {\n            hasDeletions = true;\n            delete resources[id];\n          }\n        }\n      }\n\n      if (_.isEmpty(resources)) {\n        delete newState.data[type];\n      }\n    }\n  }\n  return hasDeletions ? newState : state;\n};\n\nexport const /** @type {?} */ compactStore = (state: NgrxJsonApiStore) => {\n  let /** @type {?} */ usedResources = {};\n\n  // query results can not be collected\n  collectQueryResults(state, usedResources);\n\n  // pending changes cannot be collected\n  collectPendingChanges(state, usedResources);\n\n  // references from non-collected objects cannot be collected as well\n  collectReferences(state, usedResources);\n\n  // remove everything that is not collected\n  return sweepUnusedResources(state, usedResources);\n};\n\ninterface TopologySortContext {\n  pendingResources: Array<StoreResource>;\n  cursor: number;\n  sorted: Array<StoreResource>;\n  visited: Array<boolean>;\n  dependencies: { [id: string]: Array<StoreResource> };\n}\n\nexport const /** @type {?} */ sortPendingChanges = (\n  pendingResources: Array<StoreResource>\n): Array<StoreResource> => {\n  // allocate dependency\n  let /** @type {?} */ dependencies: any = {};\n  let /** @type {?} */ pendingMap: any = {};\n  for (let /** @type {?} */ pendingResource of pendingResources) {\n    let /** @type {?} */ resource = pendingResource;\n    let /** @type {?} */ key = toKey(resource);\n    dependencies[key] = [];\n    pendingMap[key] = pendingResource;\n  }\n\n  // extract dependencies\n  for (let /** @type {?} */ pendingResource of pendingResources) {\n    let /** @type {?} */ resource = pendingResource;\n    if (resource.relationships) {\n      let /** @type {?} */ key = toKey(resource);\n      Object.keys(resource.relationships).forEach(relationshipName => {\n        let /** @type {?} */ data = resource.relationships[relationshipName].data;\n        if (data) {\n          let /** @type {?} */ dependencyIds: Array<ResourceIdentifier> =\n            data instanceof Array ? data : [data];\n          for (let /** @type {?} */ dependencyId of dependencyIds) {\n            let /** @type {?} */ dependencyKey = toKey(dependencyId);\n            if (\n              pendingMap[dependencyKey] &&\n              pendingMap[dependencyKey].state === 'CREATED'\n            ) {\n              // we have a dependency between two unsaved objects\n              dependencies[key].push(pendingMap[dependencyKey]);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  // order\n  let /** @type {?} */ context = {\n    pendingResources: pendingResources,\n    cursor: pendingResources.length,\n    sorted: new Array(pendingResources.length),\n    dependencies: dependencies,\n    visited: /** @type {?} */(( <any[]>[])),\n  };\n\n  let /** @type {?} */ i = context.cursor;\n  while (i--) {\n    if (!context.visited[i]) {\n      visitPending(pendingResources[i], i, [], context);\n    }\n  }\n\n  return context.sorted;\n};\n\nconst /** @type {?} */ visitPending = (\n  pendingResource: StoreResource,\n  i: any,\n  predecessors: any,\n  context: TopologySortContext\n) => {\n  let /** @type {?} */ key = toKey(pendingResource);\n  if (predecessors.indexOf(key) >= 0) {\n    throw new Error(\n      'Cyclic dependency: ' + key + ' with ' + JSON.stringify(predecessors)\n    );\n  }\n\n  if (context.visited[i]) {\n    return;\n  }\n  context.visited[i] = true;\n\n  // outgoing edges\n  let /** @type {?} */ outgoing: Array<StoreResource> = context.dependencies[key];\n\n  let /** @type {?} */ preds = predecessors.concat(key);\n  for (let /** @type {?} */ child of outgoing) {\n    visitPending(\n      child,\n      context.pendingResources.indexOf(child),\n      preds,\n      context\n    );\n  }\n\n  context.sorted[--context.cursor] = pendingResource;\n};\n/**\n * @param {?} state\n * @param {?} pending\n * @param {?} id\n * @param {?} include\n * @param {?} includeNew\n * @return {?}\n */\nfunction collectPendingChange(\n  state: NgrxJsonApiStoreData,\n  pending: Array<StoreResource>,\n  id: ResourceIdentifier,\n  include: Array<Array<string>>,\n  includeNew: boolean\n) {\n  let /** @type {?} */ storeResource = state[id.type][id.id];\n  if (\n    storeResource.state !== 'IN_SYNC' &&\n    (storeResource.state !== 'NEW' || includeNew)\n  ) {\n    pending.push(storeResource);\n  }\n\n  for (let /** @type {?} */ includeElement of include) {\n    if (includeElement.length > 0) {\n      let /** @type {?} */ relationshipName = includeElement[0];\n      if (\n        storeResource.relationships &&\n        storeResource.relationships[relationshipName]\n      ) {\n        let /** @type {?} */ data = storeResource.relationships[relationshipName].data;\n        if (data) {\n          let /** @type {?} */ relationInclude: Array<Array<string>> = [];\n          include\n            .filter(\n              relIncludeElem =>\n                relIncludeElem.length >= 2 &&\n                relIncludeElem[0] == relationshipName\n            )\n            .forEach(relIncludeElem =>\n              relationInclude.push(relIncludeElem.slice(1))\n            );\n\n          if (_.isArray(data)) {\n            let /** @type {?} */ relationIds = /** @type {?} */(( data as Array<ResourceIdentifier>));\n            relationIds.forEach(relationId =>\n              collectPendingChange(\n                state,\n                pending,\n                relationId,\n                relationInclude,\n                includeNew\n              )\n            );\n          } else {\n            let /** @type {?} */ relationId = /** @type {?} */(( data as ResourceIdentifier));\n            collectPendingChange(\n              state,\n              pending,\n              relationId,\n              relationInclude,\n              includeNew\n            );\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * @param {?} state\n * @param {?} ids\n * @param {?} include\n * @param {?=} includeNew\n * @return {?}\n */\nexport function getPendingChanges(\n  state: NgrxJsonApiStoreData,\n  ids: Array<ResourceIdentifier>,\n  include: Array<string>,\n  includeNew?: boolean\n): Array<StoreResource> {\n  let /** @type {?} */ pending: Array<StoreResource> = [];\n\n  if (_.isUndefined(ids)) {\n    // check all\n    Object.keys(state).forEach(type => {\n      Object.keys(state[type]).forEach(id => {\n        let /** @type {?} */ storeResource = state[type][id];\n        if (\n          storeResource.state !== 'IN_SYNC' &&\n          (storeResource.state !== 'NEW' || includeNew)\n        ) {\n          pending.push(storeResource);\n        }\n      });\n    });\n  } else {\n    let /** @type {?} */ relationshipInclusions = [];\n    if (include) {\n      for (let /** @type {?} */ includeElement of include) {\n        relationshipInclusions.push(includeElement.split('.'));\n      }\n    }\n    for (let /** @type {?} */ id of ids) {\n      collectPendingChange(\n        state,\n        pending,\n        id,\n        relationshipInclusions,\n        includeNew\n      );\n    }\n    pending = _.uniqBy(pending, function(e) {\n      return e.type + '####' + e.id;\n    });\n  }\n\n  return pending;\n}\n","import { Observable } from 'rxjs/Observable';\nimport { AnonymousSubscription } from 'rxjs/Subscription';\n\nexport const /** @type {?} */ NGRX_JSON_API_DEFAULT_ZONE = 'default';\nexport type Direction = number;\nexport let Direction: any = {};\nDirection.ASC = 0;\nDirection.DESC = 1;\nDirection[Direction.ASC] = \"ASC\";\nDirection[Direction.DESC] = \"DESC\";\n\n\nexport interface Document {\n  data?: any;\n  included?: any;\n  meta?: any;\n  links?: any;\n  errors?: Array<ResourceError>;\n}\n\nexport interface FilteringParam {\n  path?: string;\n  operator?: string;\n  value?: any;\n}\n\nexport interface FilteringOperator {\n  name: string;\n  apiName?: string;\n  comparison: (value: any, resourceFieldValue: any) => boolean;\n}\n\nexport interface ManyResourceRelationship {\n  data?: Array<ResourceIdentifier>;\n  reference?: Array<StoreResource>;\n}\n\n/**\n * Used by code generators to navigate relationships in a type-safe manner.\n * See crnk.io for a first such generator.\n */\nexport interface TypedManyResourceRelationship<T extends StoreResource>\n  extends ManyResourceRelationship {\n  reference?: Array<T>;\n}\n\n/**\n * Used by code generators to navigate relationships in a type-safe manner.\n * See crnk.io for a first such generator.\n */\nexport interface TypedOneResourceRelationship<T extends StoreResource>\n  extends OneResourceRelationship {\n  reference?: T;\n}\n\nexport interface NgrxJsonApiConfig {\n  apiUrl: string;\n  initialState?: any;\n  resourceDefinitions?: Array<ResourceDefinition>;\n  urlBuilder?: NgrxJsonApiUrlBuilder;\n  filteringConfig?: NgrxJsonApiFilteringConfig;\n\n  /**\n   * Allows to disable the apply action and replace it with a custom one. For example\n   * have a look at www.crnk.io that makes use of JSON PATCH to perform bulk updates.\n   */\n  applyEnabled?: boolean;\n}\n\nexport interface NgrxJsonApiState {\n  zones: NgrxJsonApiZones\n}\n\nexport interface NgrxJsonApiZones {\n  [id: string]: NgrxJsonApiZone;\n}\n\n/**\n * deprecated, mae use of NgrxJsonApiZone instead\n */\nexport interface NgrxJsonApiStore {\n  data: NgrxJsonApiStoreData;\n  queries: NgrxJsonApiStoreQueries;\n  isCreating: number;\n  isReading: number;\n  isUpdating: number;\n  isDeleting: number;\n  isApplying: number;\n}\n\nexport interface NgrxJsonApiZone extends NgrxJsonApiStore{\n\n}\n\nexport interface NgrxJsonApiStoreData {\n  [id: string]: NgrxJsonApiStoreResources;\n}\n\nexport interface NgrxJsonApiStoreQueries {\n  [id: string]: StoreQuery;\n}\n\nexport interface NgrxJsonApiStoreResources {\n  [id: string]: StoreResource;\n}\n\nexport interface NgrxJsonApiFilteringConfig {\n  pathSeparator?: string;\n  filteringOperators?: Array<FilteringOperator>;\n}\n\nexport interface NgrxJsonApiUrlBuilder {\n  generateFilteringQueryParams?: (params: Array<FilteringParam>) => string;\n  generateFieldsQueryParams?: (params: Array<string>) => string;\n  generateIncludedQueryParams?: (params: Array<string>) => string;\n  generateSortingQueryParams?: (params: Array<SortingParam>) => string;\n  generateQueryParams?: (...params: Array<string>) => string;\n}\n\nexport type OperationType = 'GET' | 'DELETE' | 'PATCH' | 'POST' | false;\n\nexport interface OneResourceRelationship {\n  data?: ResourceIdentifier;\n  reference?: StoreResource;\n}\n\nexport type ErrorModificationType = 'ADD' | 'REMOVE' | 'SET';\n\nexport interface ModifyStoreResourceErrorsPayload {\n  resourceId: ResourceIdentifier;\n  errors: Array<ResourceError>;\n  modificationType: ErrorModificationType;\n}\n\nexport interface Payload {\n  jsonApiData?: Document;\n  query?: Query;\n}\n\nexport interface Query {\n  queryId?: string;\n  type?: string;\n  id?: string;\n  params?: QueryParams;\n}\n\nexport interface QueryParams {\n  filtering?: Array<FilteringParam>;\n  sorting?: Array<SortingParam>;\n  include?: Array<string>;\n  fields?: Array<string>;\n  offset?: number;\n  limit?: number;\n}\n\nexport interface Resource extends ResourceIdentifier {\n  attributes?: { [key: string]: any };\n  relationships?: { [key: string]: ResourceRelationship };\n  meta?: any;\n  links?: any;\n}\n\nexport interface ResourceAttributeDefinition {\n  apiName?: string;\n}\n\nexport interface ResourceDefinition {\n  type: string;\n  collectionPath: string;\n  attributes?: { [key: string]: ResourceAttributeDefinition };\n  relationships?: { [key: string]: ResourceRelationDefinition };\n}\n\nexport interface ResourceError {\n  id?: string;\n  links?: any;\n  status?: string;\n  code?: string;\n  title?: string;\n  detail?: string;\n  source?: ResourceErrorSource;\n  meta?: any;\n}\n\nexport interface ResourceErrorSource {\n  pointer?: string;\n  parameter?: string;\n}\n\nexport interface ResourceIdentifier {\n  type: string;\n  id: string;\n}\n\nexport interface ResourceRelationship {\n  data?: any;\n  links?: any;\n  reference?: any;\n}\n\nexport interface ResourceRelationDefinition {\n  type: string;\n  relationType: ResourceRelationType;\n}\n\nexport type ResourceRelationType = 'hasOne' | 'hasMany';\n\nexport type ResourceState =\n  | 'NEW'\n  | 'IN_SYNC'\n  | 'CREATED'\n  | 'UPDATED'\n  | 'DELETED'\n  | 'NOT_LOADED';\n\nexport interface SortingParam {\n  api: string;\n  direction: Direction;\n}\n\nexport interface QueryResult extends StoreQuery {\n  data?: StoreResource | Array<StoreResource>;\n}\n\nexport interface ManyQueryResult extends QueryResult {\n  data?: Array<StoreResource>;\n}\n\nexport interface OneQueryResult extends QueryResult {\n  data?: StoreResource;\n}\n\nexport interface StoreQuery {\n  query: Query;\n  loading: Boolean;\n  resultIds?: Array<ResourceIdentifier>;\n  meta?: any;\n  links?: any;\n\n  /**\n   * Errors received from the server after attempting to perform a GET request.\n   */\n  errors: Array<ResourceError>;\n}\n\n/**\n* Container to hold a Resource in the store with state information.\n*/\nexport interface StoreResource extends Resource {\n  /**\n  * State of the resource to track local changes not yet\n  * published to the json api endpoint.\n  */\n  state?: ResourceState;\n  /**\n  * The original resource obtained from the server.\n  */\n  persistedResource?: Resource;\n  /**\n  * One of the operation types: reading, creating, updating or deleting.\n  */\n  loading?: OperationType;\n  /**\n  * Errors received from the server after attempting to store the resource.\n  */\n  errors?: Array<ResourceError>;\n\n  /**\n   * new resources may only obtain an id when posted to the server. Till that point\n   * a StoreResource can assign make use of a temporary id and signal this by setting\n   * this flag to true. The id will not be transmitted to the server and the resource\n   * is removed from its temporary location (given by its id) as soon as it is posted\n   * to the server.\n   */\n  hasTemporaryId?: boolean;\n}\n"],"names":["StoreModule","EffectsModule","NgModule","Store","HttpClient","InjectionToken","__assign","Effect","Observable","Actions","Injectable","_.isEmpty","_.isEqual","_.findIndex","_.hasIn","_.find","HttpHeaders","Pipe","_.get","_.isArray","_.isUndefined","__extends","_.uniqBy","_.cloneDeep","_.endsWith","_.startsWith","_.includes","_.isString","_.filter","_.reduce","_.omit","_.mergeWith","_.set","_.isPlainObject","_.clone","_.setWith"],"mappings":"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"}