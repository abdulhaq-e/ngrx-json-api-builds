{"version":3,"sources":["../../src/utils.ts","../../src/reducers.ts","../../src/module.ts","../../src/interfaces.ts","../../src/actions.ts","../../src/services.ts","../../src/pipes.ts","../../src/api.ts","../../src/selectors.ts","../../src/effects.ts"],"names":["getPendingChanges","state","pending","Object","keys","data","forEach","type","id","storeResource","push","NgrxJsonApiStoreReducer","action","initialNgrxJsonApiState","newState","NgrxJsonApiActionTypes","API_POST_INIT","updatedData","updateStoreDataFromResource","payload","assign","isCreating","API_GET_INIT","query","queries","updateQueryParams","isReading","API_PATCH_INIT","isUpdating","API_DELETE_INIT","updateResourceState","isDeleting","API_POST_SUCCESS","updateStoreDataFromPayload","jsonApiData","API_GET_SUCCESS","updateQueryResults","queryId","API_PATCH_SUCCESS","API_DELETE_SUCCESS","deleteStoreResources","updateQueriesForDeletedResource","API_QUERY_REFRESH","clearQueryResult","API_POST_FAIL","updateResourceErrorsForQuery","API_GET_FAIL","updateQueryErrors","API_PATCH_FAIL","API_DELETE_FAIL","REMOVE_QUERY","removeQuery","LOCAL_QUERY_INIT","MODIFY_STORE_RESOURCE_ERRORS","updateResourceErrors","resourceId","errors","modificationType","LOCAL_QUERY_SUCCESS","PATCH_STORE_RESOURCE","POST_STORE_RESOURCE","NEW_STORE_RESOURCE","DELETE_STORE_RESOURCE","resource","removeStoreResource","API_APPLY_INIT","pending_2","isApplying","_i","pending_3","length","pendingChange","Error","API_APPLY_SUCCESS","API_APPLY_FAIL","actions","_a","actions_2","API_ROLLBACK","rollbackStoreResources","CLEAR_STORE","COMPACT_STORE","compactStore","apiFactory","http","config","NgrxJsonApi","selectorsFactory","NgrxJsonApiSelectors","serviceFactory","store","selectors","NgrxJsonApiService","configure","provide","useFactory","deps","HttpClient","NGRX_JSON_API_CONFIG","Store","useValue","Direction","ASC","DESC","LOCAL_QUERY_FAIL","ApiApplyInitAction","this","ApiApplySuccessAction","ApiApplyFailAction","ApiPostInitAction","ApiPostSuccessAction","ApiPostFailAction","ApiDeleteInitAction","ApiDeleteSuccessAction","ApiDeleteFailAction","ApiGetInitAction","ApiGetSuccessAction","ApiGetFailAction","ApiPatchInitAction","ApiPatchSuccessAction","ApiPatchFailAction","DeleteStoreResourceAction","PatchStoreResourceAction","NewStoreResourceAction","PostStoreResourceAction","RemoveQueryAction","LocalQueryInitAction","LocalQuerySuccessAction","LocalQueryFailAction","CompactStoreAction","ClearStoreAction","ApiQueryRefreshAction","ModifyStoreResourceErrorsAction","denormaliseObject","storeData","bag","denormalised","hasOwnProperty","relationships","relation","relationDenorm","_.isEqual","_.isPlainObject","relatedRS","getSingleStoreResource","denormaliseStoreResource","_.isArray","relatedRSs","getMultipleStoreResource","map","r","relationDenormPath","_.set","denormaliseStoreResources","items","results","items_1","item","_.cloneDeep","_.isUndefined","persistedResource","_.get","resourceIds","resources","getDenormalisedPath","path","baseResourceType","resourceDefinitions","pathSeparator","denormPath","fields","split","currentResourceType","i","definition","_.find","attributes","resourceRelation","relationType","join","getDenormalisedValue","denormalisedPath","updateResourceObject","original","source","customizer","objValue","srcValue","_.mergeWith","insertStoreResource","storeResources","fromServer","newStoreResources","loading","resourceState","newState_1","isEqualResource","resource0","resource1","meta","links","updateStoreResource","newResource","newResourceState","foundStoreResource","mergedResource","deletedId","queryState","notFoundError","code","status","document","Array","apply","currentErrors","_b","_c","currentErrors_1","currentError","filter","it","_.omit","newQuery","resultIds","override","newStoreData","updatedStoreResources","included","concat","_.reduce","result","storeQueries","newStoreQuery","newStoreQueries","storeQuery","newQueryStore","toResourceIdentifier","getResourceFieldValueFromPath","baseStoreResource","currentStoreResource","relatedPath","filterResources","filteringConfig","_.filter","params","filtering","every","element","filteringOperators","resourceFieldValue","operator","name","comparison","value","_.isString","toLowerCase","_.includes","_.startsWith","_.endsWith","generateIncludedQueryParams","_.isEmpty","generateFieldsQueryParams","generateFilteringQueryParams","f","encodeURIComponent","generateSortingQueryParams","sorting","direction","api","generateQueryParams","arguments","newParams","p","generatePayload","operation","hasTemporaryId","uuid","lut","toString","d0","Math","random","d1","d2","d3","toKey","collectQueryResults","usedResources","queryName","resultId","collectPendingChanges","collectReferencesForResource","hasChanges","relationshipName","dependencyIds","dependencyIds_1","dependencyId","dependencyKey","collectReferences","sweepUnusedResources","hasDeletions","sortPendingChanges","pendingResources","dependencies","pendingMap","pendingResources_1","pendingResource","key","pendingResources_2","key_1","dependencyIds_2","context","cursor","sorted","visited","visitPending","predecessors","indexOf","JSON","stringify","outgoing","preds","outgoing_1","child","_this","test","let","getNgrxJsonApiStore$","subscribe","storeSnapshot","prototype","findOne","options","findInternal","findMany","putQuery","dispatch","refreshQuery","multi","denormalise","queryResult$","selectManyResults","selectOneResults","finally","getPersistedResourceSnapshot","identifier","snapshot","getResourceSnapshot","denormalize","getManyResults$","getOneResult$","selectStoreResource","getStoreResource$","denormaliseResource","storeResource$","combineLatest","getStoreData$","resourceType","patchResource","toRemote","postResource","deleteResource","clear","compact","addResourceErrors","removeResourceErrors","setResourceErrors","SelectStoreResourcePipe","service","transform","decorators","Pipe","args","ctorParameters","DenormaliseStoreResourcePipe","obs","GetDenormalisedValuePipe","headers","HttpHeaders","Content-Type","Accept","definitions","urlBuilder","resourceUrlFor","collectionUrlFor","collectionPathFor","collectionPath","apiUrl","resourcePathFor","resourcePath","find","_generateIncludedQueryParams","_generateFilteringQueryParams","_generateFieldsQueryParams","_generateSortingQueryParams","_generateQueryParams","queryParams","includedParam","filteringParams","sortingParams","fieldsParams","offsetParams","limitParams","undefined","Observable","throw","_.hasIn","include","limit","offset","requestOptions","method","url","request","create","body","update","delete","newRequestOptions","init","__rest","HttpRequest","state$","select","getStoreResourceOfType$","queryStore$","selected$","distinctUntilChanged","getStoreQueries$","getResourceQuery$","getPersistedResource$","NgrxJsonApiEffects","actions$","jsonApi","createResource$","ofType","toPayload","mergeMap","mapTo","catch","error","of","toErrorPayload","updateResource$","readResource$","deleteResource$","triggerReadOnQueryRefresh$","withLatestFrom","refreshQueriesOnDelete$","needsRefresh","_.findIndex","o","sameIdRequested","flatMap","applyResources$","take","ngrxstore","pending_1","payload_1","payload_2","payload_3","concatAll","toArray","toApplyAction","ngOnDestroy","actions_1","response","contentType","get","json","String","statusText","Injectable","Actions","propDecorators","Effect","reducer","OpaqueToken","NgrxJsonApiModule","ngModule","providers","NgModule","declarations","imports","EffectsModule","forFeature","StoreModule","exports"],"mappings":"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","file":"./dist/bundles/ngrx-json-api.umd.min.js","sourcesContent":["import * as _ from 'lodash/index';\n\nimport { Actions } from '@ngrx/effects';\n\nimport {\n  Direction,\n  Document,\n  FilteringOperator,\n  FilteringParam,\n  NgrxJsonApiFilteringConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  NgrxJsonApiStoreResources,\n  NgrxJsonApiStoreQueries,\n  OperationType,\n  Payload,\n  Query,\n  Resource,\n  ResourceDefinition,\n  ResourceIdentifier,\n  ResourceError,\n  ResourceState,\n  StoreQuery,\n  SortingParam,\n  StoreResource,\n  ErrorModificationType,\n} from './interfaces';\n\nexport const /** @type {?} */ denormaliseObject = (\n  resource: Resource,\n  storeData: NgrxJsonApiStoreData,\n  bag: NgrxJsonApiStoreData\n): any => {\n  // this function MUST MUTATE resource\n  let /** @type {?} */ denormalised = resource;\n\n  if (resource.hasOwnProperty('relationships')) {\n    Object.keys(resource.relationships).forEach(relation => {\n      resource.relationships[relation]['reference'] = /** @type {?} */(( {} as Resource));\n      let /** @type {?} */ data: ResourceIdentifier | Array<ResourceIdentifier> =\n        resource.relationships[relation].data;\n      // denormalised relation\n      let /** @type {?} */ relationDenorm;\n\n      if (data === null || _.isEqual(data, [])) {\n        relationDenorm = data;\n      } else if (_.isPlainObject(data)) {\n        // hasOne relation\n        let /** @type {?} */ relatedRS = getSingleStoreResource( /** @type {?} */((\n          <ResourceIdentifier>data)),\n          storeData\n        );\n        relationDenorm = denormaliseStoreResource(relatedRS, storeData, bag);\n      } else if (_.isArray(data)) {\n        // hasMany relation\n        let /** @type {?} */ relatedRSs: Array<StoreResource> = getMultipleStoreResource(\n          data,\n          storeData\n        );\n        relationDenorm = relatedRSs.map(r =>\n          denormaliseStoreResource(r, storeData, bag)\n        );\n      }\n      let /** @type {?} */ relationDenormPath = 'relationships.' + relation + '.reference';\n      denormalised = /** @type {?} */(( <Resource>_.set(\n        denormalised,\n        relationDenormPath,\n        relationDenorm\n      )));\n    });\n  }\n\n  return denormalised;\n};\n\nexport const /** @type {?} */ denormaliseStoreResources = (\n  items: Array<StoreResource>,\n  storeData: NgrxJsonApiStoreData,\n  bag: any = {}\n): Array<StoreResource> => {\n  let /** @type {?} */ results: Array<StoreResource> = [];\n  for (let /** @type {?} */ item of items) {\n    results.push(denormaliseStoreResource(item, storeData, bag));\n  }\n  return results;\n};\n\nexport const /** @type {?} */ denormaliseStoreResource = (\n  item: StoreResource,\n  storeData: NgrxJsonApiStoreData,\n  bag: any = {}\n): any => {\n  if (!item) {\n    return null;\n  }\n  let /** @type {?} */ storeResource = _.cloneDeep( /** @type {?} */((<StoreResource>item)));\n\n  if (_.isUndefined(bag[storeResource.type])) {\n    bag[storeResource.type] = {};\n  }\n  if (_.isUndefined(bag[storeResource.type][storeResource.id])) {\n    bag[storeResource.type][storeResource.id] = storeResource;\n    storeResource = denormaliseObject(storeResource, storeData, bag);\n    if (storeResource.persistedResource) {\n      storeResource.persistedResource = denormaliseObject(\n        storeResource.persistedResource,\n        storeData,\n        bag\n      );\n    }\n  }\n\n  return bag[storeResource.type][storeResource.id];\n};\n\nexport const /** @type {?} */ getSingleStoreResource = (\n  resourceId: ResourceIdentifier,\n  storeData: NgrxJsonApiStoreData\n): StoreResource => {\n  return _.get(storeData, [resourceId.type, resourceId.id], null);\n};\n\nexport const /** @type {?} */ getMultipleStoreResource = (\n  resourceIds: Array<ResourceIdentifier>,\n  resources: NgrxJsonApiStoreData\n): Array<StoreResource> => {\n  return resourceIds.map(id => getSingleStoreResource(id, resources));\n};\n\nexport const /** @type {?} */ getDenormalisedPath = (\n  path: string,\n  baseResourceType: string,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n): string => {\n  let /** @type {?} */ denormPath: string[] = [];\n  if (_.isUndefined(pathSeparator)) {\n    pathSeparator = '.';\n  }\n  let /** @type {?} */ fields: Array<string> = path.split(pathSeparator);\n  let /** @type {?} */ currentResourceType = baseResourceType;\n  for (let /** @type {?} */ i = 0; i < fields.length; i++) {\n    let /** @type {?} */ definition = _.find(resourceDefinitions, { type: currentResourceType });\n\n    if (_.isUndefined(definition)) {\n      throw new Error('Definition not found');\n    }\n    // if both attributes and relationships are missing, raise an error\n    if (\n      _.isUndefined(definition.attributes) &&\n      _.isUndefined(definition.relationships)\n    ) {\n      throw new Error('Attributes or Relationships must be provided');\n    }\n\n    if (definition.attributes.hasOwnProperty(fields[i])) {\n      denormPath.push('attributes', fields[i]);\n      break;\n    } else if (definition.relationships.hasOwnProperty(fields[i])) {\n      let /** @type {?} */ resourceRelation = definition.relationships[fields[i]];\n      if (resourceRelation.relationType === 'hasMany') {\n        if (i !== fields.length - 1) {\n          throw new Error('Cannot filter past a hasMany relation');\n        } else {\n          denormPath.push('relationships', fields[i], 'reference');\n        }\n      } else {\n        currentResourceType = resourceRelation.type;\n        denormPath.push('relationships', fields[i], 'reference');\n      }\n    } else {\n      throw new Error('Cannot find field in attributes or relationships');\n    }\n  }\n  return denormPath.join(pathSeparator);\n};\n\nexport const /** @type {?} */ getDenormalisedValue = (\n  path: string,\n  storeResource: StoreResource,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n) => {\n  let /** @type {?} */ denormalisedPath = getDenormalisedPath(\n    path,\n    storeResource.type,\n    resourceDefinitions,\n    pathSeparator\n  );\n  return _.get(storeResource, denormalisedPath);\n};\n/**\n * Given two objects, it will merge the second in the first.\n * \n */\nexport const updateResourceObject = (\n  original: Resource,\n  source: Resource\n): Resource => {\n  // by default arrays would make use of concat.\n  function customizer(objValue: any, srcValue: any) {\n    if (_.isArray(objValue)) {\n      return srcValue;\n    }\n  }\n\n  return _.mergeWith({}, original, source, customizer);\n};\n/**\n * Insert a StoreResource given the Resource and the StoreResources\n * \n */\nexport const insertStoreResource = (\n  storeResources: NgrxJsonApiStoreResources,\n  resource: Resource,\n  fromServer: boolean\n): NgrxJsonApiStoreResources => {\n  let newStoreResources = { ...storeResources };\n  if (fromServer) {\n    newStoreResources[resource.id] = {\n      ...resource,\n      persistedResource: resource,\n      state: 'IN_SYNC',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n  } else {\n    newStoreResources[resource.id] = {\n      ...resource,\n      persistedResource: null,\n      state: 'CREATED',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n  }\n  return _.isEqual(storeResources, newStoreResources)\n    ? storeResources\n    : newStoreResources;\n};\n/**\n * Removes a StoreResource given the Resource and the StoreResources\n * \n */\nexport const removeStoreResource = (\n  storeData: NgrxJsonApiStoreData,\n  resourceId: ResourceIdentifier\n): NgrxJsonApiStoreData => {\n  if (storeData[resourceId.type][resourceId.id]) {\n    let newState: NgrxJsonApiStoreData = { ...storeData };\n    newState[resourceId.type] = { ...newState[resourceId.type] };\n    delete newState[resourceId.type][resourceId.id];\n    return newState;\n  }\n  return storeData;\n};\n/**\n * Updates the state of a StoreResource in the store.\n * \n * @param storeData\n * @param resourceId\n * @param resourceState\n * @param loading\n */\nexport const updateResourceState = (\n  storeData: NgrxJsonApiStoreData,\n  resourceId: ResourceIdentifier,\n  resourceState?: ResourceState,\n  loading?: OperationType\n): NgrxJsonApiStoreData => {\n  if (\n    _.isUndefined(storeData[resourceId.type]) ||\n    _.isUndefined(storeData[resourceId.type][resourceId.id])\n  ) {\n    if (resourceState === 'DELETED') {\n      let newState: NgrxJsonApiStoreData = { ...storeData };\n      newState[resourceId.type] = { ...newState[resourceId.type] };\n      newState[resourceId.type][resourceId.id] = {\n        ...newState[resourceId.type][resourceId.id],\n      };\n      newState[resourceId.type][resourceId.id] = {\n        type: resourceId.type,\n        id: resourceId.id,\n        persistedResource: null,\n      } as StoreResource;\n      newState[resourceId.type][resourceId.id].state = 'NOT_LOADED';\n      return newState;\n    } else {\n      return storeData;\n    }\n  }\n  let newState: NgrxJsonApiStoreData = { ...storeData };\n  newState[resourceId.type] = { ...newState[resourceId.type] };\n  newState[resourceId.type][resourceId.id] = {\n    ...newState[resourceId.type][resourceId.id],\n  };\n  if (resourceState !== null) {\n    newState[resourceId.type][resourceId.id].state = resourceState;\n  }\n  if (loading != null) {\n    newState[resourceId.type][resourceId.id].loading = loading;\n  }\n  return newState;\n};\n/**\n * Check equality of resource and ignore additional contents used by the\n * store (state, persistedResource, etc.)\n * @param resource0\n * @param resource1\n */\nexport const isEqualResource = (\n  resource0: Resource,\n  resource1: Resource\n): boolean => {\n  if (resource0 === resource1) {\n    return true;\n  }\n  if (resource0 !== null !== (resource1 !== null)) {\n    return false;\n  }\n\n  return (\n    _.isEqual(resource0.id, resource1.id) &&\n    _.isEqual(resource0.type, resource1.type) &&\n    _.isEqual(resource0.attributes, resource1.attributes) &&\n    _.isEqual(resource0.meta, resource1.meta) &&\n    _.isEqual(resource0.links, resource1.links) &&\n    _.isEqual(resource0.relationships, resource1.relationships)\n  );\n};\n\nexport const /** @type {?} */ updateStoreResource = (\n  state: NgrxJsonApiStoreResources,\n  resource: Resource,\n  fromServer: boolean\n): NgrxJsonApiStoreResources => {\n  let /** @type {?} */ foundStoreResource = state[resource.id];\n  let /** @type {?} */ persistedResource = state[resource.id].persistedResource;\n\n  let /** @type {?} */ newResource: Resource;\n  let /** @type {?} */ newResourceState: ResourceState;\n  if (fromServer) {\n    // form server, override everything\n    // TODO need to handle check and keep local updates?\n    newResource = resource;\n    persistedResource = resource;\n    newResourceState = 'IN_SYNC';\n  } else {\n    let /** @type {?} */ mergedResource = updateResourceObject(foundStoreResource, resource);\n    if (isEqualResource(mergedResource, persistedResource)) {\n      // no changes anymore, do nothing\n      newResource = persistedResource;\n      newResourceState = 'IN_SYNC';\n    } else {\n      // merge changes and mark as CREATED or UPDATED depending on whether\n      // an original version is available\n      newResource = mergedResource;\n      if (persistedResource !== null) {\n        newResourceState = 'UPDATED';\n      } else if (foundStoreResource.state === 'NEW') {\n        newResourceState = 'NEW';\n      } else {\n        newResourceState = 'CREATED';\n      }\n    }\n  }\n\n  let /** @type {?} */ newState = { ...state };\n  newState[resource.id] = /** @type {?} */(( {\n    ...newResource,\n    persistedResource: persistedResource,\n    state: newResourceState,\n    errors: [],\n    loading: false,\n  } as StoreResource));\n\n  return _.isEqual(newState[resource.id], state[resource.id])\n    ? state\n    : newState;\n};\n\nexport const /** @type {?} */ updateQueriesForDeletedResource = (\n  state: NgrxJsonApiStoreQueries,\n  deletedId: ResourceIdentifier\n): NgrxJsonApiStoreQueries => {\n  let /** @type {?} */ newState: NgrxJsonApiStoreQueries = state;\n  for (let /** @type {?} */ queryId in state) {\n    if (state.hasOwnProperty(queryId)) {\n      let /** @type {?} */ queryState = state[queryId];\n      if (\n        queryState.query.id === deletedId.id &&\n        queryState.query.type === deletedId.type\n      ) {\n        // found a query for a resource that was deleted => modify to 404\n        newState = clearQueryResult(newState, queryState.query.queryId);\n        let /** @type {?} */ notFoundError: ResourceError = { code: '404', status: 'Not Found' };\n        newState[queryState.query.queryId].errors = [notFoundError];\n      }\n    }\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ updateResourceErrorsForQuery = (\n  storeData: NgrxJsonApiStoreData,\n  query: Query,\n  document: Document\n): NgrxJsonApiStoreData => {\n  if (!query.type || !query.id || document.data instanceof Array) {\n    throw new Error('invalid parameters');\n  }\n  return updateResourceErrors(\n    storeData,\n    { id: query.id, type: query.type },\n    document.errors,\n    'SET'\n  );\n};\n\nexport const /** @type {?} */ updateResourceErrors = (\n  storeData: NgrxJsonApiStoreData,\n  id: ResourceIdentifier,\n  errors: Array<ResourceError>,\n  modificationType: ErrorModificationType\n): NgrxJsonApiStoreData => {\n  if (!storeData[id.type] || !storeData[id.type][id.id]) {\n    return storeData;\n  }\n  let /** @type {?} */ newState: NgrxJsonApiStoreData = { ...storeData };\n  newState[id.type] = { ...newState[id.type] };\n  let /** @type {?} */ storeResource = { ...newState[id.type][id.id] };\n\n  if (modificationType === 'SET') {\n    storeResource.errors = [];\n    if (errors) {\n      storeResource.errors.push(...errors);\n    }\n  } else if (modificationType === 'ADD') {\n    let /** @type {?} */ currentErrors = storeResource.errors;\n    storeResource.errors = [];\n    if (currentErrors) {\n      storeResource.errors.push(...currentErrors);\n    }\n    if (errors) {\n      storeResource.errors.push(...errors);\n    }\n  } else {\n    let /** @type {?} */ currentErrors = storeResource.errors;\n    storeResource.errors = [];\n    if (currentErrors) {\n      for (let /** @type {?} */ currentError of currentErrors) {\n        let /** @type {?} */ remove =\n          errors && errors.filter(it => _.isEqual(it, currentError)).length > 0;\n        if (!remove) {\n          storeResource.errors.push(currentError);\n        }\n      }\n    }\n  }\n  newState[id.type][id.id] = storeResource;\n  return newState;\n};\n\nexport const /** @type {?} */ rollbackStoreResources = (\n  storeData: NgrxJsonApiStoreData\n): NgrxJsonApiStoreData => {\n  let /** @type {?} */ newState: NgrxJsonApiStoreData = { ...storeData };\n  Object.keys(newState).forEach(type => {\n    newState[type] = { ...newState[type] };\n    Object.keys(newState[type]).forEach(id => {\n      let /** @type {?} */ storeResource = newState[type][id];\n      if (!storeResource.persistedResource) {\n        delete newState[type][id];\n      } else if (storeResource.state !== 'IN_SYNC') {\n        newState[type][id] = /** @type {?} */(( <StoreResource>{\n          ...newState[type][id],\n          state: 'IN_SYNC',\n          resource: newState[type][id].persistedResource,\n        }));\n      }\n    });\n  });\n  return newState;\n};\n\nexport const /** @type {?} */ deleteStoreResources = (\n  storeData: NgrxJsonApiStoreData,\n  query: Query\n) => {\n  let /** @type {?} */ newState = { ...storeData };\n  // if an id is not provided, all resources of the provided type will be deleted\n  if (typeof query.id === 'undefined') {\n    newState[query.type] = {};\n  } else {\n    newState[query.type] = /** @type {?} */(( _.omit(newState[query.type], [\n      query.id,\n    ]) as NgrxJsonApiStoreResources));\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ clearQueryResult = (\n  storeData: NgrxJsonApiStoreQueries,\n  queryId: string\n) => {\n  let /** @type {?} */ newQuery = { ...storeData[queryId] };\n  delete newQuery.resultIds;\n  delete newQuery.errors;\n  delete newQuery.meta;\n  delete newQuery.links;\n\n  let /** @type {?} */ newState = { ...storeData };\n  newState[queryId] = newQuery;\n  return newState;\n};\n/**\n * Updates a given storeData by either inserting a resource or updating\n * an existing resource.\n * \n * @param storeData\n * @param resource\n * @param fromServer\n * @param override \n * \n * @return a new NgrxJsonApiStoreData with an inserted/updated resource.\n */\nexport const updateStoreDataFromResource = (\n  storeData: NgrxJsonApiStoreData,\n  resource: Resource,\n  fromServer: boolean,\n  override: boolean\n): NgrxJsonApiStoreData => {\n  if (_.isUndefined(storeData[resource.type])) {\n    let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n    newStoreData[resource.type] = {};\n    newStoreData[resource.type] = insertStoreResource(\n      newStoreData[resource.type],\n      resource,\n      fromServer\n    );\n    return newStoreData;\n  } else if (_.isUndefined(storeData[resource.type][resource.id]) || override) {\n    let updatedStoreResources = insertStoreResource(\n      storeData[resource.type],\n      resource,\n      fromServer\n    );\n\n    // check if nothing has changed\n    if (updatedStoreResources !== storeData[resource.type]) {\n      let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n      newStoreData[resource.type] = updatedStoreResources;\n      return newStoreData;\n    }\n    return storeData;\n  } else {\n    let updatedStoreResources = updateStoreResource(\n      storeData[resource.type],\n      resource,\n      fromServer\n    );\n\n    // check if nothing has changed\n    if (updatedStoreResources !== storeData[resource.type]) {\n      let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n      newStoreData[resource.type] = updatedStoreResources;\n      return newStoreData;\n    }\n    return storeData;\n  }\n};\n\nexport const /** @type {?} */ updateStoreDataFromPayload = (\n  storeData: NgrxJsonApiStoreData,\n  payload: Document\n): NgrxJsonApiStoreData => {\n  let /** @type {?} */ data = /** @type {?} */(( <Array<Resource> | Resource>_.get(payload, 'data')));\n\n  if (_.isUndefined(data)) {\n    return storeData;\n  }\n\n  data = _.isArray(data) ? data : [data];\n\n  let /** @type {?} */ included = /** @type {?} */(( <Array<Resource>>_.get(payload, 'included')));\n\n  if (!_.isUndefined(included)) {\n    data = [...data, ...included];\n  }\n\n  return /** @type {?} */(( <NgrxJsonApiStoreData>_.reduce(\n    data,\n    (result: NgrxJsonApiStoreData, resource: Resource) => {\n      // let resourcePath: string = getResourcePath(\n      //   result.resourcesDefinitions, resource.type);\n      // Extremely ugly, needs refactoring!\n      // let newPartialState = { data: {} };\n      // newPartialState.data[resourcePath] = { data: {} } ;\n      // newPartialState.data = updateOrInsertResource(\n      // result.data, resource);\n      return updateStoreDataFromResource(result, resource, true, true);\n      // result.data[resourcePath].data = updateOrInsertResource(\n      // result.data[resourcePath].data, resource);\n      // return <NgrxJsonApiStore>_.merge({}, result, newPartialState);\n    },\n    storeData\n  )));\n};\n/**\n * Updates the storeQueries by either adding a new ResourceQueryStore\n * or modifying an existing one.\n * \n * @param storeQueries\n * @param query \n * \n * @return a new NgrxJsonApiStoreQueries with the inserted/modified\n * ResourceQueryStore\n */\nexport const updateQueryParams = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  query: Query\n): NgrxJsonApiStoreQueries => {\n  if (!query.queryId) {\n    return storeQueries;\n  }\n\n  let newStoreQuery = { ...storeQueries[query.queryId] };\n  newStoreQuery.loading = true;\n  newStoreQuery.query = _.cloneDeep(query);\n\n  if (_.isUndefined(newStoreQuery.errors)) {\n    newStoreQuery.errors = [];\n  }\n\n  let newStoreQueries: NgrxJsonApiStoreQueries = { ...storeQueries };\n  newStoreQueries[newStoreQuery.query.queryId] = newStoreQuery;\n  return newStoreQueries;\n};\n/**\n * Updates the query results for given a queryId and the results.\n */\nexport const updateQueryResults = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string,\n  document: Document\n): NgrxJsonApiStoreQueries => {\n  let storeQuery: StoreQuery = storeQueries[queryId];\n  if (storeQuery) {\n    let data = _.isArray(document.data) ? document.data : [document.data];\n    let newQueryStore = {\n      ...storeQuery,\n      resultIds: data.map(it => (it ? toResourceIdentifier(it) : [])),\n      meta: document.meta,\n      links: document.links,\n      loading: false,\n    };\n\n    let newState: NgrxJsonApiStoreQueries = { ...storeQueries };\n    newState[queryId] = <StoreQuery>newQueryStore;\n    return newState;\n  }\n  return storeQueries;\n};\n/**\n * Update the query errors given the queryId and a storeQueries and the\n * document containing the error\n * \n * \n */\nexport const updateQueryErrors = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string,\n  document: Document\n): NgrxJsonApiStoreQueries => {\n  if (!queryId || !storeQueries[queryId]) {\n    return storeQueries;\n  }\n  let newState = { ...storeQueries };\n  let newStoreQuery = { ...newState[queryId] };\n  newStoreQuery.errors = [];\n  if (document.errors) {\n    newStoreQuery.errors.push(...document.errors);\n  }\n  newState[queryId] = newStoreQuery;\n  return newState;\n};\n/**\n * Removes a query given its queryId from the NgrxJsonApiStoreQueries.\n */\nexport const removeQuery = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string\n): NgrxJsonApiStoreQueries => {\n  let newState: NgrxJsonApiStoreQueries = { ...storeQueries };\n  delete newState[queryId];\n  return newState;\n};\n/**\n * Given a resource, it will return an object containing the resource id and type.\n */\nexport const toResourceIdentifier = (\n  resource: Resource\n): ResourceIdentifier => {\n  return { type: resource.type, id: resource.id };\n};\n/**\n * Get the value for the last field in a given fitering path.\n * \n * @param path\n * @param baseStoreResource\n * @param storeData\n * @param resourceDefinitions\n * @param pathSepartor\n * @return the value of the last field in the path.\n */\nexport const getResourceFieldValueFromPath = (\n  path: string,\n  baseStoreResource: StoreResource,\n  storeData: NgrxJsonApiStoreData,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n) => {\n  if (_.isUndefined(pathSeparator)) {\n    pathSeparator = '.';\n  }\n  let fields: Array<string> = path.split(pathSeparator);\n  let currentStoreResource = baseStoreResource;\n  for (let i = 0; i < fields.length; i++) {\n    let definition = _.find(resourceDefinitions, {\n      type: currentStoreResource.type,\n    });\n\n    if (_.isUndefined(definition)) {\n      throw new Error('Definition not found');\n    }\n    // if both attributes and relationships are missing, raise an error\n    if (\n      _.isUndefined(definition.attributes) &&\n      _.isUndefined(definition.relationships)\n    ) {\n      throw new Error('Attributes or Relationships must be provided');\n    }\n    if (definition.attributes.hasOwnProperty(fields[i])) {\n      return _.get(currentStoreResource, 'attributes.' + fields[i], null);\n    } else if (definition.relationships.hasOwnProperty(fields[i])) {\n      if (i === fields.length - 1) {\n        throw new Error(\n          'The last field in the filtering path cannot be a relation'\n        );\n      }\n      let resourceRelation = definition.relationships[fields[i]];\n      if (resourceRelation.relationType === 'hasMany') {\n        throw new Error('Cannot filter past a hasMany relation');\n      } else {\n        let relation = _.get(\n          currentStoreResource,\n          'relationships.' + fields[i],\n          null\n        );\n        if (!relation || !relation.data) {\n          return null;\n        } else {\n          let relatedPath = [resourceRelation.type, relation.data.id];\n          currentStoreResource = <StoreResource>_.get(storeData, relatedPath);\n        }\n      }\n    } else {\n      throw new Error('Cannot find field in attributes or relationships');\n    }\n    if (_.isUndefined(currentStoreResource)) {\n      return null;\n    }\n  }\n};\n\nexport const /** @type {?} */ filterResources = (\n  resources: NgrxJsonApiStoreResources,\n  storeData: NgrxJsonApiStoreData,\n  query: Query,\n  resourceDefinitions: Array<ResourceDefinition>,\n  filteringConfig?: NgrxJsonApiFilteringConfig\n) => {\n  return _.filter(resources, resource => {\n    if (\n      query.hasOwnProperty('params') &&\n      query.params.hasOwnProperty('filtering')\n    ) {\n      return query.params.filtering.every(element => {\n        let /** @type {?} */ pathSeparator;\n        let /** @type {?} */ filteringOperators;\n\n        if (!_.isUndefined(filteringConfig)) {\n          pathSeparator = /** @type {?} */(( <string>_.get(filteringConfig, 'pathSeparator')));\n          filteringOperators = /** @type {?} */(( <Array<FilteringOperator>>_.get(\n            filteringConfig,\n            'filteringOperators'\n          )));\n        }\n        // resource type and attribute\n        let /** @type {?} */ resourceFieldValue = getResourceFieldValueFromPath(\n          element.path,\n          resource,\n          storeData,\n          resourceDefinitions,\n          pathSeparator\n        );\n        if (!resourceFieldValue) {\n          return false;\n        }\n\n        let /** @type {?} */ operator = /** @type {?} */(( <FilteringOperator>_.find(filteringOperators, {\n          name: element.operator,\n        })));\n\n        if (operator) {\n          return operator.comparison(element.value, resourceFieldValue);\n        }\n\n        element.operator = element.hasOwnProperty('operator')\n          ? element.operator\n          : 'iexact';\n\n        switch (element.operator) {\n          case 'iexact':\n            if (_.isString(element.value) && _.isString(resourceFieldValue)) {\n              return (\n                element.value.toLowerCase() === resourceFieldValue.toLowerCase()\n              );\n            } else {\n              return element.value === resourceFieldValue;\n            }\n\n          case 'exact':\n            return element.value === resourceFieldValue;\n\n          case 'contains':\n            return _.includes(resourceFieldValue, element.value);\n\n          case 'icontains':\n            return _.includes(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          case 'in':\n            if (_.isArray(element.value)) {\n              return _.includes(element.value, resourceFieldValue);\n            } else {\n              return _.includes([element.value], resourceFieldValue);\n            }\n          case 'gt':\n            return element.value > resourceFieldValue;\n\n          case 'gte':\n            return element.value >= resourceFieldValue;\n\n          case 'lt':\n            return element.value < resourceFieldValue;\n\n          case 'lte':\n            return element.value <= resourceFieldValue;\n\n          case 'startswith':\n            return _.startsWith(resourceFieldValue, element.value);\n\n          case 'istartswith':\n            return _.startsWith(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          case 'endswith':\n            return _.endsWith(resourceFieldValue, element.value);\n\n          case 'iendswith':\n            return _.endsWith(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          default:\n            return true;\n        }\n      });\n    } else {\n      return true;\n    }\n  });\n};\n\nexport const /** @type {?} */ generateIncludedQueryParams = (\n  included: Array<string>\n): string => {\n  if (_.isEmpty(included)) {\n    return '';\n  }\n\n  return 'include=' + included.join();\n};\n\nexport const /** @type {?} */ generateFieldsQueryParams = (fields: Array<string>): string => {\n  if (_.isEmpty(fields)) {\n    return '';\n  }\n\n  return 'fields=' + fields.join();\n};\n\nexport const /** @type {?} */ generateFilteringQueryParams = (\n  filtering: Array<FilteringParam>\n): string => {\n  if (_.isEmpty(filtering)) {\n    return '';\n  }\n  let /** @type {?} */ filteringParams = filtering.map(f => {\n    return (\n      'filter[' +\n      f.path +\n      ']' +\n      (f.operator ? '[' + f.operator + ']' : '') +\n      '=' +\n      encodeURIComponent(f.value)\n    );\n  });\n  return filteringParams.join('&');\n};\n\nexport const /** @type {?} */ generateSortingQueryParams = (\n  sorting: Array<SortingParam>\n): string => {\n  if (_.isEmpty(sorting)) {\n    return '';\n  }\n  return (\n    'sort=' +\n    sorting\n      .map(f => (f.direction === Direction.ASC ? '' : '-') + f.api)\n      .join(',')\n  );\n};\n\nexport const /** @type {?} */ generateQueryParams = (...params: Array<string>) => {\n  let /** @type {?} */ newParams = params.filter(p => p !== '');\n  if (newParams.length !== 0) {\n    return '?' + newParams.join('&');\n  } else {\n    return '';\n  }\n};\n\nexport const /** @type {?} */ generatePayload = (\n  resource: StoreResource,\n  operation: OperationType\n): Payload => {\n  let /** @type {?} */ payload: Payload = {\n    query: {\n      type: resource.type,\n    },\n  };\n\n  // the data to be updated or created\n  if (operation === 'POST' || operation === 'PATCH') {\n    payload.jsonApiData = {\n      data: {\n        id: resource.id,\n        type: resource.type,\n        attributes: resource.attributes,\n        relationships: resource.relationships,\n      },\n    };\n  }\n\n  if (operation === 'POST' && resource.hasTemporaryId) {\n    delete payload.jsonApiData.data.id;\n  }\n\n  // 'DELETE' only needs a query and it also needs an id in its query\n  // 'PATCH' also needs an id in its query\n  // 'POST' needed locally to allow to write back errors to store if id is available\n  if (operation === 'PATCH' || operation === 'DELETE' || operation === 'POST') {\n    payload.query.id = resource.id;\n  }\n\n  return payload;\n};\n\n/* tslint:disable */\nexport const /** @type {?} */ uuid = () => {\n  let /** @type {?} */ lut = [];\n  for (let /** @type {?} */ i = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n  }\n  let /** @type {?} */ d0 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d1 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d2 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d3 = (Math.random() * 0xffffffff) | 0;\n  return (\n    lut[d0 & 0xff] +\n    lut[(d0 >> 8) & 0xff] +\n    lut[(d0 >> 16) & 0xff] +\n    lut[(d0 >> 24) & 0xff] +\n    '-' +\n    lut[d1 & 0xff] +\n    lut[(d1 >> 8) & 0xff] +\n    '-' +\n    lut[((d1 >> 16) & 0x0f) | 0x40] +\n    lut[(d1 >> 24) & 0xff] +\n    '-' +\n    lut[(d2 & 0x3f) | 0x80] +\n    lut[(d2 >> 8) & 0xff] +\n    '-' +\n    lut[(d2 >> 16) & 0xff] +\n    lut[(d2 >> 24) & 0xff] +\n    lut[d3 & 0xff] +\n    lut[(d3 >> 8) & 0xff] +\n    lut[(d3 >> 16) & 0xff] +\n    lut[(d3 >> 24) & 0xff]\n  );\n};\n/* tslint:enable */\n\nconst /** @type {?} */ toKey = (id: ResourceIdentifier) => {\n  return id.id + '@' + id.type;\n};\n\nconst /** @type {?} */ collectQueryResults = (state: NgrxJsonApiStore, usedResources: any) => {\n  for (let /** @type {?} */ queryName in state.queries) {\n    if (state.queries.hasOwnProperty(queryName)) {\n      let /** @type {?} */ query = state.queries[queryName];\n      if (query.resultIds) {\n        for (let /** @type {?} */ resultId of query.resultIds) {\n          usedResources[toKey(resultId)] = true;\n        }\n      }\n    }\n  }\n};\n\nconst /** @type {?} */ collectPendingChanges = (state: NgrxJsonApiStore, usedResources: any) => {\n  for (let /** @type {?} */ type in state.data) {\n    if (state.data.hasOwnProperty(type)) {\n      let /** @type {?} */ resources = state.data[type];\n      for (let /** @type {?} */ id in resources) {\n        if (resources.hasOwnProperty(id)) {\n          let /** @type {?} */ resource = resources[id];\n          if (resource.state !== 'IN_SYNC') {\n            usedResources[toKey(resource)] = true;\n          }\n        }\n      }\n    }\n  }\n};\n\nconst /** @type {?} */ collectReferencesForResource = (\n  state: NgrxJsonApiStore,\n  usedResources: any,\n  resource: Resource\n) => {\n  let /** @type {?} */ hasChanges: boolean;\n  for (let /** @type {?} */ relationshipName in resource.relationships) {\n    if (resource.relationships.hasOwnProperty(relationshipName)) {\n      let /** @type {?} */ data = resource.relationships[relationshipName].data;\n      if (data) {\n        let /** @type {?} */ dependencyIds: Array<ResourceIdentifier> =\n          data instanceof Array ? data : [data];\n        for (let /** @type {?} */ dependencyId of dependencyIds) {\n          let /** @type {?} */ dependencyKey = toKey(dependencyId);\n          if (!usedResources[dependencyKey]) {\n            // change found, an other iteration will be necssary to detect\n            // transitive dependencies\n            hasChanges = true;\n            usedResources[dependencyKey] = true;\n          }\n        }\n      }\n    }\n  }\n  return hasChanges;\n};\n\nconst /** @type {?} */ collectReferences = (state: NgrxJsonApiStore, usedResources: any) => {\n  while (true) {\n    let /** @type {?} */ hasChanges = false;\n    for (let /** @type {?} */ type in state.data) {\n      if (state.data.hasOwnProperty(type)) {\n        let /** @type {?} */ resources = state.data[type];\n        for (let /** @type {?} */ id in resources) {\n          if (resources.hasOwnProperty(id)) {\n            let /** @type {?} */ resource = resources[id];\n            if (usedResources[toKey(resource)]) {\n              // in use, do not collect its relations\n              hasChanges =\n                hasChanges ||\n                collectReferencesForResource(state, usedResources, resource);\n            }\n          }\n        }\n      }\n    }\n    if (!hasChanges) {\n      break;\n    }\n  }\n};\n\nconst /** @type {?} */ sweepUnusedResources = (state: NgrxJsonApiStore, usedResources: any) => {\n  let /** @type {?} */ hasDeletions = false;\n  let /** @type {?} */ newState = _.cloneDeep(state);\n  for (let /** @type {?} */ type in newState.data) {\n    if (newState.data.hasOwnProperty(type)) {\n      let /** @type {?} */ resources = newState.data[type];\n      for (let /** @type {?} */ id in resources) {\n        if (resources.hasOwnProperty(id)) {\n          let /** @type {?} */ resource = resources[id];\n          if (!usedResources[toKey(resource)]) {\n            hasDeletions = true;\n            delete resources[id];\n          }\n        }\n      }\n\n      if (_.isEmpty(resources)) {\n        delete newState.data[type];\n      }\n    }\n  }\n  return hasDeletions ? newState : state;\n};\n\nexport const /** @type {?} */ compactStore = (state: NgrxJsonApiStore) => {\n  let /** @type {?} */ usedResources = {};\n\n  // query results can not be collected\n  collectQueryResults(state, usedResources);\n\n  // pending changes cannot be collected\n  collectPendingChanges(state, usedResources);\n\n  // references from non-collected objects cannot be collected as well\n  collectReferences(state, usedResources);\n\n  // remove everything that is not collected\n  return sweepUnusedResources(state, usedResources);\n};\n\ninterface TopologySortContext {\n  pendingResources: Array<StoreResource>;\n  cursor: number;\n  sorted: Array<StoreResource>;\n  visited: Array<boolean>;\n  dependencies: { [id: string]: Array<StoreResource> };\n}\n\nexport const /** @type {?} */ sortPendingChanges = (\n  pendingResources: Array<StoreResource>\n): Array<StoreResource> => {\n  // allocate dependency\n  let /** @type {?} */ dependencies: any = {};\n  let /** @type {?} */ pendingMap: any = {};\n  for (let /** @type {?} */ pendingResource of pendingResources) {\n    let /** @type {?} */ resource = pendingResource;\n    let /** @type {?} */ key = toKey(resource);\n    dependencies[key] = [];\n    pendingMap[key] = pendingResource;\n  }\n\n  // extract dependencies\n  for (let /** @type {?} */ pendingResource of pendingResources) {\n    let /** @type {?} */ resource = pendingResource;\n    if (resource.relationships) {\n      let /** @type {?} */ key = toKey(resource);\n      Object.keys(resource.relationships).forEach(relationshipName => {\n        let /** @type {?} */ data = resource.relationships[relationshipName].data;\n        if (data) {\n          let /** @type {?} */ dependencyIds: Array<ResourceIdentifier> =\n            data instanceof Array ? data : [data];\n          for (let /** @type {?} */ dependencyId of dependencyIds) {\n            let /** @type {?} */ dependencyKey = toKey(dependencyId);\n            if (\n              pendingMap[dependencyKey] &&\n              pendingMap[dependencyKey].state === 'CREATED'\n            ) {\n              // we have a dependency between two unsaved objects\n              dependencies[key].push(pendingMap[dependencyKey]);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  // order\n  let /** @type {?} */ context = {\n    pendingResources: pendingResources,\n    cursor: pendingResources.length,\n    sorted: new Array(pendingResources.length),\n    dependencies: dependencies,\n    visited: /** @type {?} */(( <any[]>[])),\n  };\n\n  let /** @type {?} */ i = context.cursor;\n  while (i--) {\n    if (!context.visited[i]) {\n      visitPending(pendingResources[i], i, [], context);\n    }\n  }\n\n  return context.sorted;\n};\n\nconst /** @type {?} */ visitPending = (\n  pendingResource: StoreResource,\n  i: any,\n  predecessors: any,\n  context: TopologySortContext\n) => {\n  let /** @type {?} */ key = toKey(pendingResource);\n  if (predecessors.indexOf(key) >= 0) {\n    throw new Error(\n      'Cyclic dependency: ' + key + ' with ' + JSON.stringify(predecessors)\n    );\n  }\n\n  if (context.visited[i]) {\n    return;\n  }\n  context.visited[i] = true;\n\n  // outgoing edges\n  let /** @type {?} */ outgoing: Array<StoreResource> = context.dependencies[key];\n\n  let /** @type {?} */ preds = predecessors.concat(key);\n  for (let /** @type {?} */ child of outgoing) {\n    visitPending(\n      child,\n      context.pendingResources.indexOf(child),\n      preds,\n      context\n    );\n  }\n\n  context.sorted[--context.cursor] = pendingResource;\n};\n/**\n * @param {?} state\n * @return {?}\n */\nexport function getPendingChanges(\n  state: NgrxJsonApiStore\n): Array<StoreResource> {\n  let /** @type {?} */ pending: Array<StoreResource> = [];\n  Object.keys(state.data).forEach(type => {\n    Object.keys(state.data[type]).forEach(id => {\n      let /** @type {?} */ storeResource = state.data[type][id];\n      if (storeResource.state !== 'IN_SYNC' && storeResource.state !== 'NEW') {\n        pending.push(storeResource);\n      }\n    });\n  });\n  return pending;\n}\n","import { Action, ActionReducer, ActionReducerMap } from '@ngrx/store';\n\nimport { NgrxJsonApiActionTypes, NgrxJsonApiActions } from './actions';\nimport {\n  Query,\n  ResourceState,\n  StoreResource,\n  NgrxJsonApiStore,\n  ModifyStoreResourceErrorsPayload,\n  ResourceIdentifier,\n} from './interfaces';\nimport {\n  deleteStoreResources,\n  clearQueryResult,\n  updateQueryParams,\n  updateQueryResults,\n  updateQueryErrors,\n  updateStoreDataFromPayload,\n  updateStoreDataFromResource,\n  updateResourceState,\n  removeQuery,\n  rollbackStoreResources,\n  updateResourceErrorsForQuery,\n  updateQueriesForDeletedResource,\n  compactStore,\n  updateResourceErrors,\n  removeStoreResource,\n  getPendingChanges,\n} from './utils';\n\nexport const /** @type {?} */ initialNgrxJsonApiState: NgrxJsonApiStore = {\n  isCreating: 0,\n  isReading: 0,\n  isUpdating: 0,\n  isDeleting: 0,\n  isApplying: 0,\n  data: {},\n  queries: {},\n};\n/**\n * @param {?=} state\n * @param {?=} action\n * @return {?}\n */\nexport function NgrxJsonApiStoreReducer(\n  state: NgrxJsonApiStore = initialNgrxJsonApiState,\n  action: any\n): NgrxJsonApiStore {\n  let /** @type {?} */ newState;\n\n  switch (action.type) {\n    case NgrxJsonApiActionTypes.API_POST_INIT: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        true\n      );\n      newState = {\n        ...state,\n        data: updatedData,\n        isCreating: state.isCreating + 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_GET_INIT: {\n      let /** @type {?} */ query = /** @type {?} */(( action.payload as Query));\n      newState = {\n        ...state,\n        queries: updateQueryParams(state.queries, query),\n        isReading: state.isReading + 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_INIT: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        false\n      );\n      newState = {\n        ...state,\n        data: updatedData,\n        isUpdating: state.isUpdating + 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_INIT: {\n      newState = {\n        ...state,\n        data: updateResourceState(state.data, action.payload, 'DELETED'),\n        isDeleting: state.isDeleting + 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_POST_SUCCESS: {\n      newState = {\n        ...state,\n        data: updateStoreDataFromPayload(\n          state.data,\n          action.payload.jsonApiData\n        ),\n        isCreating: state.isCreating - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_GET_SUCCESS: {\n      newState = {\n        ...state,\n        data: updateStoreDataFromPayload(\n          state.data,\n          action.payload.jsonApiData\n        ),\n        queries: updateQueryResults(\n          state.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n        isReading: state.isReading - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_SUCCESS: {\n      newState = {\n        ...state,\n        data: updateStoreDataFromPayload(\n          state.data,\n          action.payload.jsonApiData\n        ),\n        isUpdating: state.isUpdating - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_SUCCESS: {\n      newState = {\n        ...state,\n        data: deleteStoreResources(state.data, action.payload.query),\n        queries: updateQueriesForDeletedResource(state.queries, {\n          id: action.payload.query.id,\n          type: action.payload.query.type,\n        }),\n        isDeleting: state.isDeleting - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_QUERY_REFRESH: {\n      // clear result ids and wait until new data is fetched (triggered by effect)\n      newState = {\n        ...state,\n        queries: clearQueryResult(state.queries, action.payload),\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_POST_FAIL: {\n      newState = {\n        ...state,\n        data: updateResourceErrorsForQuery(\n          state.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isCreating: state.isCreating - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_GET_FAIL: {\n      newState = {\n        ...state,\n        queries: updateQueryErrors(\n          state.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n        isReading: state.isReading - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_FAIL: {\n      newState = {\n        ...state,\n        data: updateResourceErrorsForQuery(\n          state.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isUpdating: state.isUpdating - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_FAIL: {\n      newState = {\n        ...state,\n        data: updateResourceErrorsForQuery(\n          state.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isDeleting: state.isDeleting - 1,\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.REMOVE_QUERY: {\n      let /** @type {?} */ queryId = /** @type {?} */(( action.payload as string));\n      newState = { ...state, queries: removeQuery(state.queries, queryId) };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.LOCAL_QUERY_INIT: {\n      let /** @type {?} */ query = /** @type {?} */(( action.payload as Query));\n      newState = { ...state, queries: updateQueryParams(state.queries, query) };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.MODIFY_STORE_RESOURCE_ERRORS: {\n      let /** @type {?} */ payload = /** @type {?} */(( action.payload as ModifyStoreResourceErrorsPayload));\n      newState = {\n        ...state,\n        data: updateResourceErrors(\n          state.data,\n          payload.resourceId,\n          payload.errors,\n          payload.modificationType\n        ),\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.LOCAL_QUERY_SUCCESS: {\n      newState = {\n        ...state,\n        queries: updateQueryResults(\n          state.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n      };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.PATCH_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        false\n      );\n      if (updatedData !== state.data) {\n        newState = { ...state, data: updatedData };\n        return newState;\n      } else {\n        return state;\n      }\n    }\n    case NgrxJsonApiActionTypes.POST_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        true\n      );\n      if (updatedData !== state.data) {\n        newState = { ...state, data: updatedData };\n        return newState;\n      } else {\n        return state;\n      }\n    }\n    case NgrxJsonApiActionTypes.NEW_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        state.data,\n        action.payload,\n        false,\n        true\n      );\n      updatedData = updateResourceState(updatedData, action.payload, 'NEW');\n      if (updatedData !== state.data) {\n        newState = { ...state, data: updatedData };\n        return newState;\n      } else {\n        return state;\n      }\n    }\n    case NgrxJsonApiActionTypes.DELETE_STORE_RESOURCE: {\n      let /** @type {?} */ resourceId = /** @type {?} */(( action.payload as ResourceIdentifier));\n      if (\n        state.data[resourceId.type] &&\n        state.data[resourceId.type][resourceId.id]\n      ) {\n        let /** @type {?} */ resource = state.data[resourceId.type][resourceId.id];\n\n        if (resource.state === 'NEW' || resource.state === 'CREATED') {\n          // not yet stored on server-side, just delete\n          newState = {\n            ...state,\n            data: removeStoreResource(state.data, resourceId),\n          };\n          return newState;\n        } else {\n          // stored on server, mark for deletion\n          newState = {\n            ...state,\n            data: updateResourceState(state.data, action.payload, 'DELETED'),\n          };\n          return newState;\n        }\n      }\n      return state;\n    }\n    case NgrxJsonApiActionTypes.API_APPLY_INIT: {\n      let /** @type {?} */ pending: Array<StoreResource> = getPendingChanges(state);\n      newState = { ...state, isApplying: state.isApplying + 1 };\n      for (let /** @type {?} */ pendingChange of pending) {\n        if (pendingChange.state === 'CREATED') {\n          newState.isCreating++;\n        } else if (pendingChange.state === 'UPDATED') {\n          newState.isUpdating++;\n        } else if (pendingChange.state === 'DELETED') {\n          newState.isDeleting++;\n        } else {\n          throw new Error('unknown state ' + pendingChange.state);\n        }\n      }\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_APPLY_SUCCESS:\n    case NgrxJsonApiActionTypes.API_APPLY_FAIL: {\n      // apply all the committed or failed changes\n      let /** @type {?} */ actions = /** @type {?} */(( action.payload as Array<Action>));\n      newState = state;\n      for (let /** @type {?} */ commitAction of actions) {\n        newState = NgrxJsonApiStoreReducer(newState, commitAction);\n      }\n      newState = { ...newState, isApplying: state['isApplying'] - 1 };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.API_ROLLBACK: {\n      newState = { ...state, data: rollbackStoreResources(state.data) };\n      return newState;\n    }\n    case NgrxJsonApiActionTypes.CLEAR_STORE: {\n      return initialNgrxJsonApiState;\n    }\n    case NgrxJsonApiActionTypes.COMPACT_STORE: {\n      return compactStore(state);\n    }\n    default:\n      return state;\n  }\n}\n\nexport const /** @type {?} */ reducer: ActionReducerMap<any> = {\n  api: NgrxJsonApiStoreReducer,\n};\n","import { ModuleWithProviders, NgModule, OpaqueToken } from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\n\nimport { Store, StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { NgrxJsonApi } from './api';\nimport { NgrxJsonApiEffects } from './effects';\nimport { NgrxJsonApiSelectors } from './selectors';\nimport { NgrxJsonApiService } from './services';\nimport { reducer } from './reducers';\nimport {\n  DenormaliseStoreResourcePipe,\n  GetDenormalisedValuePipe,\n  SelectStoreResourcePipe,\n} from './pipes';\n\nimport { NgrxJsonApiConfig } from './interfaces';\n\nexport const /** @type {?} */ NGRX_JSON_API_CONFIG = new OpaqueToken('NGRX_JSON_API_CONFIG');\n/**\n * @param {?} http\n * @param {?} config\n * @return {?}\n */\nexport function apiFactory(http: HttpClient, config: NgrxJsonApiConfig) {\n  return new NgrxJsonApi(http, config);\n}\n/**\n * @param {?} config\n * @return {?}\n */\nexport function selectorsFactory(config: NgrxJsonApiConfig) {\n  return new NgrxJsonApiSelectors<any>(config);\n}\n/**\n * @param {?} store\n * @param {?} selectors\n * @return {?}\n */\nexport function serviceFactory(\n  store: Store<any>,\n  selectors: NgrxJsonApiSelectors<any>\n) {\n  return new NgrxJsonApiService(store, selectors);\n}\n/**\n * @param {?} config\n * @return {?}\n */\nexport function configure(config: NgrxJsonApiConfig): Array<any> {\n  return [\n    {\n      provide: NgrxJsonApi,\n      useFactory: apiFactory,\n      deps: [HttpClient, NGRX_JSON_API_CONFIG],\n    },\n    {\n      provide: NgrxJsonApiSelectors,\n      useFactory: selectorsFactory,\n      deps: [NGRX_JSON_API_CONFIG],\n    },\n    {\n      provide: NgrxJsonApiService,\n      useFactory: serviceFactory,\n      deps: [Store, NgrxJsonApiSelectors],\n    },\n    {\n      provide: NGRX_JSON_API_CONFIG,\n      useValue: config,\n    },\n  ];\n}\nexport class NgrxJsonApiModule {\n/**\n * @param {?} config\n * @return {?}\n */\nstatic configure(config: NgrxJsonApiConfig): ModuleWithProviders {\n    return {\n      ngModule: NgrxJsonApiModule,\n      providers: configure(config),\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    DenormaliseStoreResourcePipe,\n    GetDenormalisedValuePipe,\n    SelectStoreResourcePipe,\n  ],\n  imports: [\n    EffectsModule.forFeature([NgrxJsonApiEffects]),\n    StoreModule.forFeature('NgrxJsonApi', reducer, {}),\n  ],\n  exports: [\n    DenormaliseStoreResourcePipe,\n    GetDenormalisedValuePipe,\n    SelectStoreResourcePipe,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgrxJsonApiModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgrxJsonApiModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Observable } from 'rxjs/Observable';\nimport { AnonymousSubscription } from 'rxjs/Subscription';\nexport type Direction = number;\nexport let Direction: any = {};\nDirection.ASC = 0;\nDirection.DESC = 1;\nDirection[Direction.ASC] = \"ASC\";\nDirection[Direction.DESC] = \"DESC\";\n\n\nexport interface Document {\n  data?: any;\n  included?: any;\n  meta?: any;\n  links?: any;\n  errors?: Array<ResourceError>;\n}\n\nexport interface FilteringParam {\n  path?: string;\n  operator?: string;\n  value?: any;\n}\n\nexport interface FilteringOperator {\n  name: string;\n  apiName?: string;\n  comparison: (value: any, resourceFieldValue: any) => boolean;\n}\n\nexport interface ManyResourceRelationship {\n  data?: Array<ResourceIdentifier>;\n  reference?: Array<StoreResource>;\n}\n\n/**\n * Used by code generators to navigate relationships in a type-safe manner.\n * See crnk.io for a first such generator.\n */\nexport interface TypedManyResourceRelationship<T extends StoreResource>\n  extends ManyResourceRelationship {\n  reference?: Array<T>;\n}\n\n/**\n * Used by code generators to navigate relationships in a type-safe manner.\n * See crnk.io for a first such generator.\n */\nexport interface TypedOneResourceRelationship<T extends StoreResource>\n  extends OneResourceRelationship {\n  reference?: T;\n}\n\nexport interface NgrxJsonApiConfig {\n  apiUrl: string;\n  initialState?: any;\n  resourceDefinitions: Array<ResourceDefinition>;\n  urlBuilder?: NgrxJsonApiUrlBuilder;\n  filteringConfig?: NgrxJsonApiFilteringConfig;\n}\n\nexport interface NgrxJsonApiStore {\n  data: NgrxJsonApiStoreData;\n  queries: NgrxJsonApiStoreQueries;\n  isCreating: number;\n  isReading: number;\n  isUpdating: number;\n  isDeleting: number;\n  isApplying: number;\n}\n\nexport interface NgrxJsonApiStoreData {\n  [id: string]: NgrxJsonApiStoreResources;\n}\n\nexport interface NgrxJsonApiStoreQueries {\n  [id: string]: StoreQuery;\n}\n\nexport interface NgrxJsonApiStoreResources {\n  [id: string]: StoreResource;\n}\n\nexport interface NgrxJsonApiFilteringConfig {\n  pathSeparator?: string;\n  filteringOperators?: Array<FilteringOperator>;\n}\n\nexport interface NgrxJsonApiUrlBuilder {\n  generateFilteringQueryParams?: (params: Array<FilteringParam>) => string;\n  generateFieldsQueryParams?: (params: Array<string>) => string;\n  generateIncludedQueryParams?: (params: Array<string>) => string;\n  generateSortingQueryParams?: (params: Array<SortingParam>) => string;\n  generateQueryParams?: (...params: Array<string>) => string;\n}\n\nexport type OperationType = 'GET' | 'DELETE' | 'PATCH' | 'POST' | false;\n\nexport interface OneResourceRelationship {\n  data?: ResourceIdentifier;\n  reference?: StoreResource;\n}\n\nexport type ErrorModificationType = 'ADD' | 'REMOVE' | 'SET';\n\nexport interface ModifyStoreResourceErrorsPayload {\n  resourceId: ResourceIdentifier;\n  errors: Array<ResourceError>;\n  modificationType: ErrorModificationType;\n}\n\nexport interface Payload {\n  jsonApiData?: Document;\n  query: Query;\n}\n\nexport interface Query {\n  queryId?: string;\n  type?: string;\n  id?: string;\n  params?: QueryParams;\n}\n\nexport interface QueryParams {\n  filtering?: Array<FilteringParam>;\n  sorting?: Array<SortingParam>;\n  include?: Array<string>;\n  fields?: Array<string>;\n  offset?: number;\n  limit?: number;\n}\n\nexport interface Resource extends ResourceIdentifier {\n  attributes?: { [key: string]: any };\n  relationships?: { [key: string]: ResourceRelationship };\n  meta?: any;\n  links?: any;\n}\n\nexport interface ResourceAttributeDefinition {\n  apiName?: string;\n}\n\nexport interface ResourceDefinition {\n  type: string;\n  collectionPath: string;\n  attributes?: { [key: string]: ResourceAttributeDefinition };\n  relationships?: { [key: string]: ResourceRelationDefinition };\n}\n\nexport interface ResourceError {\n  id?: string;\n  links?: any;\n  status?: string;\n  code?: string;\n  title?: string;\n  detail?: string;\n  source?: ResourceErrorSource;\n  meta?: any;\n}\n\nexport interface ResourceErrorSource {\n  pointer?: string;\n  parameter?: string;\n}\n\nexport interface ResourceIdentifier {\n  type: string;\n  id: string;\n}\n\nexport interface ResourceRelationship {\n  data?: any;\n  links?: any;\n  reference?: any;\n}\n\nexport interface ResourceRelationDefinition {\n  type: string;\n  relationType: ResourceRelationType;\n}\n\nexport type ResourceRelationType = 'hasOne' | 'hasMany';\n\nexport type ResourceState =\n  | 'NEW'\n  | 'IN_SYNC'\n  | 'CREATED'\n  | 'UPDATED'\n  | 'DELETED'\n  | 'NOT_LOADED';\n\nexport interface SortingParam {\n  api: string;\n  direction: Direction;\n}\n\nexport interface QueryResult extends StoreQuery {\n  data?: StoreResource | Array<StoreResource>;\n}\n\nexport interface ManyQueryResult extends QueryResult {\n  data?: Array<StoreResource>;\n}\n\nexport interface OneQueryResult extends QueryResult {\n  data?: StoreResource;\n}\n\nexport interface StoreQuery {\n  query: Query;\n  loading: Boolean;\n  resultIds?: Array<ResourceIdentifier>;\n  meta?: any;\n  links?: any;\n\n  /**\n   * Errors received from the server after attempting to perform a GET request.\n   */\n  errors: Array<ResourceError>;\n}\n\n/**\n* Container to hold a Resource in the store with state information.\n*/\nexport interface StoreResource extends Resource {\n  /**\n  * State of the resource to track local changes not yet\n  * published to the json api endpoint.\n  */\n  state?: ResourceState;\n  /**\n  * The original resource obtained from the server.\n  */\n  persistedResource?: Resource;\n  /**\n  * One of the operation types: reading, creating, updating or deleting.\n  */\n  loading?: OperationType;\n  /**\n  * Errors received from the server after attempting to store the resource.\n  */\n  errors?: Array<ResourceError>;\n\n  /**\n   * new resources may only obtain an id when posted to the server. Till that point\n   * a StoreResource can assign make use of a temporary id and signal this by setting\n   * this flag to true. The id will not be transmitted to the server and the resource\n   * is removed from its temporary location (given by its id) as soon as it is posted\n   * to the server.\n   */\n  hasTemporaryId?: boolean;\n}\n","import { Injectable } from '@angular/core';\n\nimport { Action } from '@ngrx/store';\n\nimport {\n  Payload,\n  Resource,\n  ResourceIdentifier,\n  Query,\n  ModifyStoreResourceErrorsPayload,\n} from './interfaces';\n\nexport const /** @type {?} */ NgrxJsonApiActionTypes = {\n  API_POST_INIT: '[NgrxJsonApi] API_POST_INIT',\n  API_POST_SUCCESS: '[NgrxJsonApi] API_POST_SUCCESS',\n  API_POST_FAIL: '[NgrxJsonApi] API_POST_FAIL',\n  API_GET_INIT: '[NgrxJsonApi] API_GET_INIT',\n  API_GET_SUCCESS: '[NgrxJsonApi] API_GET_SUCCESS',\n  API_GET_FAIL: '[NgrxJsonApi] API_GET_FAIL',\n  API_PATCH_INIT: '[NgrxJsonApi] API_PATCH_INIT',\n  API_PATCH_SUCCESS: '[NgrxJsonApi] API_PATCH_SUCCESS',\n  API_PATCH_FAIL: '[NgrxJsonApi] API_PATCH_FAIL',\n  API_DELETE_INIT: '[NgrxJsonApi] API_DELETE_INIT',\n  API_DELETE_SUCCESS: '[NgrxJsonApi] API_DELETE_SUCCESS',\n  API_DELETE_FAIL: '[NgrxJsonApi] API_DELETE_FAIL',\n  API_APPLY_INIT: '[NgrxJsonApi] API_APPLY_INIT',\n  API_APPLY_SUCCESS: '[NgrxJsonApi] API_APPLY_SUCCESS',\n  API_APPLY_FAIL: '[NgrxJsonApi] API_APPLY_FAIL',\n  API_ROLLBACK: '[NgrxJsonApi] API_ROLLBACK',\n  API_QUERY_REFRESH: '[NgrxJsonApi] API_QUERY_REFRESH',\n  LOCAL_QUERY_INIT: '[NgrxJsonApi] LOCAL_QUERY_INIT',\n  LOCAL_QUERY_SUCCESS: '[NgrxJsonApi] LOCAL_QUERY_SUCCESS',\n  LOCAL_QUERY_FAIL: '[NgrxJsonApi] LOCAL_QUERY_FAIL',\n  DELETE_STORE_RESOURCE: '[NgrxJsonApi] DELETE_STORE_RESOURCE',\n  PATCH_STORE_RESOURCE: '[NgrxJsonApi] PATCH_STORE_RESOURCE',\n  NEW_STORE_RESOURCE: '[NgrxJsonApi] NEW_STORE_RESOURCE',\n  POST_STORE_RESOURCE: '[NgrxJsonApi] POST_STORE_RESOURCE',\n  MODIFY_STORE_RESOURCE_ERRORS: '[NgrxJsonApi] MODIFY_STORE_RESOURCE_ERRORS',\n  REMOVE_QUERY: '[NgrxJsonApi] REMOVE_QUERY',\n  COMPACT_STORE: '[NgrxJsonApi] COMPACT_STORE',\n  CLEAR_STORE: '[NgrxJsonApi] CLEAR_STORE',\n};\nexport class ApiApplyInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_INIT;\n}\n\nfunction ApiApplyInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplyInitAction.prototype.type;\n}\n\nexport class ApiApplySuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Array<Action>) {}\n}\n\nfunction ApiApplySuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplySuccessAction.prototype.type;\n/** @type {?} */\nApiApplySuccessAction.prototype.payload;\n}\n\nexport class ApiApplyFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Array<Action>) {}\n}\n\nfunction ApiApplyFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplyFailAction.prototype.type;\n/** @type {?} */\nApiApplyFailAction.prototype.payload;\n}\n\nexport class ApiPostInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_POST_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction ApiPostInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostInitAction.prototype.type;\n/** @type {?} */\nApiPostInitAction.prototype.payload;\n}\n\nexport class ApiPostSuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_POST_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiPostSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostSuccessAction.prototype.type;\n/** @type {?} */\nApiPostSuccessAction.prototype.payload;\n}\n\nexport class ApiPostFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_POST_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiPostFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostFailAction.prototype.type;\n/** @type {?} */\nApiPostFailAction.prototype.payload;\n}\n\nexport class ApiDeleteInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: ResourceIdentifier) {}\n}\n\nfunction ApiDeleteInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteInitAction.prototype.type;\n/** @type {?} */\nApiDeleteInitAction.prototype.payload;\n}\n\nexport class ApiDeleteSuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiDeleteSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteSuccessAction.prototype.type;\n/** @type {?} */\nApiDeleteSuccessAction.prototype.payload;\n}\n\nexport class ApiDeleteFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiDeleteFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteFailAction.prototype.type;\n/** @type {?} */\nApiDeleteFailAction.prototype.payload;\n}\n\nexport class ApiGetInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_GET_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Query) {}\n}\n\nfunction ApiGetInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetInitAction.prototype.type;\n/** @type {?} */\nApiGetInitAction.prototype.payload;\n}\n\nexport class ApiGetSuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_GET_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiGetSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetSuccessAction.prototype.type;\n/** @type {?} */\nApiGetSuccessAction.prototype.payload;\n}\n\nexport class ApiGetFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_GET_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiGetFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetFailAction.prototype.type;\n/** @type {?} */\nApiGetFailAction.prototype.payload;\n}\n\nexport class ApiRollbackAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_ROLLBACK;\nconstructor() {}\n}\n\nfunction ApiRollbackAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiRollbackAction.prototype.type;\n}\n\nexport class ApiPatchInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction ApiPatchInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchInitAction.prototype.type;\n/** @type {?} */\nApiPatchInitAction.prototype.payload;\n}\n\nexport class ApiPatchSuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiPatchSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchSuccessAction.prototype.type;\n/** @type {?} */\nApiPatchSuccessAction.prototype.payload;\n}\n\nexport class ApiPatchFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction ApiPatchFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchFailAction.prototype.type;\n/** @type {?} */\nApiPatchFailAction.prototype.payload;\n}\n\nexport class DeleteStoreResourceAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.DELETE_STORE_RESOURCE;\n/**\n * @param {?} payload\n */\nconstructor(public payload: ResourceIdentifier) {}\n}\n\nfunction DeleteStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nDeleteStoreResourceAction.prototype.type;\n/** @type {?} */\nDeleteStoreResourceAction.prototype.payload;\n}\n\nexport class PatchStoreResourceAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.PATCH_STORE_RESOURCE;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction PatchStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nPatchStoreResourceAction.prototype.type;\n/** @type {?} */\nPatchStoreResourceAction.prototype.payload;\n}\n\nexport class NewStoreResourceAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.NEW_STORE_RESOURCE;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction NewStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nNewStoreResourceAction.prototype.type;\n/** @type {?} */\nNewStoreResourceAction.prototype.payload;\n}\n\nexport class PostStoreResourceAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.POST_STORE_RESOURCE;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Resource) {}\n}\n\nfunction PostStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nPostStoreResourceAction.prototype.type;\n/** @type {?} */\nPostStoreResourceAction.prototype.payload;\n}\n\nexport class RemoveQueryAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.REMOVE_QUERY;\n/**\n * @param {?} payload\n */\nconstructor(public payload: string) {}\n}\n\nfunction RemoveQueryAction_tsickle_Closure_declarations() {\n/** @type {?} */\nRemoveQueryAction.prototype.type;\n/** @type {?} */\nRemoveQueryAction.prototype.payload;\n}\n\nexport class LocalQueryInitAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_INIT;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Query) {}\n}\n\nfunction LocalQueryInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQueryInitAction.prototype.type;\n/** @type {?} */\nLocalQueryInitAction.prototype.payload;\n}\n\nexport class LocalQuerySuccessAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_SUCCESS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction LocalQuerySuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQuerySuccessAction.prototype.type;\n/** @type {?} */\nLocalQuerySuccessAction.prototype.payload;\n}\n\nexport class LocalQueryFailAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_FAIL;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Payload) {}\n}\n\nfunction LocalQueryFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQueryFailAction.prototype.type;\n/** @type {?} */\nLocalQueryFailAction.prototype.payload;\n}\n\nexport class CompactStoreAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.COMPACT_STORE;\nconstructor() {}\n}\n\nfunction CompactStoreAction_tsickle_Closure_declarations() {\n/** @type {?} */\nCompactStoreAction.prototype.type;\n}\n\nexport class ClearStoreAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.CLEAR_STORE;\nconstructor() {}\n}\n\nfunction ClearStoreAction_tsickle_Closure_declarations() {\n/** @type {?} */\nClearStoreAction.prototype.type;\n}\n\nexport class ApiQueryRefreshAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.API_QUERY_REFRESH;\n/**\n * @param {?} payload\n */\nconstructor(public payload: string) {\n    if (!payload) {\n      throw new Error('no query id provided for ApiQueryRefreshAction');\n    }\n  }\n}\n\nfunction ApiQueryRefreshAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiQueryRefreshAction.prototype.type;\n/** @type {?} */\nApiQueryRefreshAction.prototype.payload;\n}\n\nexport class ModifyStoreResourceErrorsAction implements Action {\n  readonly type = NgrxJsonApiActionTypes.MODIFY_STORE_RESOURCE_ERRORS;\n/**\n * @param {?} payload\n */\nconstructor(public payload: ModifyStoreResourceErrorsPayload) {}\n}\n\nfunction ModifyStoreResourceErrorsAction_tsickle_Closure_declarations() {\n/** @type {?} */\nModifyStoreResourceErrorsAction.prototype.type;\n/** @type {?} */\nModifyStoreResourceErrorsAction.prototype.payload;\n}\n\n\nexport type NgrxJsonApiActions =\n  | ApiApplyInitAction\n  | ApiApplySuccessAction\n  | ApiApplyFailAction\n  | ApiPostInitAction\n  | ApiPostSuccessAction\n  | ApiPostFailAction\n  | ApiDeleteInitAction\n  | ApiDeleteSuccessAction\n  | ApiDeleteFailAction\n  | ApiGetInitAction\n  | ApiGetSuccessAction\n  | ApiGetFailAction\n  | ApiRollbackAction\n  | ApiPatchInitAction\n  | ApiPatchSuccessAction\n  | ApiPatchFailAction\n  | DeleteStoreResourceAction\n  | PatchStoreResourceAction\n  | PostStoreResourceAction\n  | NewStoreResourceAction\n  | RemoveQueryAction\n  | ApiQueryRefreshAction\n  | LocalQueryInitAction\n  | LocalQuerySuccessAction\n  | LocalQueryFailAction\n  | ModifyStoreResourceErrorsAction\n  | CompactStoreAction\n  | ClearStoreAction;\n","import * as _ from 'lodash/index';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/finally';\n\nimport { Store } from '@ngrx/store';\n\nimport { NgrxJsonApiSelectors } from './selectors';\nimport {\n  ApiApplyInitAction,\n  ApiPostInitAction,\n  ApiGetInitAction,\n  ApiPatchInitAction,\n  ApiDeleteInitAction,\n  DeleteStoreResourceAction,\n  PatchStoreResourceAction,\n  PostStoreResourceAction,\n  RemoveQueryAction,\n  LocalQueryInitAction,\n  ClearStoreAction,\n  CompactStoreAction,\n  ApiQueryRefreshAction,\n  ModifyStoreResourceErrorsAction,\n  NewStoreResourceAction,\n} from './actions';\nimport {\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  Resource,\n  ResourceIdentifier,\n  Query,\n  QueryResult,\n  OneQueryResult,\n  ManyQueryResult,\n  StoreResource,\n  ResourceError,\n} from './interfaces';\nimport {\n  denormaliseStoreResource,\n  denormaliseStoreResources,\n  getDenormalisedPath,\n  getDenormalisedValue,\n  uuid,\n} from './utils';\n\nexport interface FindOptions {\n  query: Query;\n  fromServer?: boolean;\n  denormalise?: boolean;\n}\n\nexport interface PutQueryOptions {\n  query: Query;\n  fromServer?: boolean;\n}\n\nexport interface PostResourceOptions {\n  resource: Resource;\n  toRemote?: boolean;\n}\n\nexport interface PatchResourceOptions {\n  resource: Resource;\n  toRemote?: boolean;\n}\n\nexport interface NewResourceOptions {\n  resource: Resource;\n}\n\nexport interface DeleteResourceOptions {\n  resourceId: ResourceIdentifier;\n  toRemote?: boolean;\n}\n\n/**\n * This internface is deprecated, do no longer use.\n */\nexport interface Options {\n  query?: Query;\n  denormalise?: boolean;\n  fromServer?: boolean;\n  resource?: Resource;\n  toRemote?: boolean;\n  resourceId?: ResourceIdentifier;\n}\nexport class NgrxJsonApiService {\nprivate test = true;\n/**\n * Keeps current snapshot of the store to allow fast access to resources.\n */\nprivate storeSnapshot: NgrxJsonApiStore;\n/**\n * @param {?} store\n * @param {?} selectors\n */\nconstructor(\nprivate store: Store<any>,\nprivate selectors: NgrxJsonApiSelectors<any>\n  ) {\n    this.store\n      .let(this.selectors.getNgrxJsonApiStore$())\n      .subscribe(it => (this.storeSnapshot = it as NgrxJsonApiStore));\n  }\n/**\n * @param {?} options\n * @return {?}\n */\npublic findOne(options: FindOptions): Observable<OneQueryResult> {\n    return /** @type {?} */(( <Observable<OneQueryResult>>this.findInternal(options, false)));\n  }\n/**\n * @param {?} options\n * @return {?}\n */\npublic findMany(options: FindOptions): Observable<ManyQueryResult> {\n    return /** @type {?} */(( <Observable<ManyQueryResult>>this.findInternal(options, true)));\n  }\n/**\n * Adds the given query to the store. Any existing query with the same queryId is replaced.\n * Make use of selectResults(...) to fetch the data.\n * @param {?} options\n * @return {?}\n */\npublic putQuery(options: PutQueryOptions) {\n    let /** @type {?} */ query = options.query;\n    let /** @type {?} */ fromServer = _.isUndefined(options.fromServer)\n      ? true\n      : options.fromServer;\n\n    if (!query.queryId) {\n      throw new Error('to query must have a queryId');\n    }\n\n    if (fromServer) {\n      this.store.dispatch(new ApiGetInitAction(query));\n    } else {\n      this.store.dispatch(new LocalQueryInitAction(query));\n    }\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic refreshQuery(queryId: string) {\n    this.store.dispatch(new ApiQueryRefreshAction(queryId));\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic removeQuery(queryId: string) {\n    this.store.dispatch(new RemoveQueryAction(queryId));\n  }\n/**\n * @param {?} options\n * @param {?} multi\n * @return {?}\n */\nprivate findInternal(\n    options: FindOptions,\n    multi: boolean\n  ): Observable<QueryResult> {\n    let /** @type {?} */ query = options.query;\n    let /** @type {?} */ fromServer = _.isUndefined(options.fromServer)\n      ? true\n      : options.fromServer;\n    let /** @type {?} */ denormalise = _.isUndefined(options.denormalise)\n      ? false\n      : options.denormalise;\n\n    let /** @type {?} */ newQuery: Query;\n    if (!query.queryId) {\n      newQuery = { ...query, queryId: this.uuid() };\n    } else {\n      newQuery = query;\n    }\n\n    this.putQuery({ query: newQuery, fromServer });\n\n    let /** @type {?} */ queryResult$: Observable<QueryResult>;\n    if (multi) {\n      queryResult$ = this.selectManyResults(newQuery.queryId, denormalise);\n    } else {\n      queryResult$ = this.selectOneResults(newQuery.queryId, denormalise);\n    }\n\n    return /** @type {?} */(( <Observable<QueryResult>>queryResult$.finally(() =>\n      this.removeQuery(newQuery.queryId)\n    )));\n  }\n/**\n * @return {?}\n */\nprivate uuid() {\n    return uuid();\n  }\n/**\n * Gets the current persisted state of the given resources.\n * Consider the use of selectResource(...) to get an observable of the resource.\n * \n * @param {?} identifier\n * @return {?}\n */\npublic getPersistedResourceSnapshot(identifier: ResourceIdentifier) {\n    let /** @type {?} */ snapshot = this.storeSnapshot;\n    if (\n      snapshot.data[identifier.type] &&\n      snapshot.data[identifier.type][identifier.id]\n    ) {\n      return snapshot.data[identifier.type][identifier.id].persistedResource;\n    }\n    return null;\n  }\n/**\n * Gets the current state of the given resources in the store.\n * Consider the use of selectResource(...) to get an observable of the resource.\n * \n * @param {?} identifier\n * @return {?}\n */\npublic getResourceSnapshot(identifier: ResourceIdentifier) {\n    let /** @type {?} */ snapshot = this.storeSnapshot;\n    if (\n      snapshot.data[identifier.type] &&\n      snapshot.data[identifier.type][identifier.id]\n    ) {\n      return snapshot.data[identifier.type][identifier.id];\n    }\n    return null;\n  }\n/**\n * Selects the data of the given query.\n * \n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?} observable holding the data as array of resources.\n */\npublic selectManyResults(\n    queryId: string,\n    denormalize = false\n  ): Observable<ManyQueryResult> {\n    let /** @type {?} */ queryResult$ = this.store\n      .let(this.selectors.getNgrxJsonApiStore$())\n      .let(this.selectors.getManyResults$(queryId, denormalize));\n    return queryResult$;\n  }\n/**\n * Selects the data of the given query.\n * \n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?} observable holding the data as array of resources.\n */\npublic selectOneResults(\n    queryId: string,\n    denormalize = false\n  ): Observable<OneQueryResult> {\n    let /** @type {?} */ queryResult$ = this.store\n      .let(this.selectors.getNgrxJsonApiStore$())\n      .let(this.selectors.getOneResult$(queryId, denormalize));\n    return /** @type {?} */(( queryResult$ as Observable<OneQueryResult>));\n  }\n/**\n * @param {?} identifier of the resource\n * @return {?} observable of the resource\n */\npublic selectStoreResource(\n    identifier: ResourceIdentifier\n  ): Observable<StoreResource> {\n    return this.store.let(this.selectors.getStoreResource$(identifier));\n  }\n/**\n * @param {?} storeResource$\n * @return {?}\n */\npublic denormaliseResource(\n    storeResource$: Observable<StoreResource> | Observable<StoreResource[]>\n  ): Observable<StoreResource> | Observable<StoreResource[]> {\n    return /** @type {?} */(( <\n      | Observable<StoreResource>\n      | Observable<StoreResource[]>>storeResource$.combineLatest(\n      this.store\n        .let(this.selectors.getNgrxJsonApiStore$())\n        .let(this.selectors.getStoreData$()),\n      (\n        storeResource: StoreResource | StoreResource[],\n        storeData: NgrxJsonApiStoreData\n      ) => {\n        if (_.isArray(storeResource)) {\n          return denormaliseStoreResources( /** @type {?} */((\n            storeResource as Array<StoreResource>)),\n            storeData\n          );\n        } else {\n          let /** @type {?} */ resource = /** @type {?} */(( storeResource as StoreResource));\n          return /** @type {?} */(( denormaliseStoreResource(resource, storeData) as StoreResource));\n        }\n      }\n    )));\n  }\n/**\n * @param {?} path\n * @param {?} resourceType\n * @return {?}\n */\npublic getDenormalisedPath(path: string, resourceType: string): string {\n    let /** @type {?} */ pathSeparator = /** @type {?} */(( _.get(\n      this.selectors.config,\n      'filteringConfig.pathSeparator'\n    ) as string));\n    return getDenormalisedPath(\n      path,\n      resourceType,\n      this.selectors.config.resourceDefinitions,\n      pathSeparator\n    );\n  }\n/**\n * @param {?} path\n * @param {?} storeResource\n * @return {?}\n */\npublic getDenormalisedValue(path: string, storeResource: StoreResource): any {\n    let /** @type {?} */ pathSeparator = /** @type {?} */(( _.get(\n      this.selectors.config,\n      'filteringConfig.pathSeparator'\n    ) as string));\n    return getDenormalisedValue(\n      path,\n      storeResource,\n      this.selectors.config.resourceDefinitions,\n      pathSeparator\n    );\n  }\n/**\n * Updates the given resource in the store with the provided data.\n * Use commit() to send the changes to the remote JSON API endpoint.\n * \n * @param {?} options\n * @return {?}\n */\npublic patchResource(options: PatchResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiPatchInitAction(resource));\n    } else {\n      this.store.dispatch(new PatchStoreResourceAction(resource));\n    }\n  }\n/**\n * Creates a new resources that is hold locally in the store\n * and my later be posted.\n * \n * @param {?} options\n * @return {?}\n */\npublic newResource(options: NewResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    this.store.dispatch(new NewStoreResourceAction(resource));\n  }\n/**\n * Adds the given resource to the store. Any already existing\n * resource with the same id gets replaced. Use commit() to send\n * the changes to the remote JSON API endpoint.\n * \n * @param {?} options\n * @return {?}\n */\npublic postResource(options: PostResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiPostInitAction(resource));\n    } else {\n      this.store.dispatch(new PostStoreResourceAction(resource));\n    }\n  }\n/**\n * Marks the given resource for deletion.\n * \n * @param {?} options\n * @return {?}\n */\npublic deleteResource(options: DeleteResourceOptions) {\n    let /** @type {?} */ resourceId = options.resourceId;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiDeleteInitAction(resourceId));\n    } else {\n      this.store.dispatch(new DeleteStoreResourceAction(resourceId));\n    }\n  }\n/**\n * Applies all pending changes to the remote JSON API endpoint.\n * @return {?}\n */\npublic apply() {\n    this.store.dispatch(new ApiApplyInitAction());\n  }\n/**\n * Clear all the contents from the store.\n * @return {?}\n */\npublic clear() {\n    this.store.dispatch(new ClearStoreAction());\n  }\n/**\n * Compacts the store by removing unreferences and unchanges resources.\n * @return {?}\n */\npublic compact() {\n    this.store.dispatch(new CompactStoreAction());\n  }\n/**\n * Adds the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic addResourceErrors(\n    id: ResourceIdentifier,\n    errors: Array<ResourceError>\n  ) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'ADD',\n      })\n    );\n  }\n/**\n * Removes the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic removeResourceErrors(\n    id: ResourceIdentifier,\n    errors: Array<ResourceError>\n  ) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'REMOVE',\n      })\n    );\n  }\n/**\n * Sets the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic setResourceErrors(\n    id: ResourceIdentifier,\n    errors: Array<ResourceError>\n  ) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'SET',\n      })\n    );\n  }\n}\n\nfunction NgrxJsonApiService_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiService.prototype.test;\n/**\n * Keeps current snapshot of the store to allow fast access to resources.\n * @type {?}\n */\nNgrxJsonApiService.prototype.storeSnapshot;\n/** @type {?} */\nNgrxJsonApiService.prototype.store;\n/** @type {?} */\nNgrxJsonApiService.prototype.selectors;\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/let';\n\nimport { NgrxJsonApiService } from './services';\nimport { Resource, ResourceIdentifier, StoreResource } from './interfaces';\nexport class SelectStoreResourcePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} id\n * @return {?}\n */\ntransform(id: ResourceIdentifier): Observable<StoreResource> {\n    return this.service.selectStoreResource(id);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'jaSelectStoreResource' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction SelectStoreResourcePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectStoreResourcePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectStoreResourcePipe.ctorParameters;\n/** @type {?} */\nSelectStoreResourcePipe.prototype.service;\n}\n\nexport class DenormaliseStoreResourcePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} obs\n * @return {?}\n */\ntransform(\n    obs: Observable<StoreResource> | Observable<StoreResource[]>\n  ): Observable<StoreResource> | Observable<StoreResource[]> {\n    return this.service.denormaliseResource(obs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'denormaliseStoreResource' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction DenormaliseStoreResourcePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDenormaliseStoreResourcePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDenormaliseStoreResourcePipe.ctorParameters;\n/** @type {?} */\nDenormaliseStoreResourcePipe.prototype.service;\n}\n\nexport class GetDenormalisedValuePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} path\n * @param {?} storeResource\n * @return {?}\n */\ntransform(path: string, storeResource: StoreResource): any {\n    return this.service.getDenormalisedValue(path, storeResource);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'getDenormalisedValue' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction GetDenormalisedValuePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nGetDenormalisedValuePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGetDenormalisedValuePipe.ctorParameters;\n/** @type {?} */\nGetDenormalisedValuePipe.prototype.service;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import * as _ from 'lodash/index';\n\nimport {\n  HttpHeaders,\n  HttpClient,\n  HttpRequest,\n  // required for building\n  HttpHeaderResponse,\n  HttpProgressEvent,\n  HttpResponse,\n  HttpSentEvent,\n  HttpUserEvent,\n} from '@angular/common/http';\n\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/observable/throw';\n\nimport {\n  Document,\n  NgrxJsonApiConfig,\n  OperationType,\n  ResourceDefinition,\n  Query,\n  QueryParams,\n} from './interfaces';\nimport {\n  generateIncludedQueryParams,\n  generateFieldsQueryParams,\n  generateFilteringQueryParams,\n  generateSortingQueryParams,\n  generateQueryParams,\n} from './utils';\nexport class NgrxJsonApi {\npublic headers: HttpHeaders = new HttpHeaders({\n    'Content-Type': 'application/vnd.api+json',\n    Accept: 'application/vnd.api+json',\n  });\npublic requestUrl: string;\npublic definitions = this.config.resourceDefinitions;\n/**\n * @param {?} http\n * @param {?} config\n */\nconstructor(private http: HttpClient,\npublic config: NgrxJsonApiConfig) {}\n/**\n * @param {?} query\n * @param {?} operation\n * @return {?}\n */\nprivate urlBuilder(query: Query, operation: OperationType) {\n    switch (operation) {\n      case 'GET': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        } else if (query.type) {\n          return this.collectionUrlFor(query.type);\n        }\n      }\n      case 'DELETE': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        }\n      }\n      case 'PATCH': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        }\n      }\n      case 'POST': {\n        return this.collectionUrlFor(query.type);\n      }\n    }\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate collectionPathFor(type: string) {\n    // assume that type == collectionPath if not configured otherwise\n    let /** @type {?} */ definition = _.find(this.definitions, { type: type });\n    if (definition) {\n      return `${definition.collectionPath}`;\n    } else {\n      return type;\n    }\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate collectionUrlFor(type: string) {\n    let /** @type {?} */ collectionPath = this.collectionPathFor(type);\n    return `${this.config.apiUrl}/${collectionPath}`;\n  }\n/**\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nprivate resourcePathFor(type: string, id: string) {\n    let /** @type {?} */ collectionPath = this.collectionPathFor(type);\n    return `${collectionPath}/${encodeURIComponent(id)}`;\n  }\n/**\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nprivate resourceUrlFor(type: string, id: string) {\n    let /** @type {?} */ resourcePath = this.resourcePathFor(type, id);\n    return `${this.config.apiUrl}/${resourcePath}`;\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic find(query: Query) {\n    let /** @type {?} */ _generateIncludedQueryParams = generateIncludedQueryParams;\n    let /** @type {?} */ _generateFilteringQueryParams = generateFilteringQueryParams;\n    let /** @type {?} */ _generateFieldsQueryParams = generateFieldsQueryParams;\n    let /** @type {?} */ _generateSortingQueryParams = generateSortingQueryParams;\n    let /** @type {?} */ _generateQueryParams = generateQueryParams;\n\n    if (this.config.hasOwnProperty('urlBuilder')) {\n      let /** @type {?} */ urlBuilder = this.config.urlBuilder;\n\n      if (urlBuilder.generateIncludedQueryParams) {\n        _generateIncludedQueryParams = urlBuilder.generateIncludedQueryParams;\n      }\n      if (urlBuilder.generateFilteringQueryParams) {\n        _generateFilteringQueryParams = urlBuilder.generateFilteringQueryParams;\n      }\n      if (urlBuilder.generateFieldsQueryParams) {\n        _generateFieldsQueryParams = urlBuilder.generateFieldsQueryParams;\n      }\n      if (urlBuilder.generateSortingQueryParams) {\n        _generateSortingQueryParams = urlBuilder.generateSortingQueryParams;\n      }\n      if (urlBuilder.generateQueryParams) {\n        _generateQueryParams = urlBuilder.generateQueryParams;\n      }\n    }\n\n    let /** @type {?} */ queryParams = '';\n    let /** @type {?} */ includedParam = '';\n    let /** @type {?} */ filteringParams = '';\n    let /** @type {?} */ sortingParams = '';\n    let /** @type {?} */ fieldsParams = '';\n    let /** @type {?} */ offsetParams = '';\n    let /** @type {?} */ limitParams = '';\n\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (query.hasOwnProperty('params') && !_.isEmpty(query.params)) {\n      if (_.hasIn(query.params, 'include')) {\n        includedParam = _generateIncludedQueryParams(query.params.include);\n      }\n      if (_.hasIn(query.params, 'filtering')) {\n        filteringParams = _generateFilteringQueryParams(query.params.filtering);\n      }\n      if (_.hasIn(query.params, 'sorting')) {\n        sortingParams = _generateSortingQueryParams(query.params.sorting);\n      }\n      if (_.hasIn(query.params, 'fields')) {\n        fieldsParams = _generateFieldsQueryParams(query.params.fields);\n      }\n      if (_.hasIn(query.params, 'limit')) {\n        limitParams = 'page[limit]=' + query.params.limit;\n      }\n      if (_.hasIn(query.params, 'offset')) {\n        offsetParams = 'page[offset]=' + query.params.offset;\n      }\n    }\n    queryParams = _generateQueryParams(\n      includedParam,\n      filteringParams,\n      sortingParams,\n      fieldsParams,\n      offsetParams,\n      limitParams\n    );\n\n    let /** @type {?} */ requestOptions = {\n      method: 'GET',\n      url: this.urlBuilder(query, 'GET') + queryParams,\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @param {?} document\n * @return {?}\n */\npublic create(query: Query, document: Document) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (typeof document === undefined) {\n      return Observable.throw('Data not found');\n    }\n\n    let /** @type {?} */ requestOptions = {\n      method: 'POST',\n      url: this.urlBuilder(query, 'POST'),\n      body: JSON.stringify({ data: document.data }),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @param {?} document\n * @return {?}\n */\npublic update(query: Query, document: Document) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (typeof document === undefined) {\n      return Observable.throw('Data not found');\n    }\n    let /** @type {?} */ requestOptions = {\n      method: 'PATCH',\n      url: this.urlBuilder(query, 'PATCH'),\n      body: JSON.stringify({ data: document.data }),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic delete(query: Query) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    let /** @type {?} */ requestOptions = {\n      method: 'DELETE',\n      url: this.urlBuilder(query, 'DELETE'),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} requestOptions\n * @return {?}\n */\nprivate request(requestOptions: any) {\n    let /** @type {?} */ request: HttpRequest<any>;\n    let /** @type {?} */ newRequestOptions = { ...requestOptions, headers: this.headers };\n\n    if (requestOptions.method === 'GET') {\n      let { method, url, ...init } = newRequestOptions;\n      request = new HttpRequest(method, url, init);\n    } else if (requestOptions.method === 'POST') {\n      let { method, url, body, ...init } = newRequestOptions;\n      request = new HttpRequest(method, url, body, init);\n    } else if (requestOptions.method === 'PATCH') {\n      let { method, url, body, ...init } = newRequestOptions;\n      request = new HttpRequest(method, url, body, init);\n    } else if (requestOptions.method === 'DELETE') {\n      let { method, url, ...init } = newRequestOptions;\n      request = new HttpRequest(method, url, init);\n    }\n    return this.http.request(request);\n  }\n}\n\nfunction NgrxJsonApi_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApi.prototype.headers;\n/** @type {?} */\nNgrxJsonApi.prototype.requestUrl;\n/** @type {?} */\nNgrxJsonApi.prototype.definitions;\n/** @type {?} */\nNgrxJsonApi.prototype.http;\n/** @type {?} */\nNgrxJsonApi.prototype.config;\n}\n\n","import * as _ from 'lodash/index';\n\nimport { Observable } from 'rxjs/Observable';\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport'rxjs/add/observable/concat';\nimport'rxjs/add/observable/throw';\nimport'rxjs/add/operator/combineLatest';\nimport'rxjs/add/operator/concat';\nimport'rxjs/add/operator/concatMap';\nimport'rxjs/add/operator/distinctUntilChanged';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/let';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/observable/zip';\n\nimport { Store } from '@ngrx/store';\n\nimport {\n  NgrxJsonApiConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  NgrxJsonApiStoreResources,\n  NgrxJsonApiStoreQueries,\n  Resource,\n  ResourceIdentifier,\n  ResourceError,\n  Query,\n  StoreResource,\n  ManyQueryResult,\n  OneQueryResult,\n  StoreQuery,\n} from './interfaces';\nimport {\n  filterResources,\n  denormaliseStoreResource,\n  denormaliseStoreResources,\n} from './utils';\nexport class NgrxJsonApiSelectors<T> {\n/**\n * @param {?} config\n */\nconstructor(public config: NgrxJsonApiConfig) {}\n/**\n * @return {?}\n */\npublic getNgrxJsonApiStore$() {\n    return (state$: Store<any>) => {\n      return state$.select('NgrxJsonApi').select('api');\n    };\n  }\n/**\n * @return {?}\n */\npublic getStoreData$() {\n    return (state$: Store<NgrxJsonApiStore>) => {\n      return state$.select('data');\n    };\n  }\n/**\n * @param {?} type\n * @return {?}\n */\npublic getStoreResourceOfType$(type: string) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreData$())\n        .map(resources => (resources ? resources[type] : undefined));\n    };\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic queryStore$(query: Query) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      let /** @type {?} */ selected$: Observable<any>;\n      if (!query.type) {\n        return state$.map(() => Observable.throw('Unknown query'));\n      } else if (query.type && query.id) {\n        selected$ = state$.let(\n          this.getStoreResource$({ type: query.type, id: query.id })\n        );\n      } else {\n        selected$ = state$\n          .let(this.getStoreResourceOfType$(query.type))\n          .combineLatest(\n            state$.let(this.getStoreData$()),\n            (\n              resources: NgrxJsonApiStoreResources,\n              storeData: NgrxJsonApiStoreData\n            ) =>\n              filterResources(\n                resources,\n                storeData,\n                query,\n                this.config.resourceDefinitions,\n                this.config.filteringConfig\n              )\n          );\n      }\n      return selected$.distinctUntilChanged();\n    };\n  }\n/**\n * @return {?}\n */\npublic getStoreQueries$() {\n    return (state$: Store<NgrxJsonApiStore>) => {\n      return state$.select('queries');\n    };\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic getResourceQuery$(queryId: string) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreQueries$())\n        .map(it => (it ? it[queryId] : undefined));\n    };\n  }\n/**\n * @param {?} identifier\n * @return {?}\n */\npublic getStoreResource$(identifier: ResourceIdentifier) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreResourceOfType$(identifier.type))\n        .map(\n          resources => /** @type {?} */((\n            (resources ? resources[identifier.id] : undefined) as StoreResource))\n        );\n    };\n  }\n/**\n * @param {?} queryId\n * @param {?} denormalize\n * @return {?}\n */\npublic getManyResults$(queryId: string, denormalize: boolean) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$.map(state => {\n        let /** @type {?} */ storeQuery = state.queries[queryId];\n        if (!storeQuery) {\n          return undefined;\n        }\n\n        if (_.isEmpty(storeQuery.resultIds)) {\n          let /** @type {?} */ queryResult: ManyQueryResult = {\n            ...storeQuery,\n            data: _.isUndefined(storeQuery.resultIds) ? undefined : [],\n          };\n          return queryResult;\n        } else {\n          let /** @type {?} */ results = storeQuery.resultIds.map(\n            id => (state.data[id.type] ? state.data[id.type][id.id] : undefined)\n          );\n          if (denormalize) {\n            results = denormaliseStoreResources(results, state.data);\n          }\n          return {\n            ...storeQuery,\n            data: /** @type {?} */(( results as Array<StoreResource>)),\n          };\n        }\n      });\n    };\n  }\n/**\n * @param {?} queryId\n * @param {?} denormalize\n * @return {?}\n */\npublic getOneResult$(queryId: string, denormalize: boolean) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$.map(state => {\n        let /** @type {?} */ storeQuery = state.queries[queryId];\n        if (!storeQuery) {\n          return undefined;\n        }\n\n        if (_.isEmpty(storeQuery.resultIds)) {\n          let /** @type {?} */ queryResult: ManyQueryResult = {\n            ...storeQuery,\n            data: _.isUndefined(storeQuery.resultIds) ? undefined : null,\n          };\n          return queryResult;\n        } else {\n          if (storeQuery.resultIds.length >= 2) {\n            throw new Error(\n              'expected single result for query ' + storeQuery.query.queryId\n            );\n          }\n\n          let /** @type {?} */ resultId = storeQuery.resultIds[0];\n          let /** @type {?} */ result = state.data[resultId.type]\n            ? state.data[resultId.type][resultId.id]\n            : undefined;\n          if (denormalize) {\n            result = denormaliseStoreResource(result, state.data);\n          }\n          return {\n            ...storeQuery,\n            data: result,\n          };\n        }\n      });\n    };\n  }\n/**\n * @param {?} store\n * @param {?} identifier\n * @return {?}\n */\npublic getPersistedResource$(\n    store: Store<T>,\n    identifier: ResourceIdentifier\n  ) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreResource$(identifier))\n        .map(it => (it ? it.persistedResource : undefined));\n    };\n  }\n}\n\nfunction NgrxJsonApiSelectors_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiSelectors.prototype.config;\n}\n\n","import { Injectable, OnDestroy } from '@angular/core';\n\nimport * as _ from 'lodash/index';\n\nimport { Action, Store } from '@ngrx/store';\nimport { Effect, Actions, toPayload } from '@ngrx/effects';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/concatAll';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/mapTo';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/switchMapTo';\nimport'rxjs/add/operator/take';\nimport'rxjs/add/operator/toArray';\nimport'rxjs/add/operator/withLatestFrom';\n\nimport {\n  ApiGetInitAction,\n  ApiApplyFailAction,\n  ApiApplySuccessAction,\n  ApiPostFailAction,\n  ApiPostSuccessAction,\n  ApiDeleteFailAction,\n  ApiDeleteSuccessAction,\n  ApiGetFailAction,\n  ApiGetSuccessAction,\n  ApiPatchFailAction,\n  ApiPatchSuccessAction,\n  NgrxJsonApiActionTypes,\n  LocalQuerySuccessAction,\n  LocalQueryFailAction,\n  ApiQueryRefreshAction,\n} from './actions';\nimport { NgrxJsonApi } from './api';\nimport { NgrxJsonApiSelectors } from './selectors';\nimport {\n  NgrxJsonApiStore,\n  OperationType,\n  Payload,\n  Resource,\n  ResourceError,\n  ResourceIdentifier,\n  Query,\n  ResourceState,\n  StoreResource,\n} from './interfaces';\nimport {\n  sortPendingChanges,\n  generatePayload,\n  getPendingChanges,\n} from './utils';\nexport class NgrxJsonApiEffects implements OnDestroy {\n  \n  createResource$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_POST_INIT)\n    .map<Action, Resource>(toPayload)\n    .map<Resource, Payload>(it => this.generatePayload(it, 'POST'))\n    .mergeMap((payload: Payload) => {\n      return this.jsonApi\n        .create(payload.query, payload.jsonApiData)\n        .mapTo(new ApiPostSuccessAction(payload))\n        .catch(error =>\n          Observable.of(\n            new ApiPostFailAction(this.toErrorPayload(payload.query, error))\n          )\n        );\n    });\n\n  \n  updateResource$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_PATCH_INIT)\n    .map<Action, Resource>(toPayload)\n    .map<Resource, Payload>(it => this.generatePayload(it, 'PATCH'))\n    .mergeMap((payload: Payload) => {\n      return this.jsonApi\n        .update(payload.query, payload.jsonApiData)\n        .mapTo(new ApiPatchSuccessAction(payload))\n        .catch(error =>\n          Observable.of(\n            new ApiPatchFailAction(this.toErrorPayload(payload.query, error))\n          )\n        );\n    });\n\n  \n  readResource$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_GET_INIT)\n    .map<Action, Query>(toPayload)\n    .mergeMap((query: Query) => {\n      return this.jsonApi\n        .find(query)\n        .map(\n          data =>\n            new ApiGetSuccessAction({\n              jsonApiData: data,\n              query: query,\n            })\n        )\n        .catch(error =>\n          Observable.of(new ApiGetFailAction(this.toErrorPayload(query, error)))\n        );\n    });\n\n  \n  queryStore$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.LOCAL_QUERY_INIT)\n    .map<Action, Query>(toPayload)\n    .mergeMap((query: Query) => {\n      return this.store\n        .let(this.selectors.getNgrxJsonApiStore$())\n        .let(this.selectors.queryStore$(query))\n        .map(\n          results =>\n            new LocalQuerySuccessAction({\n              jsonApiData: { data: results },\n              query: query,\n            })\n        )\n        .catch(error =>\n          Observable.of(\n            new LocalQueryFailAction(this.toErrorPayload(query, error))\n          )\n        );\n    });\n\n  \n  deleteResource$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_DELETE_INIT)\n    .map<Action, ResourceIdentifier>(toPayload)\n    .map<ResourceIdentifier, Payload>(it => this.generatePayload(it, 'DELETE'))\n    .mergeMap((payload: Payload) => {\n      return this.jsonApi\n        .delete(payload.query)\n        .map(\n          data =>\n            new ApiDeleteSuccessAction({\n              jsonApiData: data,\n              query: payload.query,\n            })\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiDeleteFailAction(this.toErrorPayload(payload.query, error))\n          )\n        );\n    });\n\n  \n  triggerReadOnQueryRefresh$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_QUERY_REFRESH)\n    .withLatestFrom(this.store, (action: any, store) => {\n      let /** @type {?} */ queryId = action.payload;\n      let /** @type {?} */ state = /** @type {?} */(( store['NgrxJsonApi']['api'] as NgrxJsonApiStore));\n      let /** @type {?} */ query = state.queries[queryId].query;\n      return new ApiGetInitAction(query);\n    });\n\n  \n  refreshQueriesOnDelete$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_DELETE_SUCCESS)\n    .withLatestFrom(this.store, (action: any, store) => {\n      let /** @type {?} */ id = { id: action.payload.query.id, type: action.payload.query.type };\n      if (!id.id || !id.type) {\n        throw new Error(\n          'API_DELETE_SUCCESS did not carry resource id and type information'\n        );\n      }\n\n      let /** @type {?} */ state = /** @type {?} */(( store['NgrxJsonApi']['api'] as NgrxJsonApiStore));\n\n      let /** @type {?} */ actions = [];\n      for (let /** @type {?} */ queryId in state.queries) {\n        if (state.queries.hasOwnProperty(queryId)) {\n          let /** @type {?} */ query = state.queries[queryId];\n          if (query.resultIds) {\n            let /** @type {?} */ needsRefresh =\n              _.findIndex(query.resultIds, function(o) {\n                return _.isEqual(id, o);\n              }) !== -1;\n\n            let /** @type {?} */ sameIdRequested =\n              query.query.id === id.id && query.query.type === id.type;\n            if (sameIdRequested && (needsRefresh || _.isEmpty(query.errors))) {\n              throw new Error(\n                'store is in invalid state, queries for deleted' +\n                  ' resource should have been emptied and marked with 404 error'\n              );\n            }\n\n            if (needsRefresh) {\n              actions.push(new ApiQueryRefreshAction(queryId));\n            }\n          }\n        }\n      }\n      return actions;\n    })\n    .flatMap(actions => Observable.of(...actions));\n\n  \n  applyResources$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_APPLY_INIT)\n    .mergeMap(() =>\n      this.store.let(this.selectors.getNgrxJsonApiStore$()).take(1)\n    )\n    .mergeMap((ngrxstore: NgrxJsonApiStore) => {\n      let /** @type {?} */ pending: Array<StoreResource> = getPendingChanges(ngrxstore);\n      if (pending.length > 0) {\n        pending = sortPendingChanges(pending);\n\n        let /** @type {?} */ actions: Array<Observable<Action>> = [];\n        for (let /** @type {?} */ pendingChange of pending) {\n          if (pendingChange.state === 'CREATED') {\n            let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'POST');\n            actions.push(\n              this.jsonApi\n                .create(payload.query, payload.jsonApiData)\n                .mapTo(new ApiPostSuccessAction(payload))\n                .catch(error =>\n                  Observable.of(\n                    new ApiPostFailAction(\n                      this.toErrorPayload(payload.query, error)\n                    )\n                  )\n                )\n            );\n          } else if (pendingChange.state === 'UPDATED') {\n            // prepare payload, omit links and meta information\n            let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'PATCH');\n            actions.push(\n              this.jsonApi\n                .update(payload.query, payload.jsonApiData)\n                .map(\n                  data =>\n                    new ApiPatchSuccessAction({\n                      jsonApiData: data,\n                      query: payload.query,\n                    })\n                )\n                .catch(error =>\n                  Observable.of(\n                    new ApiPatchFailAction(\n                      this.toErrorPayload(payload.query, error)\n                    )\n                  )\n                )\n            );\n          } else if (pendingChange.state === 'DELETED') {\n            let /** @type {?} */ payload: Payload = this.generatePayload(\n              pendingChange,\n              'DELETE'\n            );\n            actions.push(\n              this.jsonApi\n                .delete(payload.query)\n                .map(\n                  data =>\n                    new ApiDeleteSuccessAction({\n                      jsonApiData: data,\n                      query: payload.query,\n                    })\n                )\n                .catch(error =>\n                  Observable.of(\n                    new ApiDeleteFailAction(\n                      this.toErrorPayload(payload.query, error)\n                    )\n                  )\n                )\n            );\n          } else {\n            throw new Error('unknown state ' + pendingChange.state);\n          }\n        }\n\n        return Observable.of(...actions)\n          .concatAll()\n          .toArray()\n          .map(actions => this.toApplyAction(actions));\n      } else {\n        return Observable.of(new ApiApplySuccessAction([]));\n      }\n    });\n/**\n * @param {?} actions$\n * @param {?} jsonApi\n * @param {?} store\n * @param {?} selectors\n */\nconstructor(\nprivate actions$: Actions,\nprivate jsonApi: NgrxJsonApi,\nprivate store: Store<any>,\nprivate selectors: NgrxJsonApiSelectors<any>\n  ) {}\n/**\n * @return {?}\n */\nngOnDestroy() {}\n/**\n * @param {?} actions\n * @return {?}\n */\nprivate toApplyAction(actions: Array<Action>): any {\n    for (let /** @type {?} */ action of actions) {\n      if (\n        action.type === NgrxJsonApiActionTypes.API_POST_FAIL ||\n        action.type === NgrxJsonApiActionTypes.API_PATCH_FAIL ||\n        action.type === NgrxJsonApiActionTypes.API_DELETE_FAIL\n      ) {\n        return new ApiApplyFailAction(actions);\n      }\n    }\n    return new ApiApplySuccessAction(actions);\n  }\n/**\n * @param {?} query\n * @param {?} response\n * @return {?}\n */\nprivate toErrorPayload(query: Query, response: any): Payload {\n    let /** @type {?} */ contentType = null;\n    if (response && response.headers) {\n      contentType = response.headers.get('Content-Type');\n    }\n    let /** @type {?} */ document = null;\n    if (contentType === 'application/vnd.api+json') {\n      document = response.json();\n    }\n    if (document && document.errors && document.errors.length > 0) {\n      return {\n        query: query,\n        jsonApiData: document,\n      };\n    } else {\n      // transform http to json api error\n      let /** @type {?} */ errors: Array<ResourceError> = [];\n      let /** @type {?} */ error: ResourceError = {\n        status: String(response.status),\n        code: response.statusText,\n      };\n\n      errors.push(error);\n      // got json api errors\n\n      return {\n        query: query,\n        jsonApiData: {\n          errors: errors,\n        },\n      };\n    }\n  }\n/**\n * @param {?} resource\n * @param {?} operation\n * @return {?}\n */\nprivate generatePayload(\n    resource: Resource,\n    operation: OperationType\n  ): Payload {\n    return generatePayload(resource, operation);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Actions, },\n{type: NgrxJsonApi, },\n{type: Store, },\n{type: NgrxJsonApiSelectors, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'createResource$': [{ type: Effect },],\n'updateResource$': [{ type: Effect },],\n'readResource$': [{ type: Effect },],\n'queryStore$': [{ type: Effect },],\n'deleteResource$': [{ type: Effect },],\n'triggerReadOnQueryRefresh$': [{ type: Effect },],\n'refreshQueriesOnDelete$': [{ type: Effect },],\n'applyResources$': [{ type: Effect },],\n};\n}\n\nfunction NgrxJsonApiEffects_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiEffects.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgrxJsonApiEffects.ctorParameters;\n/** @type {?} */\nNgrxJsonApiEffects.propDecorators;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.createResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.updateResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.readResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.queryStore$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.deleteResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.triggerReadOnQueryRefresh$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.refreshQueriesOnDelete$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.applyResources$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.actions$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.jsonApi;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.store;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.selectors;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}