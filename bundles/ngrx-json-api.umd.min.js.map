{"version":3,"sources":["../../src/utils.ts","../../src/selectors.ts","../../src/reducers.ts","../../src/module.ts","../../src/interfaces.ts","../../src/actions.ts","../../src/services.ts","../../src/pipes.ts","../../src/api.ts","../../src/effects.ts"],"names":["setIn","state","path","value","_.get","_.setWith","_.clone","nsValue","key","nsObject","newObject","rollbackResource","newState","type","id","storeResource","persistedResource","__assign","resource","collectPendingChange","pending","include","includeNew","push","_i","include_1","length","includeElement","relationshipName_1","relationships","data","relationInclude_1","filter","relIncludeElem","forEach","slice","_.isArray","relationId","getPendingChanges","ids","_.isUndefined","Object","keys","relationshipInclusions","include_2","split","_a","ids_1","_.uniqBy","e","selectNgrxJson","state$","select","map","it","selectNgrxJsonApiDefaultZone","selectNgrxJsonApiZone","NGRX_JSON_API_DEFAULT_ZONE","zoneId","let","zones","getNgrxJsonApiZone","selectStoreQuery","queryId","queries","selectStoreResourcesOfType","undefined","selectStoreResource","identifier","resources","selectManyQueryResult","denormalize","storeQuery","_.isEmpty","resultIds","results","denormaliseStoreResources","selectOneQueryResult","queryResult","Error","query","resultId","result","denormaliseStoreResource","getNgrxJsonApiStore","NgrxJsonApiStoreReducer","action","initialNgrxJsonApiState","zone","initialNgrxJsonApiZone","newZone","NgrxJsonApiZoneReducer","NgrxJsonApiActionTypes","API_POST_INIT","updatedData","updateStoreDataFromResource","payload","isCreating","API_GET_INIT","updateQueryParams","isReading","API_PATCH_INIT","isUpdating","API_DELETE_INIT","updateResourceState","isDeleting","API_POST_SUCCESS","updateStoreDataFromPayload","jsonApiData","API_GET_SUCCESS","updateQueryResults","API_PATCH_SUCCESS","API_DELETE_SUCCESS","deleteStoreResources","updateQueriesForDeletedResource","API_QUERY_REFRESH","clearQueryResult","API_POST_FAIL","updateResourceErrorsForQuery","API_GET_FAIL","updateQueryErrors","API_PATCH_FAIL","API_DELETE_FAIL","REMOVE_QUERY","removeQuery","LOCAL_QUERY_INIT","MODIFY_STORE_RESOURCE_ERRORS","updateResourceErrors","resourceId","errors","modificationType","LOCAL_QUERY_SUCCESS","PATCH_STORE_RESOURCE","POST_STORE_RESOURCE","NEW_STORE_RESOURCE","DELETE_STORE_RESOURCE","removeStoreResource","API_APPLY_INIT","pending_1","isApplying","pending_2","pendingChange","API_APPLY_SUCCESS","API_APPLY_FAIL","actions","actions_1","API_ROLLBACK","rollbackStoreResources","CLEAR_STORE","COMPACT_STORE","compactStore","apiFactory","http","config","NgrxJsonApi","selectorsFactory","NgrxJsonApiSelectors","serviceFactory","store","NgrxJsonApiService","configure","provide","useFactory","deps","HttpClient","NGRX_JSON_API_CONFIG","Store","useValue","Direction","ASC","DESC","denormaliseObject","storeData","bag","denormalised","hasOwnProperty","relation","relationDenorm","_.isEqual","_.isPlainObject","relatedRS","getSingleStoreResource","relatedRSs","getMultipleStoreResource","r","relationDenormPath","_.set","items","items_1","item","_.cloneDeep","resourceIds","getDenormalisedPath","baseResourceType","resourceDefinitions","pathSeparator","denormPath","fields","currentResourceType","i","definition","_.find","attributes","resourceRelation","relationType","join","getDenormalisedValue","denormalisedPath","updateResourceObject","original","source","customizer","objValue","srcValue","_.mergeWith","insertStoreResource","storeResources","fromServer","newStoreResources","loading","resourceState","newState_1","isEqualResource","resource0","resource1","meta","links","updateStoreResource","newResource","newResourceState","foundStoreResource","mergedResource","deletedId","queryState","notFoundError","code","status","document","Array","apply","currentErrors","_b","_c","currentErrors_1","currentError","modifiedResources","modifiedResources_1","modifiedResource","_.omit","newQuery","override","newStoreData","updatedStoreResources","included","concat","_.reduce","storeQueries","newStoreQuery","newStoreQueries","newQueryStore","toResourceIdentifier","getResourceFieldValueFromPath","baseStoreResource","currentStoreResource","relatedPath","filterResources","filteringConfig","_.filter","params","filtering","every","element","filteringOperators","resourceFieldValue","operator","name","comparison","_.isString","toLowerCase","_.includes","_.startsWith","_.endsWith","generateIncludedQueryParams","generateFieldsQueryParams","generateFilteringQueryParams","f","encodeURIComponent","generateSortingQueryParams","sorting","direction","api","generateQueryParams","arguments","newParams","p","generatePayload","operation","hasTemporaryId","uuid","lut","toString","d0","Math","random","d1","d2","d3","toKey","collectQueryResults","usedResources","queryName","collectPendingChanges","collectReferencesForResource","hasChanges","relationshipName","dependencyIds","dependencyIds_1","dependencyId","dependencyKey","collectReferences","sweepUnusedResources","hasDeletions","sortPendingChanges","pendingResources","dependencies","pendingMap","pendingResources_1","pendingResource","pendingResources_2","key_1","dependencyIds_2","context","cursor","sorted","visited","visitPending","predecessors","indexOf","JSON","stringify","outgoing","preds","outgoing_1","child","prototype","getNgrxJsonApiStore$","getStoreData$","getStoreResourceOfType$","_this","this","getStoreQueries$","getResourceQuery$","getStoreResource$","getManyResults$","getOneResult$","getPersistedResource$","LOCAL_QUERY_FAIL","NgrxJsonApiAction","ApiApplyInitAction","_super","call","__extends","ApiApplySuccessAction","ApiApplyFailAction","ApiPostInitAction","ApiPostSuccessAction","ApiPostFailAction","ApiDeleteInitAction","ApiDeleteSuccessAction","ApiDeleteFailAction","ApiGetInitAction","ApiGetSuccessAction","ApiGetFailAction","ApiRollbackAction","ApiPatchInitAction","ApiPatchSuccessAction","ApiPatchFailAction","DeleteStoreResourceAction","PatchStoreResourceAction","NewStoreResourceAction","PostStoreResourceAction","RemoveQueryAction","LocalQueryInitAction","LocalQuerySuccessAction","LocalQueryFailAction","CompactStoreAction","ClearStoreAction","ApiQueryRefreshAction","ModifyStoreResourceErrorsAction","NgrxJsonApiZoneService","putQuery","options","dispatch","refreshQuery","selectManyResults","selectOneResults","patchResource","toRemote","postResource","deleteResource","clear","compact","addResourceErrors","removeResourceErrors","setResourceErrors","test","getDefaultZone","getZone","findOne","findInternal","findMany","defineProperty","get","_storeSnapshot","subscribe","multi","denormalise","queryResult$","finally","getPersistedResourceSnapshot","snapshot","storeSnapshot","getResourceSnapshot","denormaliseResource","storeResource$","combineLatest","resourceType","SelectStoreResourcePipe","service","transform","decorators","Pipe","args","ctorParameters","DenormaliseStoreResourcePipe","obs","GetDenormalisedValuePipe","headers","HttpHeaders","Content-Type","Accept","definitions","urlBuilder","resourceUrlFor","collectionUrlFor","collectionPathFor","collectionPath","apiUrl","resourcePathFor","resourcePath","find","_generateIncludedQueryParams","_generateFilteringQueryParams","_generateFieldsQueryParams","_generateSortingQueryParams","_generateQueryParams","queryParams","includedParam","filteringParams","sortingParams","fieldsParams","offsetParams","limitParams","Observable","throw","_.hasIn","limit","offset","requestOptions","method","url","request","create","body","update","delete","newRequestOptions","observe","init","__rest","post","patch","NgrxJsonApiEffects","actions$","jsonApi","createResource$","ofType","mergeMap","response","catch","error","of","toErrorPayload","updateResource$","readResource$","queryStore$","executeLocalQuery","takeUntil","localQueryInitEventFor","removeQueryEventFor","deleteResource$","triggerReadOnQueryRefresh$","withLatestFrom","refreshQueriesOnDelete$","needsRefresh","_.findIndex","o","sameIdRequested","flatMap","applyResources$","applyEnabled","storeState","ngrxstore","sortedPending","sortedPending_1","handlePendingCreate","handlePendingUpdate","handlePendingDelete","concatAll","toArray","toApplyAction","selected$","distinctUntilChanged","ngOnDestroy","contentType","startsWith","String","statusText","Injectable","Actions","__decorate","Effect","__metadata","reducer","InjectionToken","NgrxJsonApiModule","ngModule","providers","NgModule","declarations","imports","EffectsModule","forFeature","StoreModule","exports"],"mappings":"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","file":"./dist/bundles/ngrx-json-api.umd.min.js","sourcesContent":["import * as _ from 'lodash/index';\n\nimport { Actions } from '@ngrx/effects';\n\nimport {\n  Direction,\n  Document,\n  FilteringOperator,\n  FilteringParam,\n  NgrxJsonApiFilteringConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  NgrxJsonApiStoreResources,\n  NgrxJsonApiStoreQueries,\n  OperationType,\n  Payload,\n  Query,\n  Resource,\n  ResourceDefinition,\n  ResourceIdentifier,\n  ResourceError,\n  ResourceState,\n  StoreQuery,\n  SortingParam,\n  StoreResource,\n  ErrorModificationType,\n} from './interfaces';\n/**\n * @param {?} state\n * @param {?} path\n * @param {?} value\n * @return {?}\n */\nexport function setIn(state: any, path:string, value: any){\n  let /** @type {?} */ currentValue = _.get(state, path);\n  if(value === currentValue){\n    return state;\n  }\n  return _.setWith(_.clone(state), path, value, (nsValue: any, key: string, nsObject: any) => {\n    const /** @type {?} */ newObject = _.clone(nsObject);\n    newObject[key] = nsValue;\n    return newObject;\n  });\n}\n\nexport const /** @type {?} */ denormaliseObject = (\n  resource: Resource,\n  storeData: NgrxJsonApiStoreData,\n  bag: NgrxJsonApiStoreData\n): any => {\n  // this function MUST MUTATE resource\n  let /** @type {?} */ denormalised = resource;\n\n  if (resource.hasOwnProperty('relationships')) {\n    Object.keys(resource.relationships).forEach(relation => {\n      resource.relationships[relation]['reference'] = /** @type {?} */(( {} as Resource));\n      let /** @type {?} */ data: ResourceIdentifier | Array<ResourceIdentifier> =\n        resource.relationships[relation].data;\n      // denormalised relation\n      let /** @type {?} */ relationDenorm;\n\n      if (data === null || _.isEqual(data, [])) {\n        relationDenorm = data;\n      } else if (_.isPlainObject(data)) {\n        // hasOne relation\n        let /** @type {?} */ relatedRS = getSingleStoreResource( /** @type {?} */((\n          <ResourceIdentifier>data)),\n          storeData\n        );\n        relationDenorm = denormaliseStoreResource(relatedRS, storeData, bag);\n      } else if (_.isArray(data)) {\n        // hasMany relation\n        let /** @type {?} */ relatedRSs: Array<StoreResource> = getMultipleStoreResource( /** @type {?} */((\n          <ResourceIdentifier[]>data)),\n          storeData\n        );\n        relationDenorm = relatedRSs.map(r =>\n          denormaliseStoreResource(r, storeData, bag)\n        );\n      }\n      let /** @type {?} */ relationDenormPath = 'relationships.' + relation + '.reference';\n      denormalised = /** @type {?} */(( <Resource>_.set(\n        denormalised,\n        relationDenormPath,\n        relationDenorm\n      )));\n    });\n  }\n\n  return denormalised;\n};\n\nexport const /** @type {?} */ denormaliseStoreResources = (\n  items: Array<StoreResource>,\n  storeData: NgrxJsonApiStoreData,\n  bag: any = {}\n): Array<StoreResource> => {\n  let /** @type {?} */ results: Array<StoreResource> = [];\n  for (let /** @type {?} */ item of items) {\n    results.push(denormaliseStoreResource(item, storeData, bag));\n  }\n  return results;\n};\n\nexport const /** @type {?} */ denormaliseStoreResource = (\n  item: StoreResource,\n  storeData: NgrxJsonApiStoreData,\n  bag: any = {}\n): any => {\n  if (!item) {\n    return null;\n  }\n  let /** @type {?} */ storeResource = _.cloneDeep( /** @type {?} */((<StoreResource>item)));\n\n  if (_.isUndefined(bag[storeResource.type])) {\n    bag[storeResource.type] = {};\n  }\n  if (_.isUndefined(bag[storeResource.type][storeResource.id])) {\n    bag[storeResource.type][storeResource.id] = storeResource;\n    storeResource = denormaliseObject(storeResource, storeData, bag);\n    if (storeResource.persistedResource) {\n      storeResource.persistedResource = denormaliseObject(\n        storeResource.persistedResource,\n        storeData,\n        bag\n      );\n    }\n  }\n\n  return bag[storeResource.type][storeResource.id];\n};\n\nexport const /** @type {?} */ getSingleStoreResource = (\n  resourceId: ResourceIdentifier,\n  storeData: NgrxJsonApiStoreData\n): StoreResource => {\n  return _.get(storeData, [resourceId.type, resourceId.id], null);\n};\n\nexport const /** @type {?} */ getMultipleStoreResource = (\n  resourceIds: Array<ResourceIdentifier>,\n  resources: NgrxJsonApiStoreData\n): Array<StoreResource> => {\n  return resourceIds.map(id => getSingleStoreResource(id, resources));\n};\n\nexport const /** @type {?} */ getDenormalisedPath = (\n  path: string,\n  baseResourceType: string,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n): string => {\n  let /** @type {?} */ denormPath: string[] = [];\n  if (_.isUndefined(pathSeparator)) {\n    pathSeparator = '.';\n  }\n  let /** @type {?} */ fields: Array<string> = path.split(pathSeparator);\n  let /** @type {?} */ currentResourceType = baseResourceType;\n  for (let /** @type {?} */ i = 0; i < fields.length; i++) {\n    let /** @type {?} */ definition = _.find(resourceDefinitions, { type: currentResourceType });\n\n    if (_.isUndefined(definition)) {\n      throw new Error('Definition not found');\n    }\n    // if both attributes and relationships are missing, raise an error\n    if (\n      _.isUndefined(definition.attributes) &&\n      _.isUndefined(definition.relationships)\n    ) {\n      throw new Error('Attributes or Relationships must be provided');\n    }\n\n    if (definition.attributes.hasOwnProperty(fields[i])) {\n      denormPath.push('attributes', fields[i]);\n      break;\n    } else if (definition.relationships.hasOwnProperty(fields[i])) {\n      let /** @type {?} */ resourceRelation = definition.relationships[fields[i]];\n      if (resourceRelation.relationType === 'hasMany') {\n        if (i !== fields.length - 1) {\n          throw new Error('Cannot filter past a hasMany relation');\n        } else {\n          denormPath.push('relationships', fields[i], 'reference');\n        }\n      } else {\n        currentResourceType = resourceRelation.type;\n        denormPath.push('relationships', fields[i], 'reference');\n      }\n    } else {\n      throw new Error('Cannot find field in attributes or relationships');\n    }\n  }\n  return denormPath.join(pathSeparator);\n};\n\nexport const /** @type {?} */ getDenormalisedValue = (\n  path: string,\n  storeResource: StoreResource,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n) => {\n  let /** @type {?} */ denormalisedPath = getDenormalisedPath(\n    path,\n    storeResource.type,\n    resourceDefinitions,\n    pathSeparator\n  );\n  return _.get(storeResource, denormalisedPath);\n};\n/**\n * Given two objects, it will merge the second in the first.\n * \n */\nexport const updateResourceObject = (\n  original: Resource,\n  source: Resource\n): Resource => {\n  // by default arrays would make use of concat.\n  function customizer(objValue: any, srcValue: any) {\n    if (_.isArray(objValue)) {\n      return srcValue;\n    }\n  }\n\n  return _.mergeWith({}, original, source, customizer);\n};\n/**\n * Insert a StoreResource given the Resource and the StoreResources\n * \n */\nexport const insertStoreResource = (\n  storeResources: NgrxJsonApiStoreResources,\n  resource: Resource,\n  fromServer: boolean\n): NgrxJsonApiStoreResources => {\n  let newStoreResources = { ...storeResources };\n  if (fromServer) {\n    newStoreResources[resource.id] = {\n      ...resource,\n      persistedResource: resource,\n      state: 'IN_SYNC',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n  } else {\n    newStoreResources[resource.id] = {\n      ...resource,\n      persistedResource: null,\n      state: 'CREATED',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n  }\n  return _.isEqual(storeResources, newStoreResources)\n    ? storeResources\n    : newStoreResources;\n};\n/**\n * Removes a StoreResource given the Resource and the StoreResources\n * \n */\nexport const removeStoreResource = (\n  storeData: NgrxJsonApiStoreData,\n  resourceId: ResourceIdentifier\n): NgrxJsonApiStoreData => {\n  if (storeData[resourceId.type][resourceId.id]) {\n    let newState: NgrxJsonApiStoreData = { ...storeData };\n    newState[resourceId.type] = { ...newState[resourceId.type] };\n    delete newState[resourceId.type][resourceId.id];\n    return newState;\n  }\n  return storeData;\n};\n/**\n * Updates the state of a StoreResource in the store.\n * \n * @param storeData\n * @param resourceId\n * @param resourceState\n * @param loading\n * @return\n */\nexport const updateResourceState = (\n  storeData: NgrxJsonApiStoreData,\n  resourceId: ResourceIdentifier,\n  resourceState?: ResourceState,\n  loading?: OperationType\n): NgrxJsonApiStoreData => {\n  if (\n    _.isUndefined(storeData[resourceId.type]) ||\n    _.isUndefined(storeData[resourceId.type][resourceId.id])\n  ) {\n    if (resourceState === 'DELETED') {\n      let newState: NgrxJsonApiStoreData = { ...storeData };\n      newState[resourceId.type] = { ...newState[resourceId.type] };\n      newState[resourceId.type][resourceId.id] = {\n        ...newState[resourceId.type][resourceId.id],\n      };\n      newState[resourceId.type][resourceId.id] = {\n        type: resourceId.type,\n        id: resourceId.id,\n        persistedResource: null,\n      } as StoreResource;\n      newState[resourceId.type][resourceId.id].state = 'NOT_LOADED';\n      return newState;\n    } else {\n      return storeData;\n    }\n  }\n  let newState: NgrxJsonApiStoreData = { ...storeData };\n  newState[resourceId.type] = { ...newState[resourceId.type] };\n  newState[resourceId.type][resourceId.id] = {\n    ...newState[resourceId.type][resourceId.id],\n  };\n  if (resourceState !== null) {\n    newState[resourceId.type][resourceId.id].state = resourceState;\n  }\n  if (loading != null) {\n    newState[resourceId.type][resourceId.id].loading = loading;\n  }\n  return newState;\n};\n/**\n * Check equality of resource and ignore additional contents used by the\n * store (state, persistedResource, etc.)\n * @param resource0\n * @param resource1\n * @return\n */\nexport const isEqualResource = (\n  resource0: Resource,\n  resource1: Resource\n): boolean => {\n  if (resource0 === resource1) {\n    return true;\n  }\n  if (resource0 !== null !== (resource1 !== null)) {\n    return false;\n  }\n\n  return (\n    _.isEqual(resource0.id, resource1.id) &&\n    _.isEqual(resource0.type, resource1.type) &&\n    _.isEqual(resource0.attributes, resource1.attributes) &&\n    _.isEqual(resource0.meta, resource1.meta) &&\n    _.isEqual(resource0.links, resource1.links) &&\n    _.isEqual(resource0.relationships, resource1.relationships)\n  );\n};\n\nexport const /** @type {?} */ updateStoreResource = (\n  state: NgrxJsonApiStoreResources,\n  resource: Resource,\n  fromServer: boolean\n): NgrxJsonApiStoreResources => {\n  let /** @type {?} */ foundStoreResource = state[resource.id];\n  let /** @type {?} */ persistedResource = state[resource.id].persistedResource;\n\n  let /** @type {?} */ newResource: Resource;\n  let /** @type {?} */ newResourceState: ResourceState;\n  if (fromServer) {\n    // form server, override everything\n    // TODO need to handle check and keep local updates?\n    newResource = resource;\n    persistedResource = resource;\n    newResourceState = 'IN_SYNC';\n  } else {\n    let /** @type {?} */ mergedResource = updateResourceObject(foundStoreResource, resource);\n    if (isEqualResource(mergedResource, persistedResource)) {\n      // no changes anymore, do nothing\n      newResource = persistedResource;\n      newResourceState = 'IN_SYNC';\n    } else {\n      // merge changes and mark as CREATED or UPDATED depending on whether\n      // an original version is available\n      newResource = mergedResource;\n      if (persistedResource !== null) {\n        newResourceState = 'UPDATED';\n      } else if (foundStoreResource.state === 'NEW') {\n        newResourceState = 'NEW';\n      } else {\n        newResourceState = 'CREATED';\n      }\n    }\n  }\n\n  let /** @type {?} */ newState = { ...state };\n  newState[resource.id] = /** @type {?} */(( {\n    ...newResource,\n    persistedResource: persistedResource,\n    state: newResourceState,\n    errors: [],\n    loading: false,\n  } as StoreResource));\n\n  return _.isEqual(newState[resource.id], state[resource.id])\n    ? state\n    : newState;\n};\n\nexport const /** @type {?} */ updateQueriesForDeletedResource = (\n  state: NgrxJsonApiStoreQueries,\n  deletedId: ResourceIdentifier\n): NgrxJsonApiStoreQueries => {\n  let /** @type {?} */ newState: NgrxJsonApiStoreQueries = state;\n  for (let /** @type {?} */ queryId in state) {\n    if (state.hasOwnProperty(queryId)) {\n      let /** @type {?} */ queryState = state[queryId];\n      if (\n        queryState.query.id === deletedId.id &&\n        queryState.query.type === deletedId.type\n      ) {\n        // found a query for a resource that was deleted => modify to 404\n        newState = clearQueryResult(newState, queryState.query.queryId);\n        let /** @type {?} */ notFoundError: ResourceError = { code: '404', status: 'Not Found' };\n        newState[queryState.query.queryId].errors = [notFoundError];\n      }\n    }\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ updateResourceErrorsForQuery = (\n  storeData: NgrxJsonApiStoreData,\n  query: Query,\n  document: Document\n): NgrxJsonApiStoreData => {\n  if (!query.type || !query.id || document.data instanceof Array) {\n    throw new Error('invalid parameters');\n  }\n  return updateResourceErrors(\n    storeData,\n    { id: query.id, type: query.type },\n    document.errors,\n    'SET'\n  );\n};\n\nexport const /** @type {?} */ updateResourceErrors = (\n  storeData: NgrxJsonApiStoreData,\n  id: ResourceIdentifier,\n  errors: Array<ResourceError>,\n  modificationType: ErrorModificationType\n): NgrxJsonApiStoreData => {\n  if (!storeData[id.type] || !storeData[id.type][id.id]) {\n    return storeData;\n  }\n  let /** @type {?} */ newState: NgrxJsonApiStoreData = { ...storeData };\n  newState[id.type] = { ...newState[id.type] };\n  let /** @type {?} */ storeResource = { ...newState[id.type][id.id] };\n\n  if (modificationType === 'SET') {\n    storeResource.errors = [];\n    if (errors) {\n      storeResource.errors.push(...errors);\n    }\n  } else if (modificationType === 'ADD') {\n    let /** @type {?} */ currentErrors = storeResource.errors;\n    storeResource.errors = [];\n    if (currentErrors) {\n      storeResource.errors.push(...currentErrors);\n    }\n    if (errors) {\n      storeResource.errors.push(...errors);\n    }\n  } else {\n    let /** @type {?} */ currentErrors = storeResource.errors;\n    storeResource.errors = [];\n    if (currentErrors) {\n      for (let /** @type {?} */ currentError of currentErrors) {\n        let /** @type {?} */ remove =\n          errors && errors.filter(it => _.isEqual(it, currentError)).length > 0;\n        if (!remove) {\n          storeResource.errors.push(currentError);\n        }\n      }\n    }\n  }\n  newState[id.type][id.id] = storeResource;\n  return newState;\n};\n/**\n * @param {?} newState\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nfunction rollbackResource(\n  newState: NgrxJsonApiStoreData,\n  type: string,\n  id: string\n) {\n  let /** @type {?} */ storeResource = newState[type][id];\n  if (!storeResource.persistedResource) {\n    delete newState[type][id];\n  } else if (storeResource.state !== 'IN_SYNC') {\n    newState[type][id] = /** @type {?} */(( <StoreResource>{\n      ...newState[type][id],\n      state: 'IN_SYNC',\n      resource: newState[type][id].persistedResource,\n    }));\n  }\n}\n\nexport const /** @type {?} */ rollbackStoreResources = (\n  storeData: NgrxJsonApiStoreData,\n  ids: Array<ResourceIdentifier>,\n  include: Array<string>\n): NgrxJsonApiStoreData => {\n  let /** @type {?} */ newState: NgrxJsonApiStoreData = { ...storeData };\n\n  if (_.isUndefined(ids)) {\n    Object.keys(newState).forEach(type => {\n      newState[type] = { ...newState[type] };\n      Object.keys(newState[type]).forEach(id => {\n        rollbackResource(newState, type, id);\n      });\n    });\n  } else {\n    let /** @type {?} */ modifiedResources = getPendingChanges(newState, ids, include, true);\n    for (let /** @type {?} */ modifiedResource of modifiedResources) {\n      rollbackResource(newState, modifiedResource.type, modifiedResource.id);\n    }\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ deleteStoreResources = (\n  storeData: NgrxJsonApiStoreData,\n  query: Query\n) => {\n  let /** @type {?} */ newState = { ...storeData };\n  // if an id is not provided, all resources of the provided type will be deleted\n  if (typeof query.id === 'undefined') {\n    newState[query.type] = {};\n  } else {\n    newState[query.type] = /** @type {?} */(( _.omit(newState[query.type], [\n      query.id,\n    ]) as NgrxJsonApiStoreResources));\n  }\n  return newState;\n};\n\nexport const /** @type {?} */ clearQueryResult = (\n  storeData: NgrxJsonApiStoreQueries,\n  queryId: string\n) => {\n  let /** @type {?} */ newQuery = { ...storeData[queryId] };\n  delete newQuery.resultIds;\n  delete newQuery.errors;\n  delete newQuery.meta;\n  delete newQuery.links;\n\n  let /** @type {?} */ newState = { ...storeData };\n  newState[queryId] = newQuery;\n  return newState;\n};\n/**\n * Updates a given storeData by either inserting a resource or updating\n * an existing resource.\n * \n * @param storeData\n * @param resource\n * @param fromServer\n * @param override \n * \n * @return a new NgrxJsonApiStoreData with an inserted/updated resource.\n */\nexport const updateStoreDataFromResource = (\n  storeData: NgrxJsonApiStoreData,\n  resource: Resource,\n  fromServer: boolean,\n  override: boolean\n): NgrxJsonApiStoreData => {\n  if (_.isUndefined(storeData[resource.type])) {\n    let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n    newStoreData[resource.type] = {};\n    newStoreData[resource.type] = insertStoreResource(\n      newStoreData[resource.type],\n      resource,\n      fromServer\n    );\n    return newStoreData;\n  } else if (_.isUndefined(storeData[resource.type][resource.id]) || override) {\n    let updatedStoreResources = insertStoreResource(\n      storeData[resource.type],\n      resource,\n      fromServer\n    );\n\n    // check if nothing has changed\n    if (updatedStoreResources !== storeData[resource.type]) {\n      let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n      newStoreData[resource.type] = updatedStoreResources;\n      return newStoreData;\n    }\n    return storeData;\n  } else {\n    let updatedStoreResources = updateStoreResource(\n      storeData[resource.type],\n      resource,\n      fromServer\n    );\n\n    // check if nothing has changed\n    if (updatedStoreResources !== storeData[resource.type]) {\n      let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n      newStoreData[resource.type] = updatedStoreResources;\n      return newStoreData;\n    }\n    return storeData;\n  }\n};\n\nexport const /** @type {?} */ updateStoreDataFromPayload = (\n  storeData: NgrxJsonApiStoreData,\n  payload: Document\n): NgrxJsonApiStoreData => {\n  let /** @type {?} */ data = /** @type {?} */(( <Array<Resource> | Resource>_.get(payload, 'data')));\n\n  if (_.isUndefined(data)) {\n    return storeData;\n  }\n\n  data = _.isArray(data) ? /** @type {?} */(( <Resource[]>data)) : /** @type {?} */(( <Resource[]>[data]));\n\n  let /** @type {?} */ included = /** @type {?} */(( <Array<Resource>>_.get(payload, 'included')));\n\n  if (!_.isUndefined(included)) {\n    data = [...data, ...included];\n  }\n\n  return /** @type {?} */(( <NgrxJsonApiStoreData>_.reduce(\n    data,\n    (result: NgrxJsonApiStoreData, resource: Resource) => {\n      // let resourcePath: string = getResourcePath(\n      //   result.resourcesDefinitions, resource.type);\n      // Extremely ugly, needs refactoring!\n      // let newPartialState = { data: {} };\n      // newPartialState.data[resourcePath] = { data: {} } ;\n      // newPartialState.data = updateOrInsertResource(\n      // result.data, resource);\n      return updateStoreDataFromResource(result, resource, true, true);\n      // result.data[resourcePath].data = updateOrInsertResource(\n      // result.data[resourcePath].data, resource);\n      // return <NgrxJsonApiStore>_.merge({}, result, newPartialState);\n    },\n    storeData\n  )));\n};\n/**\n * Updates the storeQueries by either adding a new ResourceQueryStore\n * or modifying an existing one.\n * \n * @param storeQueries\n * @param query \n * \n * @return a new NgrxJsonApiStoreQueries with the inserted/modified\n * ResourceQueryStore\n */\nexport const updateQueryParams = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  query: Query\n): NgrxJsonApiStoreQueries => {\n  if (!query.queryId) {\n    return storeQueries;\n  }\n\n  let newStoreQuery = { ...storeQueries[query.queryId] };\n  newStoreQuery.loading = true;\n  newStoreQuery.query = _.cloneDeep(query);\n\n  if (_.isUndefined(newStoreQuery.errors)) {\n    newStoreQuery.errors = [];\n  }\n\n  let newStoreQueries: NgrxJsonApiStoreQueries = { ...storeQueries };\n  newStoreQueries[newStoreQuery.query.queryId] = newStoreQuery;\n  return newStoreQueries;\n};\n/**\n * Updates the query results for given a queryId and the results.\n */\nexport const updateQueryResults = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string,\n  document: Document\n): NgrxJsonApiStoreQueries => {\n  let storeQuery: StoreQuery = storeQueries[queryId];\n  if (storeQuery) {\n    let data = _.isArray(document.data) ? document.data : [document.data];\n    let newQueryStore = {\n      ...storeQuery,\n      resultIds: data.map(it => (it ? toResourceIdentifier(it) : [])),\n      meta: document.meta,\n      links: document.links,\n      loading: false,\n    };\n\n    if(!_.isEqual(newQueryStore, storeQuery)){\n      let newState: NgrxJsonApiStoreQueries = { ...storeQueries };\n      newState[queryId] = <StoreQuery>newQueryStore;\n      return newState;\n    }\n  }\n  return storeQueries;\n};\n/**\n * Update the query errors given the queryId and a storeQueries and the\n * document containing the error\n * \n * \n */\nexport const updateQueryErrors = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string,\n  document: Document\n): NgrxJsonApiStoreQueries => {\n  if (!queryId || !storeQueries[queryId]) {\n    return storeQueries;\n  }\n  let newState = { ...storeQueries };\n  let newStoreQuery = { ...newState[queryId] };\n  newStoreQuery.errors = [];\n  if (document.errors) {\n    newStoreQuery.errors.push(...document.errors);\n  }\n  newState[queryId] = newStoreQuery;\n  return newState;\n};\n/**\n * Removes a query given its queryId from the NgrxJsonApiStoreQueries.\n */\nexport const removeQuery = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string\n): NgrxJsonApiStoreQueries => {\n  let newState: NgrxJsonApiStoreQueries = { ...storeQueries };\n  delete newState[queryId];\n  return newState;\n};\n/**\n * Given a resource, it will return an object containing the resource id and type.\n */\nexport const toResourceIdentifier = (\n  resource: Resource\n): ResourceIdentifier => {\n  return { type: resource.type, id: resource.id };\n};\n/**\n * Get the value for the last field in a given fitering path.\n * \n * @param path\n * @param baseStoreResource\n * @param storeData\n * @param resourceDefinitions\n * @param pathSepartor\n * @return the value of the last field in the path.\n */\nexport const getResourceFieldValueFromPath = (\n  path: string,\n  baseStoreResource: StoreResource,\n  storeData: NgrxJsonApiStoreData,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n) => {\n  if (_.isUndefined(pathSeparator)) {\n    pathSeparator = '.';\n  }\n  let fields: Array<string> = path.split(pathSeparator);\n  let currentStoreResource = baseStoreResource;\n  for (let i = 0; i < fields.length; i++) {\n    let definition = _.find(resourceDefinitions, {\n      type: currentStoreResource.type,\n    });\n\n    if (_.isUndefined(definition)) {\n      throw new Error('Definition not found');\n    }\n    // if both attributes and relationships are missing, raise an error\n    if (\n      _.isUndefined(definition.attributes) &&\n      _.isUndefined(definition.relationships)\n    ) {\n      throw new Error('Attributes or Relationships must be provided');\n    }\n    if (definition.attributes.hasOwnProperty(fields[i])) {\n      return _.get(currentStoreResource, 'attributes.' + fields[i], null);\n    } else if (definition.relationships.hasOwnProperty(fields[i])) {\n      if (i === fields.length - 1) {\n        throw new Error(\n          'The last field in the filtering path cannot be a relation'\n        );\n      }\n      let resourceRelation = definition.relationships[fields[i]];\n      if (resourceRelation.relationType === 'hasMany') {\n        throw new Error('Cannot filter past a hasMany relation');\n      } else {\n        let relation = _.get(\n          currentStoreResource,\n          'relationships.' + fields[i],\n          null\n        );\n        if (!relation || !relation.data) {\n          return null;\n        } else {\n          let relatedPath = [resourceRelation.type, relation.data.id];\n          currentStoreResource = <StoreResource>_.get(storeData, relatedPath);\n        }\n      }\n    } else {\n      throw new Error('Cannot find field in attributes or relationships');\n    }\n    if (_.isUndefined(currentStoreResource)) {\n      return null;\n    }\n  }\n};\n\nexport const /** @type {?} */ filterResources = (\n  resources: NgrxJsonApiStoreResources,\n  storeData: NgrxJsonApiStoreData,\n  query: Query,\n  resourceDefinitions: Array<ResourceDefinition>,\n  filteringConfig?: NgrxJsonApiFilteringConfig\n) => {\n  return _.filter(resources, resource => {\n    if (\n      query.hasOwnProperty('params') &&\n      query.params.hasOwnProperty('filtering')\n    ) {\n      return query.params.filtering.every(element => {\n        let /** @type {?} */ pathSeparator;\n        let /** @type {?} */ filteringOperators;\n\n        if (!_.isUndefined(filteringConfig)) {\n          pathSeparator = /** @type {?} */(( <string>_.get(filteringConfig, 'pathSeparator')));\n          filteringOperators = /** @type {?} */(( <Array<FilteringOperator>>_.get(\n            filteringConfig,\n            'filteringOperators'\n          )));\n        }\n        // resource type and attribute\n        let /** @type {?} */ resourceFieldValue = getResourceFieldValueFromPath(\n          element.path,\n          resource,\n          storeData,\n          resourceDefinitions,\n          pathSeparator\n        );\n        if (!resourceFieldValue) {\n          return false;\n        }\n\n        let /** @type {?} */ operator = /** @type {?} */(( <FilteringOperator>_.find(filteringOperators, {\n          name: element.operator,\n        })));\n\n        if (operator) {\n          return operator.comparison(element.value, resourceFieldValue);\n        }\n\n        element.operator = element.hasOwnProperty('operator')\n          ? element.operator\n          : 'iexact';\n\n        switch (element.operator) {\n          case 'iexact':\n            if (_.isString(element.value) && _.isString(resourceFieldValue)) {\n              return (\n                element.value.toLowerCase() === resourceFieldValue.toLowerCase()\n              );\n            } else {\n              return element.value === resourceFieldValue;\n            }\n\n          case 'exact':\n            return element.value === resourceFieldValue;\n\n          case 'contains':\n            return _.includes(resourceFieldValue, element.value);\n\n          case 'icontains':\n            return _.includes(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          case 'in':\n            if (_.isArray(element.value)) {\n              return _.includes(element.value, resourceFieldValue);\n            } else {\n              return _.includes([element.value], resourceFieldValue);\n            }\n          case 'gt':\n            return element.value > resourceFieldValue;\n\n          case 'gte':\n            return element.value >= resourceFieldValue;\n\n          case 'lt':\n            return element.value < resourceFieldValue;\n\n          case 'lte':\n            return element.value <= resourceFieldValue;\n\n          case 'startswith':\n            return _.startsWith(resourceFieldValue, element.value);\n\n          case 'istartswith':\n            return _.startsWith(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          case 'endswith':\n            return _.endsWith(resourceFieldValue, element.value);\n\n          case 'iendswith':\n            return _.endsWith(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          default:\n            return true;\n        }\n      });\n    } else {\n      return true;\n    }\n  });\n};\n\nexport const /** @type {?} */ generateIncludedQueryParams = (\n  included: Array<string>\n): string => {\n  if (_.isEmpty(included)) {\n    return '';\n  }\n\n  return 'include=' + included.join();\n};\n\nexport const /** @type {?} */ generateFieldsQueryParams = (fields: Array<string>): string => {\n  if (_.isEmpty(fields)) {\n    return '';\n  }\n\n  return 'fields=' + fields.join();\n};\n\nexport const /** @type {?} */ generateFilteringQueryParams = (\n  filtering: Array<FilteringParam>\n): string => {\n  if (_.isEmpty(filtering)) {\n    return '';\n  }\n  let /** @type {?} */ filteringParams = filtering.map(f => {\n    return (\n      'filter[' +\n      f.path +\n      ']' +\n      (f.operator ? '[' + f.operator + ']' : '') +\n      '=' +\n      encodeURIComponent(f.value)\n    );\n  });\n  return filteringParams.join('&');\n};\n\nexport const /** @type {?} */ generateSortingQueryParams = (\n  sorting: Array<SortingParam>\n): string => {\n  if (_.isEmpty(sorting)) {\n    return '';\n  }\n  return (\n    'sort=' +\n    sorting\n      .map(f => (f.direction === Direction.ASC ? '' : '-') + f.api)\n      .join(',')\n  );\n};\n\nexport const /** @type {?} */ generateQueryParams = (...params: Array<string>) => {\n  let /** @type {?} */ newParams = params.filter(p => p !== '');\n  if (newParams.length !== 0) {\n    return '?' + newParams.join('&');\n  } else {\n    return '';\n  }\n};\n\nexport const /** @type {?} */ generatePayload = (\n  resource: StoreResource,\n  operation: OperationType\n): Payload => {\n  let /** @type {?} */ payload: Payload = {\n    query: {\n      type: resource.type,\n    },\n  };\n\n  // the data to be updated or created\n  if (operation === 'POST' || operation === 'PATCH') {\n    payload.jsonApiData = {\n      data: {\n        id: resource.id,\n        type: resource.type,\n        attributes: resource.attributes,\n        relationships: resource.relationships,\n      },\n    };\n  }\n\n  if (operation === 'POST' && resource.hasTemporaryId) {\n    delete payload.jsonApiData.data.id;\n  }\n\n  // 'DELETE' only needs a query and it also needs an id in its query\n  // 'PATCH' also needs an id in its query\n  // 'POST' needed locally to allow to write back errors to store if id is available\n  if (operation === 'PATCH' || operation === 'DELETE' || operation === 'POST') {\n    payload.query.id = resource.id;\n  }\n\n  return payload;\n};\n\n/* tslint:disable */\nexport const /** @type {?} */ uuid = () => {\n  let /** @type {?} */ lut = [];\n  for (let /** @type {?} */ i = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n  }\n  let /** @type {?} */ d0 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d1 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d2 = (Math.random() * 0xffffffff) | 0;\n  let /** @type {?} */ d3 = (Math.random() * 0xffffffff) | 0;\n  return (\n    lut[d0 & 0xff] +\n    lut[(d0 >> 8) & 0xff] +\n    lut[(d0 >> 16) & 0xff] +\n    lut[(d0 >> 24) & 0xff] +\n    '-' +\n    lut[d1 & 0xff] +\n    lut[(d1 >> 8) & 0xff] +\n    '-' +\n    lut[((d1 >> 16) & 0x0f) | 0x40] +\n    lut[(d1 >> 24) & 0xff] +\n    '-' +\n    lut[(d2 & 0x3f) | 0x80] +\n    lut[(d2 >> 8) & 0xff] +\n    '-' +\n    lut[(d2 >> 16) & 0xff] +\n    lut[(d2 >> 24) & 0xff] +\n    lut[d3 & 0xff] +\n    lut[(d3 >> 8) & 0xff] +\n    lut[(d3 >> 16) & 0xff] +\n    lut[(d3 >> 24) & 0xff]\n  );\n};\n/* tslint:enable */\n\nconst /** @type {?} */ toKey = (id: ResourceIdentifier) => {\n  return id.id + '@' + id.type;\n};\n\nconst /** @type {?} */ collectQueryResults = (state: NgrxJsonApiStore, usedResources: any) => {\n  for (let /** @type {?} */ queryName in state.queries) {\n    if (state.queries.hasOwnProperty(queryName)) {\n      let /** @type {?} */ query = state.queries[queryName];\n      if (query.resultIds) {\n        for (let /** @type {?} */ resultId of query.resultIds) {\n          usedResources[toKey(resultId)] = true;\n        }\n      }\n    }\n  }\n};\n\nconst /** @type {?} */ collectPendingChanges = (state: NgrxJsonApiStore, usedResources: any) => {\n  for (let /** @type {?} */ type in state.data) {\n    if (state.data.hasOwnProperty(type)) {\n      let /** @type {?} */ resources = state.data[type];\n      for (let /** @type {?} */ id in resources) {\n        if (resources.hasOwnProperty(id)) {\n          let /** @type {?} */ resource = resources[id];\n          if (resource.state !== 'IN_SYNC') {\n            usedResources[toKey(resource)] = true;\n          }\n        }\n      }\n    }\n  }\n};\n\nconst /** @type {?} */ collectReferencesForResource = (\n  state: NgrxJsonApiStore,\n  usedResources: any,\n  resource: Resource\n) => {\n  let /** @type {?} */ hasChanges: boolean;\n  for (let /** @type {?} */ relationshipName in resource.relationships) {\n    if (resource.relationships.hasOwnProperty(relationshipName)) {\n      let /** @type {?} */ data = resource.relationships[relationshipName].data;\n      if (data) {\n        let /** @type {?} */ dependencyIds: Array<ResourceIdentifier> =\n          data instanceof Array ? data : [data];\n        for (let /** @type {?} */ dependencyId of dependencyIds) {\n          let /** @type {?} */ dependencyKey = toKey(dependencyId);\n          if (!usedResources[dependencyKey]) {\n            // change found, an other iteration will be necssary to detect\n            // transitive dependencies\n            hasChanges = true;\n            usedResources[dependencyKey] = true;\n          }\n        }\n      }\n    }\n  }\n  return hasChanges;\n};\n\nconst /** @type {?} */ collectReferences = (state: NgrxJsonApiStore, usedResources: any) => {\n  while (true) {\n    let /** @type {?} */ hasChanges = false;\n    for (let /** @type {?} */ type in state.data) {\n      if (state.data.hasOwnProperty(type)) {\n        let /** @type {?} */ resources = state.data[type];\n        for (let /** @type {?} */ id in resources) {\n          if (resources.hasOwnProperty(id)) {\n            let /** @type {?} */ resource = resources[id];\n            if (usedResources[toKey(resource)]) {\n              // in use, do not collect its relations\n              hasChanges =\n                hasChanges ||\n                collectReferencesForResource(state, usedResources, resource);\n            }\n          }\n        }\n      }\n    }\n    if (!hasChanges) {\n      break;\n    }\n  }\n};\n\nconst /** @type {?} */ sweepUnusedResources = (state: NgrxJsonApiStore, usedResources: any) => {\n  let /** @type {?} */ hasDeletions = false;\n  let /** @type {?} */ newState = _.cloneDeep(state);\n  for (let /** @type {?} */ type in newState.data) {\n    if (newState.data.hasOwnProperty(type)) {\n      let /** @type {?} */ resources = newState.data[type];\n      for (let /** @type {?} */ id in resources) {\n        if (resources.hasOwnProperty(id)) {\n          let /** @type {?} */ resource = resources[id];\n          if (!usedResources[toKey(resource)]) {\n            hasDeletions = true;\n            delete resources[id];\n          }\n        }\n      }\n\n      if (_.isEmpty(resources)) {\n        delete newState.data[type];\n      }\n    }\n  }\n  return hasDeletions ? newState : state;\n};\n\nexport const /** @type {?} */ compactStore = (state: NgrxJsonApiStore) => {\n  let /** @type {?} */ usedResources = {};\n\n  // query results can not be collected\n  collectQueryResults(state, usedResources);\n\n  // pending changes cannot be collected\n  collectPendingChanges(state, usedResources);\n\n  // references from non-collected objects cannot be collected as well\n  collectReferences(state, usedResources);\n\n  // remove everything that is not collected\n  return sweepUnusedResources(state, usedResources);\n};\n\ninterface TopologySortContext {\n  pendingResources: Array<StoreResource>;\n  cursor: number;\n  sorted: Array<StoreResource>;\n  visited: Array<boolean>;\n  dependencies: { [id: string]: Array<StoreResource> };\n}\n\nexport const /** @type {?} */ sortPendingChanges = (\n  pendingResources: Array<StoreResource>\n): Array<StoreResource> => {\n  // allocate dependency\n  let /** @type {?} */ dependencies: any = {};\n  let /** @type {?} */ pendingMap: any = {};\n  for (let /** @type {?} */ pendingResource of pendingResources) {\n    let /** @type {?} */ resource = pendingResource;\n    let /** @type {?} */ key = toKey(resource);\n    dependencies[key] = [];\n    pendingMap[key] = pendingResource;\n  }\n\n  // extract dependencies\n  for (let /** @type {?} */ pendingResource of pendingResources) {\n    let /** @type {?} */ resource = pendingResource;\n    if (resource.relationships) {\n      let /** @type {?} */ key = toKey(resource);\n      Object.keys(resource.relationships).forEach(relationshipName => {\n        let /** @type {?} */ data = resource.relationships[relationshipName].data;\n        if (data) {\n          let /** @type {?} */ dependencyIds: Array<ResourceIdentifier> =\n            data instanceof Array ? data : [data];\n          for (let /** @type {?} */ dependencyId of dependencyIds) {\n            let /** @type {?} */ dependencyKey = toKey(dependencyId);\n            if (\n              pendingMap[dependencyKey] &&\n              pendingMap[dependencyKey].state === 'CREATED'\n            ) {\n              // we have a dependency between two unsaved objects\n              dependencies[key].push(pendingMap[dependencyKey]);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  // order\n  let /** @type {?} */ context = {\n    pendingResources: pendingResources,\n    cursor: pendingResources.length,\n    sorted: new Array(pendingResources.length),\n    dependencies: dependencies,\n    visited: /** @type {?} */(( <any[]>[])),\n  };\n\n  let /** @type {?} */ i = context.cursor;\n  while (i--) {\n    if (!context.visited[i]) {\n      visitPending(pendingResources[i], i, [], context);\n    }\n  }\n\n  return context.sorted;\n};\n\nconst /** @type {?} */ visitPending = (\n  pendingResource: StoreResource,\n  i: any,\n  predecessors: any,\n  context: TopologySortContext\n) => {\n  let /** @type {?} */ key = toKey(pendingResource);\n  if (predecessors.indexOf(key) >= 0) {\n    throw new Error(\n      'Cyclic dependency: ' + key + ' with ' + JSON.stringify(predecessors)\n    );\n  }\n\n  if (context.visited[i]) {\n    return;\n  }\n  context.visited[i] = true;\n\n  // outgoing edges\n  let /** @type {?} */ outgoing: Array<StoreResource> = context.dependencies[key];\n\n  let /** @type {?} */ preds = predecessors.concat(key);\n  for (let /** @type {?} */ child of outgoing) {\n    visitPending(\n      child,\n      context.pendingResources.indexOf(child),\n      preds,\n      context\n    );\n  }\n\n  context.sorted[--context.cursor] = pendingResource;\n};\n/**\n * @param {?} state\n * @param {?} pending\n * @param {?} id\n * @param {?} include\n * @param {?} includeNew\n * @return {?}\n */\nfunction collectPendingChange(\n  state: NgrxJsonApiStoreData,\n  pending: Array<StoreResource>,\n  id: ResourceIdentifier,\n  include: Array<Array<string>>,\n  includeNew: boolean\n) {\n  let /** @type {?} */ storeResource = state[id.type][id.id];\n  if (\n    storeResource.state !== 'IN_SYNC' &&\n    (storeResource.state !== 'NEW' || includeNew)\n  ) {\n    pending.push(storeResource);\n  }\n\n  for (let /** @type {?} */ includeElement of include) {\n    if (includeElement.length > 0) {\n      let /** @type {?} */ relationshipName = includeElement[0];\n      if (\n        storeResource.relationships &&\n        storeResource.relationships[relationshipName]\n      ) {\n        let /** @type {?} */ data = storeResource.relationships[relationshipName].data;\n        if (data) {\n          let /** @type {?} */ relationInclude: Array<Array<string>> = [];\n          include\n            .filter(\n              relIncludeElem =>\n                relIncludeElem.length >= 2 &&\n                relIncludeElem[0] == relationshipName\n            )\n            .forEach(relIncludeElem =>\n              relationInclude.push(relIncludeElem.slice(1))\n            );\n\n          if (_.isArray(data)) {\n            let /** @type {?} */ relationIds = /** @type {?} */(( data as Array<ResourceIdentifier>));\n            relationIds.forEach(relationId =>\n              collectPendingChange(\n                state,\n                pending,\n                relationId,\n                relationInclude,\n                includeNew\n              )\n            );\n          } else {\n            let /** @type {?} */ relationId = /** @type {?} */(( data as ResourceIdentifier));\n            collectPendingChange(\n              state,\n              pending,\n              relationId,\n              relationInclude,\n              includeNew\n            );\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * @param {?} state\n * @param {?} ids\n * @param {?} include\n * @param {?=} includeNew\n * @return {?}\n */\nexport function getPendingChanges(\n  state: NgrxJsonApiStoreData,\n  ids: Array<ResourceIdentifier>,\n  include: Array<string>,\n  includeNew?: boolean\n): Array<StoreResource> {\n  let /** @type {?} */ pending: Array<StoreResource> = [];\n\n  if (_.isUndefined(ids)) {\n    // check all\n    Object.keys(state).forEach(type => {\n      Object.keys(state[type]).forEach(id => {\n        let /** @type {?} */ storeResource = state[type][id];\n        if (\n          storeResource.state !== 'IN_SYNC' &&\n          (storeResource.state !== 'NEW' || includeNew)\n        ) {\n          pending.push(storeResource);\n        }\n      });\n    });\n  } else {\n    let /** @type {?} */ relationshipInclusions = [];\n    if (include) {\n      for (let /** @type {?} */ includeElement of include) {\n        relationshipInclusions.push(includeElement.split('.'));\n      }\n    }\n    for (let /** @type {?} */ id of ids) {\n      collectPendingChange(\n        state,\n        pending,\n        id,\n        relationshipInclusions,\n        includeNew\n      );\n    }\n    pending = _.uniqBy(pending, function(e) {\n      return e.type + '####' + e.id;\n    });\n  }\n\n  return pending;\n}\n","import * as _ from 'lodash/index';\n\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/concat';\nimport'rxjs/add/observable/throw';\nimport'rxjs/add/operator/combineLatest';\nimport'rxjs/add/operator/concat';\nimport'rxjs/add/operator/concatMap';\nimport'rxjs/add/operator/distinctUntilChanged';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/let';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/observable/zip';\n\nimport {Store} from '@ngrx/store';\n\nimport {\n  ManyQueryResult, NGRX_JSON_API_DEFAULT_ZONE,\n  NgrxJsonApiState,\n  NgrxJsonApiStore, NgrxJsonApiStoreResources,\n  NgrxJsonApiZone, OneQueryResult, Resource,\n  ResourceIdentifier, NgrxJsonApiStoreQueries,\n  StoreResource, NgrxJsonApiStoreData, StoreQuery\n} from './interfaces';\nimport {denormaliseStoreResource, denormaliseStoreResources} from './utils';\n/**\n * @return {?}\n */\nexport function selectNgrxJson(){\n  return  (state$: Store<any>) => state$.select('NgrxJsonApi')\n    .map(it => /** @type {?} */(( it as NgrxJsonApiState)))\n    .filter(it => !_.isUndefined(it));\n}\n/**\n * @return {?}\n */\nexport function selectNgrxJsonApiDefaultZone(){\n  return selectNgrxJsonApiZone(NGRX_JSON_API_DEFAULT_ZONE);\n}\n/**\n * @param {?} zoneId\n * @return {?}\n */\nexport function selectNgrxJsonApiZone(zoneId: string){\n  return (state$: Store<any>) => state$.let(selectNgrxJson())\n    .map(it => /** @type {?} */(( it.zones[zoneId] as NgrxJsonApiZone)));\n}\n/**\n * @param {?} state\n * @param {?} zoneId\n * @return {?}\n */\nexport function getNgrxJsonApiZone(state: any, zoneId: string){\n  return /** @type {?} */(( state['NgrxJsonApi']['zones'][zoneId] as NgrxJsonApiZone));\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nexport function selectStoreQuery(queryId: string):\n(state: Observable<NgrxJsonApiStore>) => Observable<StoreQuery>{\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$\n      .map(state => state.queries[queryId])\n  };\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function selectStoreResourcesOfType(type: string):\n  (state: Observable<NgrxJsonApiStore>) => Observable<NgrxJsonApiStoreResources>{\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$\n      .map(state => state.data)\n      .map(data => (data ? data[type] : undefined));\n  };\n}\n/**\n * @param {?} identifier\n * @return {?}\n */\nexport function selectStoreResource(identifier: ResourceIdentifier) {\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$\n      .let(selectStoreResourcesOfType(identifier.type))\n      .map(\n        resources => /** @type {?} */((\n          (resources ? resources[identifier.id] : undefined) as StoreResource))\n      );\n  };\n}\n/**\n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?}\n */\nexport function selectManyQueryResult(queryId: string, denormalize?: boolean):\n  (state: Observable<NgrxJsonApiStore>) => Observable<ManyQueryResult> {\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$.map(state => {\n      let /** @type {?} */ storeQuery = state.queries[queryId];\n      if (!storeQuery) {\n        return undefined;\n      }\n\n      if (_.isEmpty(storeQuery.resultIds)) {\n        let /** @type {?} */ queryResult: ManyQueryResult = {\n          ...storeQuery,\n          data: _.isUndefined(storeQuery.resultIds) ? undefined : [],\n        };\n        return queryResult;\n      } else {\n        let /** @type {?} */ results = storeQuery.resultIds.map(\n          id => (state.data[id.type] ? state.data[id.type][id.id] : undefined)\n        );\n        if (denormalize) {\n          results = denormaliseStoreResources(results, state.data);\n        }\n        return {\n          ...storeQuery,\n          data: /** @type {?} */(( results as Array<StoreResource>)),\n        };\n      }\n    });\n  };\n}\n/**\n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?}\n */\nexport function selectOneQueryResult(queryId: string, denormalize?: boolean) :\n (state: Observable<NgrxJsonApiStore>) => Observable<OneQueryResult> {\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$.map(state => {\n      let /** @type {?} */ storeQuery = state.queries[queryId];\n      if (!storeQuery) {\n        return undefined;\n      }\n\n      if (_.isEmpty(storeQuery.resultIds)) {\n        let /** @type {?} */ queryResult: OneQueryResult = {\n          ...storeQuery,\n          data: _.isUndefined(storeQuery.resultIds) ? undefined : null,\n        };\n        return queryResult;\n      } else {\n        if (storeQuery.resultIds.length >= 2) {\n          throw new Error(\n            'expected single result for query ' + storeQuery.query.queryId\n          );\n        }\n\n        let /** @type {?} */ resultId = storeQuery.resultIds[0];\n        let /** @type {?} */ result = state.data[resultId.type]\n          ? state.data[resultId.type][resultId.id]\n          : undefined;\n        if (denormalize) {\n          result = denormaliseStoreResource(result, state.data);\n        }\n        const /** @type {?} */ queryResult: OneQueryResult = {\n          ...storeQuery,\n          data: result\n        };\n        return queryResult;\n      }\n    });\n  };\n}\n/**\n * deprecated, to not use any longer\n * @param {?} state$\n * @return {?}\n */\nexport function getNgrxJsonApiStore(state$: Store<any>): Observable<NgrxJsonApiStore>{\n  return state$.let(selectNgrxJsonApiDefaultZone());\n}\n/**\n * deprecated, to not use any longer\n */\nexport class NgrxJsonApiSelectors {\nconstructor() {}\n/**\n * @return {?}\n */\npublic getNgrxJsonApiStore$(): (\n    state$: Store<any>\n  ) => Observable<NgrxJsonApiStore> {\n    return (state$: Store<any>): Observable<NgrxJsonApiStore> => {\n      return state$.let(selectNgrxJsonApiDefaultZone());\n    };\n  }\n/**\n * @return {?}\n */\npublic getStoreData$(): (\n    state$: Store<NgrxJsonApiStore>\n  ) => Observable<NgrxJsonApiStoreData> {\n    return (\n      state$: Store<NgrxJsonApiStore>\n    ): Observable<NgrxJsonApiStoreData> => {\n      return state$.select('data');\n    };\n  }\n/**\n * @param {?} type\n * @return {?}\n */\npublic getStoreResourceOfType$(type: string) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreData$())\n        .map(resources => (resources ? resources[type] : undefined));\n    };\n  }\n/**\n * @return {?}\n */\npublic getStoreQueries$() {\n    return (state$: Store<NgrxJsonApiStore>) => {\n      return state$.select('queries');\n    };\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic getResourceQuery$(queryId: string) {\n    return selectStoreQuery(queryId);\n  }\n/**\n * @param {?} identifier\n * @return {?}\n */\npublic getStoreResource$(identifier: ResourceIdentifier) {\n    return selectStoreResource(identifier);\n  }\n/**\n * @param {?} queryId\n * @param {?} denormalize\n * @return {?}\n */\npublic getManyResults$(queryId: string, denormalize: boolean) {\n    return selectManyQueryResult(queryId, denormalize);\n  }\n/**\n * @param {?} queryId\n * @param {?} denormalize\n * @return {?}\n */\npublic getOneResult$(queryId: string, denormalize: boolean) {\n    return selectOneQueryResult(queryId, denormalize);\n  }\n/**\n * @param {?} identifier\n * @return {?}\n */\npublic getPersistedResource$(identifier: ResourceIdentifier) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreResource$(identifier))\n        .map(it => (it ? it.persistedResource : undefined));\n    };\n  }\n}\n","import { Action } from '@ngrx/store';\n\nimport {\n  ApiApplyInitAction,\n  ApiRollbackAction,\n  NgrxJsonApiActionTypes,\n} from './actions';\nimport {\n  ModifyStoreResourceErrorsPayload, NgrxJsonApiState,\n  NgrxJsonApiZone,\n  Query,\n  ResourceIdentifier,\n  StoreResource,\n} from './interfaces';\nimport {\n  clearQueryResult,\n  compactStore,\n  deleteStoreResources,\n  getPendingChanges,\n  removeQuery,\n  removeStoreResource,\n  rollbackStoreResources, setIn,\n  updateQueriesForDeletedResource,\n  updateQueryErrors,\n  updateQueryParams,\n  updateQueryResults,\n  updateResourceErrors,\n  updateResourceErrorsForQuery,\n  updateResourceState,\n  updateStoreDataFromPayload,\n  updateStoreDataFromResource,\n} from './utils';\n\nexport const /** @type {?} */ initialNgrxJsonApiZone: NgrxJsonApiZone = {\n  isCreating: 0,\n  isReading: 0,\n  isUpdating: 0,\n  isDeleting: 0,\n  isApplying: 0,\n  data: {},\n  queries: {},\n};\n\nexport const /** @type {?} */ initialNgrxJsonApiState: NgrxJsonApiState = {\n  zones: {}\n};\n/**\n * @param {?=} state\n * @param {?=} action\n * @return {?}\n */\nexport function NgrxJsonApiStoreReducer(\n  state: NgrxJsonApiState = initialNgrxJsonApiState,\n  action: any\n): NgrxJsonApiState {\n  const /** @type {?} */ zoneId = action['zoneId'];\n  if (!zoneId) {\n    return state;\n  }\n  let /** @type {?} */ zone = state.zones[zoneId];\n  if (!zone) {\n    zone = initialNgrxJsonApiZone;\n  }\n  let /** @type {?} */ newZone = NgrxJsonApiZoneReducer(zone, action);\n  if(zone != newZone){\n    return {\n      ...state,\n      zones: {\n        ...state.zones,\n        [zoneId]: newZone\n      }\n    }\n  }else{\n    return state;\n  }\n}\n/**\n * @param {?} zone\n * @param {?} action\n * @return {?}\n */\nexport function NgrxJsonApiZoneReducer(zone: NgrxJsonApiZone, action: any): NgrxJsonApiZone {\n  let /** @type {?} */ newZone;\n  switch (action.type) {\n    case NgrxJsonApiActionTypes.API_POST_INIT: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        true\n      );\n      newZone = {\n        ...zone,\n        data: updatedData,\n        isCreating: zone.isCreating + 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_GET_INIT: {\n      let /** @type {?} */ query = /** @type {?} */(( action.payload as Query));\n      newZone = {\n        ...zone,\n        queries: updateQueryParams(zone.queries, query),\n        isReading: zone.isReading + 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_INIT: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        false\n      );\n      newZone = {\n        ...zone,\n        data: updatedData,\n        isUpdating: zone.isUpdating + 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_INIT: {\n      newZone = {\n        ...zone,\n        data: updateResourceState(zone.data, action.payload, 'DELETED'),\n        isDeleting: zone.isDeleting + 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_POST_SUCCESS: {\n      newZone = {\n        ...zone,\n        data: updateStoreDataFromPayload(\n          zone.data,\n          action.payload.jsonApiData\n        ),\n        isCreating: zone.isCreating - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_GET_SUCCESS: {\n      newZone = {\n        ...zone,\n        data: updateStoreDataFromPayload(\n          zone.data,\n          action.payload.jsonApiData\n        ),\n        queries: updateQueryResults(\n          zone.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n        isReading: zone.isReading - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_SUCCESS: {\n      newZone = {\n        ...zone,\n        data: updateStoreDataFromPayload(\n          zone.data,\n          action.payload.jsonApiData\n        ),\n        isUpdating: zone.isUpdating - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_SUCCESS: {\n      newZone = {\n        ...zone,\n        data: deleteStoreResources(zone.data, action.payload.query),\n        queries: updateQueriesForDeletedResource(zone.queries, {\n          id: action.payload.query.id,\n          type: action.payload.query.type,\n        }),\n        isDeleting: zone.isDeleting - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_QUERY_REFRESH: {\n      // clear result ids and wait until new data is fetched (triggered by effect)\n      newZone = {\n        ...zone,\n        queries: clearQueryResult(zone.queries, action.payload),\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_POST_FAIL: {\n      newZone = {\n        ...zone,\n        data: updateResourceErrorsForQuery(\n          zone.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isCreating: zone.isCreating - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_GET_FAIL: {\n      newZone = {\n        ...zone,\n        queries: updateQueryErrors(\n          zone.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n        isReading: zone.isReading - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_FAIL: {\n      newZone = {\n        ...zone,\n        data: updateResourceErrorsForQuery(\n          zone.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isUpdating: zone.isUpdating - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_FAIL: {\n      newZone = {\n        ...zone,\n        data: updateResourceErrorsForQuery(\n          zone.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isDeleting: zone.isDeleting - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.REMOVE_QUERY: {\n      let /** @type {?} */ queryId = /** @type {?} */(( action.payload as string));\n      newZone = { ...zone, queries: removeQuery(zone.queries, queryId) };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.LOCAL_QUERY_INIT: {\n      let /** @type {?} */ query = /** @type {?} */(( action.payload as Query));\n      newZone = { ...zone, queries: updateQueryParams(zone.queries, query) };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.MODIFY_STORE_RESOURCE_ERRORS: {\n      let /** @type {?} */ payload = /** @type {?} */(( action.payload as ModifyStoreResourceErrorsPayload));\n      newZone = {\n        ...zone,\n        data: updateResourceErrors(\n          zone.data,\n          payload.resourceId,\n          payload.errors,\n          payload.modificationType\n        ),\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.LOCAL_QUERY_SUCCESS: {\n      return setIn(zone, 'queries', updateQueryResults(\n        zone.queries,\n        action.payload.query.queryId,\n        action.payload.jsonApiData\n      ));\n    }\n    case NgrxJsonApiActionTypes.PATCH_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        false\n      );\n      if (updatedData !== zone.data) {\n        newZone = { ...zone, data: updatedData };\n        return newZone;\n      } else {\n        return zone;\n      }\n    }\n    case NgrxJsonApiActionTypes.POST_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        true\n      );\n      if (updatedData !== zone.data) {\n        newZone = { ...zone, data: updatedData };\n        return newZone;\n      } else {\n        return zone;\n      }\n    }\n    case NgrxJsonApiActionTypes.NEW_STORE_RESOURCE: {\n      let /** @type {?} */ updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        true\n      );\n      updatedData = updateResourceState(updatedData, action.payload, 'NEW');\n      if (updatedData !== zone.data) {\n        newZone = { ...zone, data: updatedData };\n        return newZone;\n      } else {\n        return zone;\n      }\n    }\n    case NgrxJsonApiActionTypes.DELETE_STORE_RESOURCE: {\n      let /** @type {?} */ resourceId = /** @type {?} */(( action.payload as ResourceIdentifier));\n      if (\n        zone.data[resourceId.type] &&\n        zone.data[resourceId.type][resourceId.id]\n      ) {\n        let /** @type {?} */ resource = zone.data[resourceId.type][resourceId.id];\n\n        if (resource.state === 'NEW' || resource.state === 'CREATED') {\n          // not yet stored on server-side, just delete\n          newZone = {\n            ...zone,\n            data: removeStoreResource(zone.data, resourceId),\n          };\n          return newZone;\n        } else {\n          // stored on server, mark for deletion\n          newZone = {\n            ...zone,\n            data: updateResourceState(zone.data, action.payload, 'DELETED'),\n          };\n          return newZone;\n        }\n      }\n      return zone;\n    }\n    case NgrxJsonApiActionTypes.API_APPLY_INIT: {\n      let /** @type {?} */ payload = ( /** @type {?} */((action as ApiApplyInitAction))).payload;\n      let /** @type {?} */ pending: Array<StoreResource> = getPendingChanges(\n        zone.data,\n        payload.ids,\n        payload.include\n      );\n      newZone = { ...zone, isApplying: zone.isApplying + 1 };\n      for (let /** @type {?} */ pendingChange of pending) {\n        if (pendingChange.state === 'CREATED') {\n          newZone.isCreating++;\n        } else if (pendingChange.state === 'UPDATED') {\n          newZone.isUpdating++;\n        } else if (pendingChange.state === 'DELETED') {\n          newZone.isDeleting++;\n        } else {\n          throw new Error('unknown state ' + pendingChange.state);\n        }\n      }\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_APPLY_SUCCESS:\n    case NgrxJsonApiActionTypes.API_APPLY_FAIL: {\n      // apply all the committed or failed changes\n      let /** @type {?} */ actions = /** @type {?} */(( action.payload as Array<Action>));\n      newZone = zone;\n      for (let /** @type {?} */ commitAction of actions) {\n        newZone = NgrxJsonApiZoneReducer(newZone, commitAction);\n      }\n      newZone = { ...newZone, isApplying: zone['isApplying'] - 1 };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_ROLLBACK: {\n      let /** @type {?} */ payload = ( /** @type {?} */((action as ApiRollbackAction))).payload;\n      newZone = {\n        ...zone,\n        data: rollbackStoreResources(zone.data, payload.ids, payload.include),\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.CLEAR_STORE: {\n      return initialNgrxJsonApiZone;\n    }\n    case NgrxJsonApiActionTypes.COMPACT_STORE: {\n      return compactStore(zone);\n    }\n    default:\n      return zone;\n  }\n}\n\nexport const /** @type {?} */ reducer = NgrxJsonApiStoreReducer;\n","import {InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\n\nimport { Store, StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { NgrxJsonApi } from './api';\nimport { NgrxJsonApiEffects } from './effects';\nimport { NgrxJsonApiService } from './services';\nimport { reducer } from './reducers';\nimport {\n  DenormaliseStoreResourcePipe,\n  GetDenormalisedValuePipe,\n  SelectStoreResourcePipe,\n} from './pipes';\n\nimport { NgrxJsonApiConfig } from './interfaces';\nimport {NgrxJsonApiSelectors} from './selectors';\n\nexport const /** @type {?} */ NGRX_JSON_API_CONFIG = new InjectionToken<NgrxJsonApiConfig>('NGRX_JSON_API_CONFIG');\n/**\n * @param {?} http\n * @param {?} config\n * @return {?}\n */\nexport function apiFactory(http: HttpClient, config: NgrxJsonApiConfig) {\n  return new NgrxJsonApi(http, config);\n}\n/**\n * Deprecated, do not use any longer\n * @return {?}\n */\nexport function selectorsFactory() {\n  return new NgrxJsonApiSelectors();\n}\n/**\n * @param {?} store\n * @param {?} config\n * @return {?}\n */\nexport function serviceFactory(\n  store: Store<any>,\n  config: NgrxJsonApiConfig\n) {\n  return new NgrxJsonApiService(store, config);\n}\n/**\n * @param {?} config\n * @return {?}\n */\nexport function configure(config: NgrxJsonApiConfig): Array<any> {\n  return [\n    {\n      provide: NgrxJsonApi,\n      useFactory: apiFactory,\n      deps: [HttpClient, NGRX_JSON_API_CONFIG],\n    },\n    {\n      provide: NgrxJsonApiSelectors,\n      useFactory: selectorsFactory,\n    },\n    {\n      provide: NgrxJsonApiService,\n      useFactory: serviceFactory,\n      deps: [Store, NGRX_JSON_API_CONFIG],\n    },\n    {\n      provide: NGRX_JSON_API_CONFIG,\n      useValue: config,\n    },\n  ];\n}\nexport class NgrxJsonApiModule {\n/**\n * @param {?} config\n * @return {?}\n */\nstatic configure(config: NgrxJsonApiConfig): ModuleWithProviders {\n    return {\n      ngModule: NgrxJsonApiModule,\n      providers: configure(config),\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    DenormaliseStoreResourcePipe,\n    GetDenormalisedValuePipe,\n    SelectStoreResourcePipe,\n  ],\n  imports: [\n    EffectsModule.forFeature([NgrxJsonApiEffects]),\n    StoreModule.forFeature('NgrxJsonApi', reducer, {}),\n  ],\n  exports: [\n    DenormaliseStoreResourcePipe,\n    GetDenormalisedValuePipe,\n    SelectStoreResourcePipe,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgrxJsonApiModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgrxJsonApiModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Observable } from 'rxjs/Observable';\nimport { AnonymousSubscription } from 'rxjs/Subscription';\n\nexport const /** @type {?} */ NGRX_JSON_API_DEFAULT_ZONE = 'default';\nexport type Direction = number;\nexport let Direction: any = {};\nDirection.ASC = 0;\nDirection.DESC = 1;\nDirection[Direction.ASC] = \"ASC\";\nDirection[Direction.DESC] = \"DESC\";\n\n\nexport interface Document {\n  data?: any;\n  included?: any;\n  meta?: any;\n  links?: any;\n  errors?: Array<ResourceError>;\n}\n\nexport interface FilteringParam {\n  path?: string;\n  operator?: string;\n  value?: any;\n}\n\nexport interface FilteringOperator {\n  name: string;\n  apiName?: string;\n  comparison: (value: any, resourceFieldValue: any) => boolean;\n}\n\nexport interface ManyResourceRelationship {\n  data?: Array<ResourceIdentifier>;\n  reference?: Array<StoreResource>;\n}\n\n/**\n * Used by code generators to navigate relationships in a type-safe manner.\n * See crnk.io for a first such generator.\n */\nexport interface TypedManyResourceRelationship<T extends StoreResource>\n  extends ManyResourceRelationship {\n  reference?: Array<T>;\n}\n\n/**\n * Used by code generators to navigate relationships in a type-safe manner.\n * See crnk.io for a first such generator.\n */\nexport interface TypedOneResourceRelationship<T extends StoreResource>\n  extends OneResourceRelationship {\n  reference?: T;\n}\n\nexport interface NgrxJsonApiConfig {\n  apiUrl: string;\n  initialState?: any;\n  resourceDefinitions?: Array<ResourceDefinition>;\n  urlBuilder?: NgrxJsonApiUrlBuilder;\n  filteringConfig?: NgrxJsonApiFilteringConfig;\n\n  /**\n   * Allows to disable the apply action and replace it with a custom one. For example\n   * have a look at www.crnk.io that makes use of JSON PATCH to perform bulk updates.\n   */\n  applyEnabled?: boolean;\n}\n\nexport interface NgrxJsonApiState {\n  zones: NgrxJsonApiZones\n}\n\nexport interface NgrxJsonApiZones {\n  [id: string]: NgrxJsonApiZone;\n}\n\n/**\n * deprecated, mae use of NgrxJsonApiZone instead\n */\nexport interface NgrxJsonApiStore {\n  data: NgrxJsonApiStoreData;\n  queries: NgrxJsonApiStoreQueries;\n  isCreating: number;\n  isReading: number;\n  isUpdating: number;\n  isDeleting: number;\n  isApplying: number;\n}\n\nexport interface NgrxJsonApiZone extends NgrxJsonApiStore{\n\n}\n\nexport interface NgrxJsonApiStoreData {\n  [id: string]: NgrxJsonApiStoreResources;\n}\n\nexport interface NgrxJsonApiStoreQueries {\n  [id: string]: StoreQuery;\n}\n\nexport interface NgrxJsonApiStoreResources {\n  [id: string]: StoreResource;\n}\n\nexport interface NgrxJsonApiFilteringConfig {\n  pathSeparator?: string;\n  filteringOperators?: Array<FilteringOperator>;\n}\n\nexport interface NgrxJsonApiUrlBuilder {\n  generateFilteringQueryParams?: (params: Array<FilteringParam>) => string;\n  generateFieldsQueryParams?: (params: Array<string>) => string;\n  generateIncludedQueryParams?: (params: Array<string>) => string;\n  generateSortingQueryParams?: (params: Array<SortingParam>) => string;\n  generateQueryParams?: (...params: Array<string>) => string;\n}\n\nexport type OperationType = 'GET' | 'DELETE' | 'PATCH' | 'POST' | false;\n\nexport interface OneResourceRelationship {\n  data?: ResourceIdentifier;\n  reference?: StoreResource;\n}\n\nexport type ErrorModificationType = 'ADD' | 'REMOVE' | 'SET';\n\nexport interface ModifyStoreResourceErrorsPayload {\n  resourceId: ResourceIdentifier;\n  errors: Array<ResourceError>;\n  modificationType: ErrorModificationType;\n}\n\nexport interface Payload {\n  jsonApiData?: Document;\n  query?: Query;\n}\n\nexport interface Query {\n  queryId?: string;\n  type?: string;\n  id?: string;\n  params?: QueryParams;\n}\n\nexport interface QueryParams {\n  filtering?: Array<FilteringParam>;\n  sorting?: Array<SortingParam>;\n  include?: Array<string>;\n  fields?: Array<string>;\n  offset?: number;\n  limit?: number;\n}\n\nexport interface Resource extends ResourceIdentifier {\n  attributes?: { [key: string]: any };\n  relationships?: { [key: string]: ResourceRelationship };\n  meta?: any;\n  links?: any;\n}\n\nexport interface ResourceAttributeDefinition {\n  apiName?: string;\n}\n\nexport interface ResourceDefinition {\n  type: string;\n  collectionPath: string;\n  attributes?: { [key: string]: ResourceAttributeDefinition };\n  relationships?: { [key: string]: ResourceRelationDefinition };\n}\n\nexport interface ResourceError {\n  id?: string;\n  links?: any;\n  status?: string;\n  code?: string;\n  title?: string;\n  detail?: string;\n  source?: ResourceErrorSource;\n  meta?: any;\n}\n\nexport interface ResourceErrorSource {\n  pointer?: string;\n  parameter?: string;\n}\n\nexport interface ResourceIdentifier {\n  type: string;\n  id: string;\n}\n\nexport interface ResourceRelationship {\n  data?: any;\n  links?: any;\n  reference?: any;\n}\n\nexport interface ResourceRelationDefinition {\n  type: string;\n  relationType: ResourceRelationType;\n}\n\nexport type ResourceRelationType = 'hasOne' | 'hasMany';\n\nexport type ResourceState =\n  | 'NEW'\n  | 'IN_SYNC'\n  | 'CREATED'\n  | 'UPDATED'\n  | 'DELETED'\n  | 'NOT_LOADED';\n\nexport interface SortingParam {\n  api: string;\n  direction: Direction;\n}\n\nexport interface QueryResult extends StoreQuery {\n  data?: StoreResource | Array<StoreResource>;\n}\n\nexport interface ManyQueryResult extends QueryResult {\n  data?: Array<StoreResource>;\n}\n\nexport interface OneQueryResult extends QueryResult {\n  data?: StoreResource;\n}\n\nexport interface StoreQuery {\n  query: Query;\n  loading: Boolean;\n  resultIds?: Array<ResourceIdentifier>;\n  meta?: any;\n  links?: any;\n\n  /**\n   * Errors received from the server after attempting to perform a GET request.\n   */\n  errors: Array<ResourceError>;\n}\n\n/**\n* Container to hold a Resource in the store with state information.\n*/\nexport interface StoreResource extends Resource {\n  /**\n  * State of the resource to track local changes not yet\n  * published to the json api endpoint.\n  */\n  state?: ResourceState;\n  /**\n  * The original resource obtained from the server.\n  */\n  persistedResource?: Resource;\n  /**\n  * One of the operation types: reading, creating, updating or deleting.\n  */\n  loading?: OperationType;\n  /**\n  * Errors received from the server after attempting to store the resource.\n  */\n  errors?: Array<ResourceError>;\n\n  /**\n   * new resources may only obtain an id when posted to the server. Till that point\n   * a StoreResource can assign make use of a temporary id and signal this by setting\n   * this flag to true. The id will not be transmitted to the server and the resource\n   * is removed from its temporary location (given by its id) as soon as it is posted\n   * to the server.\n   */\n  hasTemporaryId?: boolean;\n}\n","import { Injectable } from '@angular/core';\n\nimport { Action } from '@ngrx/store';\n\nimport {\n  Payload,\n  Resource,\n  ResourceIdentifier,\n  Query,\n  ModifyStoreResourceErrorsPayload,\n} from './interfaces';\n\nexport const /** @type {?} */ NgrxJsonApiActionTypes = {\n  API_POST_INIT: '[NgrxJsonApi] API_POST_INIT',\n  API_POST_SUCCESS: '[NgrxJsonApi] API_POST_SUCCESS',\n  API_POST_FAIL: '[NgrxJsonApi] API_POST_FAIL',\n  API_GET_INIT: '[NgrxJsonApi] API_GET_INIT',\n  API_GET_SUCCESS: '[NgrxJsonApi] API_GET_SUCCESS',\n  API_GET_FAIL: '[NgrxJsonApi] API_GET_FAIL',\n  API_PATCH_INIT: '[NgrxJsonApi] API_PATCH_INIT',\n  API_PATCH_SUCCESS: '[NgrxJsonApi] API_PATCH_SUCCESS',\n  API_PATCH_FAIL: '[NgrxJsonApi] API_PATCH_FAIL',\n  API_DELETE_INIT: '[NgrxJsonApi] API_DELETE_INIT',\n  API_DELETE_SUCCESS: '[NgrxJsonApi] API_DELETE_SUCCESS',\n  API_DELETE_FAIL: '[NgrxJsonApi] API_DELETE_FAIL',\n  API_APPLY_INIT: '[NgrxJsonApi] API_APPLY_INIT',\n  API_APPLY_SUCCESS: '[NgrxJsonApi] API_APPLY_SUCCESS',\n  API_APPLY_FAIL: '[NgrxJsonApi] API_APPLY_FAIL',\n  API_ROLLBACK: '[NgrxJsonApi] API_ROLLBACK',\n  API_QUERY_REFRESH: '[NgrxJsonApi] API_QUERY_REFRESH',\n  LOCAL_QUERY_INIT: '[NgrxJsonApi] LOCAL_QUERY_INIT',\n  LOCAL_QUERY_SUCCESS: '[NgrxJsonApi] LOCAL_QUERY_SUCCESS',\n  LOCAL_QUERY_FAIL: '[NgrxJsonApi] LOCAL_QUERY_FAIL',\n  DELETE_STORE_RESOURCE: '[NgrxJsonApi] DELETE_STORE_RESOURCE',\n  PATCH_STORE_RESOURCE: '[NgrxJsonApi] PATCH_STORE_RESOURCE',\n  NEW_STORE_RESOURCE: '[NgrxJsonApi] NEW_STORE_RESOURCE',\n  POST_STORE_RESOURCE: '[NgrxJsonApi] POST_STORE_RESOURCE',\n  MODIFY_STORE_RESOURCE_ERRORS: '[NgrxJsonApi] MODIFY_STORE_RESOURCE_ERRORS',\n  REMOVE_QUERY: '[NgrxJsonApi] REMOVE_QUERY',\n  COMPACT_STORE: '[NgrxJsonApi] COMPACT_STORE',\n  CLEAR_STORE: '[NgrxJsonApi] CLEAR_STORE',\n};\n\nexport interface ApiApplyInitPayload {\n  /**\n   * optional list of resource identifiers to perform apply. If not specified all change will be applied\n   * to the backend.\n   */\n  ids?: Array<ResourceIdentifier>;\n\n  /**\n   * if the apply action is restricted to a set of resources with the ids parameter. The include flag allows to\n   * specify which relationships to apply as well. Nested relationships are separated by a dot.\n   */\n  include?: Array<string>;\n}\n\nexport interface ApiApplyRollbackPayload extends ApiApplyInitPayload {}\n/**\n * @abstract\n */\nexport abstract class NgrxJsonApiAction implements Action{\n  abstract zoneId?: string;\n  abstract type: string;\nconstructor(){\n  }\n}\n\nfunction NgrxJsonApiAction_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiAction.prototype.zoneId;\n/** @type {?} */\nNgrxJsonApiAction.prototype.type;\n}\n\nexport class ApiApplyInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_INIT;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: ApiApplyInitPayload,\npublic zoneId: string) {\n    super();\n  }\n}\n\nfunction ApiApplyInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplyInitAction.prototype.type;\n/** @type {?} */\nApiApplyInitAction.prototype.payload;\n/** @type {?} */\nApiApplyInitAction.prototype.zoneId;\n}\n\nexport class ApiApplySuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_SUCCESS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Array<Action>,\npublic zoneId: string) {super();}\n}\n\nfunction ApiApplySuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplySuccessAction.prototype.type;\n/** @type {?} */\nApiApplySuccessAction.prototype.payload;\n/** @type {?} */\nApiApplySuccessAction.prototype.zoneId;\n}\n\nexport class ApiApplyFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_FAIL;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Array<Action>,\npublic zoneId: string) {super();}\n}\n\nfunction ApiApplyFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiApplyFailAction.prototype.type;\n/** @type {?} */\nApiApplyFailAction.prototype.payload;\n/** @type {?} */\nApiApplyFailAction.prototype.zoneId;\n}\n\nexport class ApiPostInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_POST_INIT;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Resource,\npublic zoneId: string) {super();}\n}\n\nfunction ApiPostInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostInitAction.prototype.type;\n/** @type {?} */\nApiPostInitAction.prototype.payload;\n/** @type {?} */\nApiPostInitAction.prototype.zoneId;\n}\n\nexport class ApiPostSuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_POST_SUCCESS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiPostSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostSuccessAction.prototype.type;\n/** @type {?} */\nApiPostSuccessAction.prototype.payload;\n/** @type {?} */\nApiPostSuccessAction.prototype.zoneId;\n}\n\nexport class ApiPostFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_POST_FAIL;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiPostFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPostFailAction.prototype.type;\n/** @type {?} */\nApiPostFailAction.prototype.payload;\n/** @type {?} */\nApiPostFailAction.prototype.zoneId;\n}\n\nexport class ApiDeleteInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_INIT;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: ResourceIdentifier,\npublic zoneId: string) {super();}\n}\n\nfunction ApiDeleteInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteInitAction.prototype.type;\n/** @type {?} */\nApiDeleteInitAction.prototype.payload;\n/** @type {?} */\nApiDeleteInitAction.prototype.zoneId;\n}\n\nexport class ApiDeleteSuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_SUCCESS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiDeleteSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteSuccessAction.prototype.type;\n/** @type {?} */\nApiDeleteSuccessAction.prototype.payload;\n/** @type {?} */\nApiDeleteSuccessAction.prototype.zoneId;\n}\n\nexport class ApiDeleteFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_FAIL;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiDeleteFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiDeleteFailAction.prototype.type;\n/** @type {?} */\nApiDeleteFailAction.prototype.payload;\n/** @type {?} */\nApiDeleteFailAction.prototype.zoneId;\n}\n\nexport class ApiGetInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_GET_INIT;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Query,\npublic zoneId: string) {super();}\n}\n\nfunction ApiGetInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetInitAction.prototype.type;\n/** @type {?} */\nApiGetInitAction.prototype.payload;\n/** @type {?} */\nApiGetInitAction.prototype.zoneId;\n}\n\nexport class ApiGetSuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_GET_SUCCESS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiGetSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetSuccessAction.prototype.type;\n/** @type {?} */\nApiGetSuccessAction.prototype.payload;\n/** @type {?} */\nApiGetSuccessAction.prototype.zoneId;\n}\n\nexport class ApiGetFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_GET_FAIL;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiGetFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiGetFailAction.prototype.type;\n/** @type {?} */\nApiGetFailAction.prototype.payload;\n/** @type {?} */\nApiGetFailAction.prototype.zoneId;\n}\n\nexport class ApiRollbackAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_ROLLBACK;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: ApiApplyRollbackPayload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiRollbackAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiRollbackAction.prototype.type;\n/** @type {?} */\nApiRollbackAction.prototype.payload;\n/** @type {?} */\nApiRollbackAction.prototype.zoneId;\n}\n\nexport class ApiPatchInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_INIT;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Resource,\npublic zoneId: string) {super();}\n}\n\nfunction ApiPatchInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchInitAction.prototype.type;\n/** @type {?} */\nApiPatchInitAction.prototype.payload;\n/** @type {?} */\nApiPatchInitAction.prototype.zoneId;\n}\n\nexport class ApiPatchSuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_SUCCESS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiPatchSuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchSuccessAction.prototype.type;\n/** @type {?} */\nApiPatchSuccessAction.prototype.payload;\n/** @type {?} */\nApiPatchSuccessAction.prototype.zoneId;\n}\n\nexport class ApiPatchFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_FAIL;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction ApiPatchFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiPatchFailAction.prototype.type;\n/** @type {?} */\nApiPatchFailAction.prototype.payload;\n/** @type {?} */\nApiPatchFailAction.prototype.zoneId;\n}\n\nexport class DeleteStoreResourceAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.DELETE_STORE_RESOURCE;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: ResourceIdentifier,\npublic zoneId: string) {super();}\n}\n\nfunction DeleteStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nDeleteStoreResourceAction.prototype.type;\n/** @type {?} */\nDeleteStoreResourceAction.prototype.payload;\n/** @type {?} */\nDeleteStoreResourceAction.prototype.zoneId;\n}\n\nexport class PatchStoreResourceAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.PATCH_STORE_RESOURCE;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Resource,\npublic zoneId: string) {super();}\n}\n\nfunction PatchStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nPatchStoreResourceAction.prototype.type;\n/** @type {?} */\nPatchStoreResourceAction.prototype.payload;\n/** @type {?} */\nPatchStoreResourceAction.prototype.zoneId;\n}\n\nexport class NewStoreResourceAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.NEW_STORE_RESOURCE;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Resource,\npublic zoneId: string) {super();}\n}\n\nfunction NewStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nNewStoreResourceAction.prototype.type;\n/** @type {?} */\nNewStoreResourceAction.prototype.payload;\n/** @type {?} */\nNewStoreResourceAction.prototype.zoneId;\n}\n\nexport class PostStoreResourceAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.POST_STORE_RESOURCE;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Resource,\npublic zoneId: string) {super();}\n}\n\nfunction PostStoreResourceAction_tsickle_Closure_declarations() {\n/** @type {?} */\nPostStoreResourceAction.prototype.type;\n/** @type {?} */\nPostStoreResourceAction.prototype.payload;\n/** @type {?} */\nPostStoreResourceAction.prototype.zoneId;\n}\n\nexport class RemoveQueryAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.REMOVE_QUERY;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: string,\npublic zoneId: string) {super();}\n}\n\nfunction RemoveQueryAction_tsickle_Closure_declarations() {\n/** @type {?} */\nRemoveQueryAction.prototype.type;\n/** @type {?} */\nRemoveQueryAction.prototype.payload;\n/** @type {?} */\nRemoveQueryAction.prototype.zoneId;\n}\n\nexport class LocalQueryInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_INIT;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Query,\npublic zoneId: string) {super();}\n}\n\nfunction LocalQueryInitAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQueryInitAction.prototype.type;\n/** @type {?} */\nLocalQueryInitAction.prototype.payload;\n/** @type {?} */\nLocalQueryInitAction.prototype.zoneId;\n}\n\nexport class LocalQuerySuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_SUCCESS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction LocalQuerySuccessAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQuerySuccessAction.prototype.type;\n/** @type {?} */\nLocalQuerySuccessAction.prototype.payload;\n/** @type {?} */\nLocalQuerySuccessAction.prototype.zoneId;\n}\n\nexport class LocalQueryFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_FAIL;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: Payload,\npublic zoneId: string) {super();}\n}\n\nfunction LocalQueryFailAction_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalQueryFailAction.prototype.type;\n/** @type {?} */\nLocalQueryFailAction.prototype.payload;\n/** @type {?} */\nLocalQueryFailAction.prototype.zoneId;\n}\n\nexport class CompactStoreAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.COMPACT_STORE;\n/**\n * @param {?} zoneId\n */\nconstructor(public zoneId: string) {super();}\n}\n\nfunction CompactStoreAction_tsickle_Closure_declarations() {\n/** @type {?} */\nCompactStoreAction.prototype.type;\n/** @type {?} */\nCompactStoreAction.prototype.zoneId;\n}\n\nexport class ClearStoreAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.CLEAR_STORE;\n/**\n * @param {?} zoneId\n */\nconstructor(public zoneId: string) {super();}\n}\n\nfunction ClearStoreAction_tsickle_Closure_declarations() {\n/** @type {?} */\nClearStoreAction.prototype.type;\n/** @type {?} */\nClearStoreAction.prototype.zoneId;\n}\n\nexport class ApiQueryRefreshAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_QUERY_REFRESH;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: string,\npublic zoneId: string) {\n    super();\n    if (!payload) {\n      throw new Error('no query id provided for ApiQueryRefreshAction');\n    }\n  }\n}\n\nfunction ApiQueryRefreshAction_tsickle_Closure_declarations() {\n/** @type {?} */\nApiQueryRefreshAction.prototype.type;\n/** @type {?} */\nApiQueryRefreshAction.prototype.payload;\n/** @type {?} */\nApiQueryRefreshAction.prototype.zoneId;\n}\n\nexport class ModifyStoreResourceErrorsAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.MODIFY_STORE_RESOURCE_ERRORS;\n/**\n * @param {?} payload\n * @param {?} zoneId\n */\nconstructor(public payload: ModifyStoreResourceErrorsPayload,\npublic zoneId: string) {super();}\n}\n\nfunction ModifyStoreResourceErrorsAction_tsickle_Closure_declarations() {\n/** @type {?} */\nModifyStoreResourceErrorsAction.prototype.type;\n/** @type {?} */\nModifyStoreResourceErrorsAction.prototype.payload;\n/** @type {?} */\nModifyStoreResourceErrorsAction.prototype.zoneId;\n}\n\n\nexport type NgrxJsonApiActions =\n  | ApiApplyInitAction\n  | ApiApplySuccessAction\n  | ApiApplyFailAction\n  | ApiPostInitAction\n  | ApiPostSuccessAction\n  | ApiPostFailAction\n  | ApiDeleteInitAction\n  | ApiDeleteSuccessAction\n  | ApiDeleteFailAction\n  | ApiGetInitAction\n  | ApiGetSuccessAction\n  | ApiGetFailAction\n  | ApiRollbackAction\n  | ApiPatchInitAction\n  | ApiPatchSuccessAction\n  | ApiPatchFailAction\n  | DeleteStoreResourceAction\n  | PatchStoreResourceAction\n  | PostStoreResourceAction\n  | NewStoreResourceAction\n  | RemoveQueryAction\n  | ApiQueryRefreshAction\n  | LocalQueryInitAction\n  | LocalQuerySuccessAction\n  | LocalQueryFailAction\n  | ModifyStoreResourceErrorsAction\n  | CompactStoreAction\n  | ClearStoreAction;\n","import * as _ from 'lodash/index';\n\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/finally';\n\nimport {Store} from '@ngrx/store';\n\nimport {\n  selectManyQueryResult, selectNgrxJsonApiDefaultZone, selectNgrxJsonApiZone,\n  selectOneQueryResult,\n  selectStoreResource\n} from './selectors';\nimport {\n  ApiApplyInitAction,\n  ApiDeleteInitAction,\n  ApiGetInitAction,\n  ApiPatchInitAction,\n  ApiPostInitAction,\n  ApiQueryRefreshAction,\n  ClearStoreAction,\n  CompactStoreAction,\n  DeleteStoreResourceAction,\n  LocalQueryInitAction,\n  ModifyStoreResourceErrorsAction,\n  NewStoreResourceAction,\n  PatchStoreResourceAction,\n  PostStoreResourceAction,\n  RemoveQueryAction,\n} from './actions';\nimport {\n  ManyQueryResult, NGRX_JSON_API_DEFAULT_ZONE, NgrxJsonApiConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  OneQueryResult,\n  Query,\n  QueryResult,\n  Resource,\n  ResourceError,\n  ResourceIdentifier,\n  StoreResource,\n} from './interfaces';\nimport {\n  denormaliseStoreResource,\n  denormaliseStoreResources,\n  getDenormalisedPath,\n  getDenormalisedValue,\n  uuid,\n} from './utils';\n\nexport interface FindOptions {\n  query: Query;\n  fromServer?: boolean;\n  denormalise?: boolean;\n}\n\nexport interface PutQueryOptions {\n  query: Query;\n  fromServer?: boolean;\n}\n\nexport interface PostResourceOptions {\n  resource: Resource;\n  toRemote?: boolean;\n}\n\nexport interface PatchResourceOptions {\n  resource: Resource;\n  toRemote?: boolean;\n}\n\nexport interface NewResourceOptions {\n  resource: Resource;\n}\n\nexport interface DeleteResourceOptions {\n  resourceId: ResourceIdentifier;\n  toRemote?: boolean;\n}\n\n/**\n * This internface is deprecated, do no longer use.\n */\nexport interface Options {\n  query?: Query;\n  denormalise?: boolean;\n  fromServer?: boolean;\n  resource?: Resource;\n  toRemote?: boolean;\n  resourceId?: ResourceIdentifier;\n}\n/**\n * Represents an isolated area in the store with its own set of resources and queries.\n * 'api' is the default zone that already historically has been put beneath NgrxJsonApi within the store.\n */\nexport class NgrxJsonApiZoneService {\n/**\n * @param {?} zoneId\n * @param {?} store\n */\nconstructor(protected zoneId: string, protected store: Store<any>) {\n  }\n/**\n * Adds the given query to the store. Any existing query with the same queryId is replaced.\n * Make use of selectResults(...) to fetch the data.\n * @param {?} options\n * @return {?}\n */\npublic putQuery(options: PutQueryOptions) {\n    let /** @type {?} */ query = options.query;\n    let /** @type {?} */ fromServer = _.isUndefined(options.fromServer)\n      ? true\n      : options.fromServer;\n\n    if (!query.queryId) {\n      throw new Error('to query must have a queryId');\n    }\n\n    if (fromServer) {\n      this.store.dispatch(new ApiGetInitAction(query, this.zoneId));\n    } else {\n      this.store.dispatch(new LocalQueryInitAction(query, this.zoneId));\n    }\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic refreshQuery(queryId: string) {\n    this.store.dispatch(new ApiQueryRefreshAction(queryId, this.zoneId));\n  }\n/**\n * @param {?} queryId\n * @return {?}\n */\npublic removeQuery(queryId: string) {\n    this.store.dispatch(new RemoveQueryAction(queryId, this.zoneId));\n  }\n/**\n * Selects the data of the given query.\n * \n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?} observable holding the data as array of resources.\n */\npublic selectManyResults(queryId: string, denormalize = false): Observable<ManyQueryResult> {\n    return this.store.let(selectNgrxJsonApiZone(this.zoneId)).let(selectManyQueryResult(queryId, denormalize));\n  }\n/**\n * Selects the data of the given query.\n * \n * @param {?} queryId\n * @param {?=} denormalize\n * @return {?} observable holding the data as array of resources.\n */\npublic selectOneResults(queryId: string, denormalize = false): Observable<OneQueryResult> {\n    return this.store.let(selectNgrxJsonApiZone(this.zoneId)).let(selectOneQueryResult(queryId, denormalize));\n  }\n/**\n * @param {?} identifier of the resource\n * @return {?} observable of the resource\n */\npublic selectStoreResource(identifier: ResourceIdentifier): Observable<StoreResource> {\n    return this.store.let(selectNgrxJsonApiZone(this.zoneId)).let(selectStoreResource(identifier));\n  }\n/**\n * Updates the given resource in the store with the provided data.\n * Use commit() to send the changes to the remote JSON API endpoint.\n * \n * @param {?} options\n * @return {?}\n */\npublic patchResource(options: PatchResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiPatchInitAction(resource, this.zoneId));\n    } else {\n      this.store.dispatch(new PatchStoreResourceAction(resource, this.zoneId));\n    }\n  }\n/**\n * Creates a new resources that is hold locally in the store\n * and my later be posted.\n * \n * @param {?} options\n * @return {?}\n */\npublic newResource(options: NewResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    this.store.dispatch(new NewStoreResourceAction(resource, this.zoneId));\n  }\n/**\n * Adds the given resource to the store. Any already existing\n * resource with the same id gets replaced. Use commit() to send\n * the changes to the remote JSON API endpoint.\n * \n * @param {?} options\n * @return {?}\n */\npublic postResource(options: PostResourceOptions) {\n    let /** @type {?} */ resource = options.resource;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiPostInitAction(resource, this.zoneId));\n    } else {\n      this.store.dispatch(new PostStoreResourceAction(resource, this.zoneId));\n    }\n  }\n/**\n * Marks the given resource for deletion.\n * \n * @param {?} options\n * @return {?}\n */\npublic deleteResource(options: DeleteResourceOptions) {\n    let /** @type {?} */ resourceId = options.resourceId;\n    let /** @type {?} */ toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiDeleteInitAction(resourceId, this.zoneId));\n    } else {\n      this.store.dispatch(new DeleteStoreResourceAction(resourceId, this.zoneId));\n    }\n  }\n/**\n * Applies all pending changes to the remote JSON API endpoint.\n * @return {?}\n */\npublic apply() {\n    this.store.dispatch(new ApiApplyInitAction({}, this.zoneId));\n  }\n/**\n * Clear all the contents from the store.\n * @return {?}\n */\npublic clear() {\n    this.store.dispatch(new ClearStoreAction(this.zoneId));\n  }\n/**\n * Compacts the store by removing unreferences and unchanges resources.\n * @return {?}\n */\npublic compact() {\n    this.store.dispatch(new CompactStoreAction(this.zoneId));\n  }\n/**\n * Adds the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic addResourceErrors(id: ResourceIdentifier,\n                           errors: Array<ResourceError>) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'ADD',\n      }, this.zoneId)\n    );\n  }\n/**\n * Removes the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic removeResourceErrors(id: ResourceIdentifier,\n                              errors: Array<ResourceError>) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'REMOVE',\n      }, this.zoneId)\n    );\n  }\n/**\n * Sets the given errors to the resource with the given id.\n * @param {?} id\n * @param {?} errors\n * @return {?}\n */\npublic setResourceErrors(id: ResourceIdentifier,\n                           errors: Array<ResourceError>) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction({\n        resourceId: id,\n        errors: errors,\n        modificationType: 'SET',\n      }, this.zoneId)\n    );\n  }\n\n}\n\nfunction NgrxJsonApiZoneService_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiZoneService.prototype.zoneId;\n/** @type {?} */\nNgrxJsonApiZoneService.prototype.store;\n}\n\nexport class NgrxJsonApiService extends NgrxJsonApiZoneService {\nprivate test = true;\n/**\n * Keeps current snapshot of the store to allow fast access to resources.\n */\nprivate _storeSnapshot: NgrxJsonApiStore;\n/**\n * @param {?} store\n * @param {?} config\n */\nconstructor(store: Store<any>,\nprivate config: NgrxJsonApiConfig) {\n    super(NGRX_JSON_API_DEFAULT_ZONE, store);\n  }\n/**\n * @return {?}\n */\npublic getDefaultZone(): NgrxJsonApiZoneService{\n    return this;\n  }\n/**\n * @param {?} zoneId\n * @return {?}\n */\npublic getZone(zoneId: string): NgrxJsonApiZoneService{\n    return new NgrxJsonApiZoneService(zoneId, this.store);\n  }\n/**\n * @param {?} options\n * @return {?}\n */\npublic findOne(options: FindOptions): Observable<OneQueryResult> {\n    return /** @type {?} */(( <Observable<OneQueryResult>>this.findInternal(options, false)));\n  }\n/**\n * @param {?} options\n * @return {?}\n */\npublic findMany(options: FindOptions): Observable<ManyQueryResult> {\n    return /** @type {?} */(( <Observable<ManyQueryResult>>this.findInternal(options, true)));\n  }\n/**\n * @return {?}\n */\npublic get storeSnapshot() {\n    if (!this._storeSnapshot) {\n      this.store\n        .let(selectNgrxJsonApiDefaultZone())\n        .subscribe(it => (this._storeSnapshot = /** @type {?} */(( it as NgrxJsonApiStore))));\n\n      if (!this._storeSnapshot) {\n        throw new Error('failed to initialize store snapshot');\n      }\n    }\n    return this._storeSnapshot;\n  }\n/**\n * @param {?} options\n * @param {?} multi\n * @return {?}\n */\nprivate findInternal(options: FindOptions,\n                       multi: boolean): Observable<QueryResult> {\n    let /** @type {?} */ query = options.query;\n    let /** @type {?} */ fromServer = _.isUndefined(options.fromServer)\n      ? true\n      : options.fromServer;\n    let /** @type {?} */ denormalise = _.isUndefined(options.denormalise)\n      ? false\n      : options.denormalise;\n\n    let /** @type {?} */ newQuery: Query;\n    if (!query.queryId) {\n      newQuery = {...query, queryId: this.uuid()};\n    } else {\n      newQuery = query;\n    }\n\n    this.putQuery({query: newQuery, fromServer});\n    let /** @type {?} */ queryResult$: Observable<QueryResult>;\n    if (multi) {\n      queryResult$ = this.selectManyResults(newQuery.queryId, denormalise);\n    } else {\n      queryResult$ = this.selectOneResults(newQuery.queryId, denormalise);\n    }\n    return /** @type {?} */(( <Observable<QueryResult>>queryResult$.finally(() =>\n      this.removeQuery(newQuery.queryId)\n    )));\n  }\n/**\n * @return {?}\n */\nprivate uuid() {\n    return uuid();\n  }\n/**\n * Gets the current persisted state of the given resources.\n * Consider the use of selectResource(...) to get an observable of the resource.\n * \n * @param {?} identifier\n * @return {?}\n */\npublic getPersistedResourceSnapshot(identifier: ResourceIdentifier) {\n    let /** @type {?} */ snapshot = this.storeSnapshot;\n    if (\n      snapshot.data[identifier.type] &&\n      snapshot.data[identifier.type][identifier.id]\n    ) {\n      return snapshot.data[identifier.type][identifier.id].persistedResource;\n    }\n    return null;\n  }\n/**\n * Gets the current state of the given resources in the store.\n * Consider the use of selectResource(...) to get an observable of the resource.\n * \n * @param {?} identifier\n * @return {?}\n */\npublic getResourceSnapshot(identifier: ResourceIdentifier) {\n    let /** @type {?} */ snapshot = this.storeSnapshot;\n    if (\n      snapshot.data[identifier.type] &&\n      snapshot.data[identifier.type][identifier.id]\n    ) {\n      return snapshot.data[identifier.type][identifier.id];\n    }\n    return null;\n  }\n/**\n * @param {?} storeResource$\n * @return {?}\n */\npublic denormaliseResource(storeResource$: Observable<StoreResource> | Observable<StoreResource[]>): Observable<StoreResource> | Observable<StoreResource[]> {\n    return /** @type {?} */(( <\n      | Observable<StoreResource>\n      | Observable<StoreResource[]>>storeResource$.combineLatest(\n      this.store\n        .let(selectNgrxJsonApiZone(this.zoneId))\n        .map(state => state.data),\n      (storeResource: StoreResource | StoreResource[],\n       storeData: NgrxJsonApiStoreData) => {\n        if (_.isArray(storeResource)) {\n          return denormaliseStoreResources( /** @type {?} */((\n            storeResource as Array<StoreResource>)),\n            storeData\n          );\n        } else {\n          let /** @type {?} */ resource = /** @type {?} */(( storeResource as StoreResource));\n          return /** @type {?} */(( denormaliseStoreResource(resource, storeData) as StoreResource));\n        }\n      }\n    )));\n  }\n/**\n * @param {?} path\n * @param {?} resourceType\n * @return {?}\n */\npublic getDenormalisedPath(path: string, resourceType: string): string {\n    let /** @type {?} */ pathSeparator = /** @type {?} */(( _.get(\n      this.config,\n      'filteringConfig.pathSeparator'\n    ) as string));\n    return getDenormalisedPath(\n      path,\n      resourceType,\n      this.config.resourceDefinitions,\n      pathSeparator\n    );\n  }\n/**\n * @param {?} path\n * @param {?} storeResource\n * @return {?}\n */\npublic getDenormalisedValue(path: string, storeResource: StoreResource): any {\n    let /** @type {?} */ pathSeparator = /** @type {?} */(( _.get(\n      this.config,\n      'filteringConfig.pathSeparator'\n    ) as string));\n    return getDenormalisedValue(\n      path,\n      storeResource,\n      this.config.resourceDefinitions,\n      pathSeparator\n    );\n  }\n\n\n}\n\nfunction NgrxJsonApiService_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiService.prototype.test;\n/**\n * Keeps current snapshot of the store to allow fast access to resources.\n * @type {?}\n */\nNgrxJsonApiService.prototype._storeSnapshot;\n/** @type {?} */\nNgrxJsonApiService.prototype.config;\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/let';\n\nimport { NgrxJsonApiService } from './services';\nimport { Resource, ResourceIdentifier, StoreResource } from './interfaces';\nexport class SelectStoreResourcePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} id\n * @return {?}\n */\ntransform(id: ResourceIdentifier): Observable<StoreResource> {\n    return this.service.selectStoreResource(id);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'jaSelectStoreResource' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction SelectStoreResourcePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectStoreResourcePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectStoreResourcePipe.ctorParameters;\n/** @type {?} */\nSelectStoreResourcePipe.prototype.service;\n}\n\nexport class DenormaliseStoreResourcePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} obs\n * @return {?}\n */\ntransform(\n    obs: Observable<StoreResource> | Observable<StoreResource[]>\n  ): Observable<StoreResource> | Observable<StoreResource[]> {\n    return this.service.denormaliseResource(obs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'denormaliseStoreResource' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction DenormaliseStoreResourcePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDenormaliseStoreResourcePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDenormaliseStoreResourcePipe.ctorParameters;\n/** @type {?} */\nDenormaliseStoreResourcePipe.prototype.service;\n}\n\nexport class GetDenormalisedValuePipe implements PipeTransform {\n/**\n * @param {?} service\n */\nconstructor(private service: NgrxJsonApiService) {}\n/**\n * @param {?} path\n * @param {?} storeResource\n * @return {?}\n */\ntransform(path: string, storeResource: StoreResource): any {\n    return this.service.getDenormalisedValue(path, storeResource);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'getDenormalisedValue' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgrxJsonApiService, },\n];\n}\n\nfunction GetDenormalisedValuePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nGetDenormalisedValuePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGetDenormalisedValuePipe.ctorParameters;\n/** @type {?} */\nGetDenormalisedValuePipe.prototype.service;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import * as _ from 'lodash/index';\n\nimport {\n  HttpHeaders,\n  HttpClient,\n  HttpRequest,\n  // required for building\n  HttpHeaderResponse,\n  HttpProgressEvent,\n  HttpResponse,\n  HttpSentEvent,\n  HttpUserEvent,\n} from '@angular/common/http';\n\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/observable/throw';\n\nimport {\n  Document,\n  NgrxJsonApiConfig,\n  OperationType,\n  ResourceDefinition,\n  Query,\n  QueryParams,\n} from './interfaces';\nimport {\n  generateIncludedQueryParams,\n  generateFieldsQueryParams,\n  generateFilteringQueryParams,\n  generateSortingQueryParams,\n  generateQueryParams,\n} from './utils';\nexport class NgrxJsonApi {\npublic headers: HttpHeaders = new HttpHeaders({\n    'Content-Type': 'application/vnd.api+json',\n    Accept: 'application/vnd.api+json',\n  });\npublic requestUrl: string;\npublic definitions = this.config.resourceDefinitions;\n/**\n * @param {?} http\n * @param {?} config\n */\nconstructor(private http: HttpClient,\npublic config: NgrxJsonApiConfig) {}\n/**\n * @param {?} query\n * @param {?} operation\n * @return {?}\n */\nprivate urlBuilder(query: Query, operation: OperationType) {\n    switch (operation) {\n      case 'GET': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        } else if (query.type) {\n          return this.collectionUrlFor(query.type);\n        }\n      }\n      case 'DELETE': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        }\n      }\n      case 'PATCH': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        }\n      }\n      case 'POST': {\n        return this.collectionUrlFor(query.type);\n      }\n    }\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate collectionPathFor(type: string) {\n    // assume that type == collectionPath if not configured otherwise\n    let /** @type {?} */ definition = _.find(this.definitions, { type: type });\n    if (definition) {\n      return `${definition.collectionPath}`;\n    } else {\n      return type;\n    }\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate collectionUrlFor(type: string) {\n    let /** @type {?} */ collectionPath = this.collectionPathFor(type);\n    return `${this.config.apiUrl}/${collectionPath}`;\n  }\n/**\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nprivate resourcePathFor(type: string, id: string) {\n    let /** @type {?} */ collectionPath = this.collectionPathFor(type);\n    return `${collectionPath}/${encodeURIComponent(id)}`;\n  }\n/**\n * @param {?} type\n * @param {?} id\n * @return {?}\n */\nprivate resourceUrlFor(type: string, id: string) {\n    let /** @type {?} */ resourcePath = this.resourcePathFor(type, id);\n    return `${this.config.apiUrl}/${resourcePath}`;\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic find(query: Query) {\n    let /** @type {?} */ _generateIncludedQueryParams = generateIncludedQueryParams;\n    let /** @type {?} */ _generateFilteringQueryParams = generateFilteringQueryParams;\n    let /** @type {?} */ _generateFieldsQueryParams = generateFieldsQueryParams;\n    let /** @type {?} */ _generateSortingQueryParams = generateSortingQueryParams;\n    let /** @type {?} */ _generateQueryParams = generateQueryParams;\n\n    if (this.config.hasOwnProperty('urlBuilder')) {\n      let /** @type {?} */ urlBuilder = this.config.urlBuilder;\n\n      if (urlBuilder.generateIncludedQueryParams) {\n        _generateIncludedQueryParams = urlBuilder.generateIncludedQueryParams;\n      }\n      if (urlBuilder.generateFilteringQueryParams) {\n        _generateFilteringQueryParams = urlBuilder.generateFilteringQueryParams;\n      }\n      if (urlBuilder.generateFieldsQueryParams) {\n        _generateFieldsQueryParams = urlBuilder.generateFieldsQueryParams;\n      }\n      if (urlBuilder.generateSortingQueryParams) {\n        _generateSortingQueryParams = urlBuilder.generateSortingQueryParams;\n      }\n      if (urlBuilder.generateQueryParams) {\n        _generateQueryParams = urlBuilder.generateQueryParams;\n      }\n    }\n\n    let /** @type {?} */ queryParams = '';\n    let /** @type {?} */ includedParam = '';\n    let /** @type {?} */ filteringParams = '';\n    let /** @type {?} */ sortingParams = '';\n    let /** @type {?} */ fieldsParams = '';\n    let /** @type {?} */ offsetParams = '';\n    let /** @type {?} */ limitParams = '';\n\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (query.hasOwnProperty('params') && !_.isEmpty(query.params)) {\n      if (_.hasIn(query.params, 'include')) {\n        includedParam = _generateIncludedQueryParams(query.params.include);\n      }\n      if (_.hasIn(query.params, 'filtering')) {\n        filteringParams = _generateFilteringQueryParams(query.params.filtering);\n      }\n      if (_.hasIn(query.params, 'sorting')) {\n        sortingParams = _generateSortingQueryParams(query.params.sorting);\n      }\n      if (_.hasIn(query.params, 'fields')) {\n        fieldsParams = _generateFieldsQueryParams(query.params.fields);\n      }\n      if (_.hasIn(query.params, 'limit')) {\n        limitParams = 'page[limit]=' + query.params.limit;\n      }\n      if (_.hasIn(query.params, 'offset')) {\n        offsetParams = 'page[offset]=' + query.params.offset;\n      }\n    }\n    queryParams = _generateQueryParams(\n      includedParam,\n      filteringParams,\n      sortingParams,\n      fieldsParams,\n      offsetParams,\n      limitParams\n    );\n\n    let /** @type {?} */ requestOptions = {\n      method: 'GET',\n      url: this.urlBuilder(query, 'GET') + queryParams,\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @param {?} document\n * @return {?}\n */\npublic create(query: Query, document: Document) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (typeof document === undefined) {\n      return Observable.throw('Data not found');\n    }\n\n    let /** @type {?} */ requestOptions = {\n      method: 'POST',\n      url: this.urlBuilder(query, 'POST'),\n      body: JSON.stringify({ data: document.data }),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @param {?} document\n * @return {?}\n */\npublic update(query: Query, document: Document) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (typeof document === undefined) {\n      return Observable.throw('Data not found');\n    }\n    let /** @type {?} */ requestOptions = {\n      method: 'PATCH',\n      url: this.urlBuilder(query, 'PATCH'),\n      body: JSON.stringify({ data: document.data }),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} query\n * @return {?}\n */\npublic delete(query: Query) {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    let /** @type {?} */ requestOptions = {\n      method: 'DELETE',\n      url: this.urlBuilder(query, 'DELETE'),\n    };\n\n    return this.request(requestOptions);\n  }\n/**\n * @param {?} requestOptions\n * @return {?}\n */\nprivate request(requestOptions: any) {\n    let /** @type {?} */ request: HttpRequest<any>;\n    let /** @type {?} */ newRequestOptions = {\n      ...requestOptions,\n      headers: this.headers,\n      observe: 'response',\n    };\n\n    if (requestOptions.method === 'GET') {\n      let { method, url, ...init } = newRequestOptions;\n      return this.http.get(url, init);\n    } else if (requestOptions.method === 'POST') {\n      let { method, url, body, ...init } = newRequestOptions;\n      return this.http.post(url, body, init);\n    } else if (requestOptions.method === 'PATCH') {\n      let { method, url, body, ...init } = newRequestOptions;\n      return this.http.patch(url, body, init);\n    } else if (requestOptions.method === 'DELETE') {\n      let { method, url, ...init } = newRequestOptions;\n      return this.http.delete(url, init);\n    }\n  }\n}\n\nfunction NgrxJsonApi_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApi.prototype.headers;\n/** @type {?} */\nNgrxJsonApi.prototype.requestUrl;\n/** @type {?} */\nNgrxJsonApi.prototype.definitions;\n/** @type {?} */\nNgrxJsonApi.prototype.http;\n/** @type {?} */\nNgrxJsonApi.prototype.config;\n}\n\n","import {Injectable, OnDestroy} from '@angular/core';\n\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\n\nimport * as _ from 'lodash/index';\n\nimport {Action, Store} from '@ngrx/store';\nimport {Actions, Effect} from '@ngrx/effects';\n\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/concatAll';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/mapTo';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/switchMapTo';\nimport'rxjs/add/operator/take';\nimport'rxjs/add/operator/toArray';\nimport'rxjs/add/operator/withLatestFrom';\nimport'rxjs/add/operator/takeWhile';\nimport'rxjs/add/operator/takeUntil';\n\nimport {\n  ApiApplyFailAction,\n  ApiApplyInitAction,\n  ApiApplySuccessAction,\n  ApiDeleteFailAction,\n  ApiDeleteInitAction,\n  ApiDeleteSuccessAction,\n  ApiGetFailAction,\n  ApiGetInitAction,\n  ApiGetSuccessAction,\n  ApiPatchFailAction,\n  ApiPatchInitAction,\n  ApiPatchSuccessAction,\n  ApiPostFailAction,\n  ApiPostInitAction,\n  ApiPostSuccessAction,\n  ApiQueryRefreshAction,\n  LocalQueryFailAction,\n  LocalQueryInitAction,\n  LocalQuerySuccessAction,\n  NgrxJsonApiActionTypes,\n} from './actions';\nimport {NgrxJsonApi} from './api';\nimport {\n  getNgrxJsonApiZone, selectNgrxJsonApiZone, selectStoreResource,\n  selectStoreResourcesOfType\n} from './selectors';\nimport {\n  NgrxJsonApiConfig,\n  NgrxJsonApiStore, NgrxJsonApiStoreData, NgrxJsonApiStoreResources, OperationType, Payload, Query, Resource,\n  ResourceError,\n  StoreResource,\n} from './interfaces';\nimport {generatePayload, getPendingChanges, sortPendingChanges,filterResources} from './utils';\nexport class NgrxJsonApiEffects implements OnDestroy {\n  @Effect()\n  createResource$: Observable<Action> = this.actions$\n    .ofType<ApiPostInitAction>(NgrxJsonApiActionTypes.API_POST_INIT)\n    .mergeMap((action: ApiPostInitAction) => {\n      const /** @type {?} */ payload = this.generatePayload(action.payload, 'POST');\n      return this.jsonApi\n        .create(payload.query, payload.jsonApiData)\n        .map(\n          (response: HttpResponse<any>) =>\n            new ApiPostSuccessAction({\n              jsonApiData: response.body,\n              query: payload.query,\n            }, action.zoneId)\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiPostFailAction(this.toErrorPayload(payload.query, error), action.zoneId)\n          )\n        );\n    });\n\n  @Effect()\n  updateResource$ = this.actions$\n    .ofType<ApiPatchInitAction>(NgrxJsonApiActionTypes.API_PATCH_INIT)\n    .mergeMap((action: ApiPatchInitAction) => {\n      const /** @type {?} */ payload = this.generatePayload(action.payload, 'PATCH');\n      return this.jsonApi\n        .update(payload.query, payload.jsonApiData)\n        .map(\n          (response: HttpResponse<any>) =>\n            new ApiPatchSuccessAction({\n              jsonApiData: response.body,\n              query: payload.query,\n            }, action.zoneId)\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiPatchFailAction(this.toErrorPayload(payload.query, error), action.zoneId)\n          )\n        );\n    });\n\n  @Effect()\n  readResource$ = this.actions$\n    .ofType<ApiGetInitAction>(NgrxJsonApiActionTypes.API_GET_INIT)\n    .mergeMap((action: ApiGetInitAction) => {\n      const /** @type {?} */ query = action.payload;\n      return this.jsonApi\n        .find(query)\n        .map((response: HttpResponse<any>) => response.body)\n        .map(\n          data =>\n            new ApiGetSuccessAction({\n              jsonApiData: data,\n              query: query,\n            }, action.zoneId)\n        )\n        .catch(error =>\n          Observable.of(new ApiGetFailAction(this.toErrorPayload(query, error), action.zoneId))\n        );\n    });\n/**\n * @param {?} query\n * @return {?}\n */\nprivate localQueryInitEventFor(query: Query) {\n    return this.actions$\n      .ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.LOCAL_QUERY_INIT)\n      .map(action => /** @type {?} */(( action as LocalQueryInitAction)))\n      .filter(action => query.queryId == action.payload.queryId);\n  }\n/**\n * @param {?} query\n * @return {?}\n */\nprivate removeQueryEventFor(query: Query) {\n    return this.actions$\n      .ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.REMOVE_QUERY)\n      .map(action => /** @type {?} */(( action as LocalQueryInitAction)))\n      .filter(action => query.queryId == action.payload);\n  }\n\n  @Effect()\n  queryStore$ = this.actions$\n    .ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.LOCAL_QUERY_INIT)\n    .mergeMap((action: LocalQueryInitAction) => {\n      const /** @type {?} */ query = action.payload;\n      return this.store\n        .let(selectNgrxJsonApiZone(action.zoneId))\n        .let(this.executeLocalQuery(query))\n        .map(\n          results =>\n            new LocalQuerySuccessAction({\n              jsonApiData: { data: results },\n              query: query,\n            }, action.zoneId)\n        )\n        .catch(error =>\n          Observable.of(\n            new LocalQueryFailAction(this.toErrorPayload(query, error), action.zoneId)\n          )\n        )\n        .takeUntil(this.localQueryInitEventFor(query))\n        .takeUntil(this.removeQueryEventFor(query));\n    });\n/**\n * @param {?} query\n * @return {?}\n */\nprivate executeLocalQuery(query: Query) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      let /** @type {?} */ selected$: Observable<any>;\n      if (!query.type) {\n        return state$.map(() => Observable.throw('Unknown query'));\n      } else if (query.type && query.id) {\n        selected$ = state$.let(\n          selectStoreResource({ type: query.type, id: query.id })\n        );\n      } else {\n        selected$ = state$\n          .let(selectStoreResourcesOfType(query.type))\n          .combineLatest(\n            state$.map(it => it.data),\n            (\n              resources: NgrxJsonApiStoreResources,\n              storeData: NgrxJsonApiStoreData\n            ) =>\n              filterResources(\n                resources,\n                storeData,\n                query,\n                this.config.resourceDefinitions,\n                this.config.filteringConfig\n              )\n          );\n      }\n      return selected$.distinctUntilChanged();\n    };\n  }\n\n  @Effect()\n  deleteResource$ = this.actions$\n    .ofType<ApiDeleteInitAction>(NgrxJsonApiActionTypes.API_DELETE_INIT)\n    .mergeMap((action: ApiDeleteInitAction) => {\n      const /** @type {?} */ payload = this.generatePayload(action.payload, 'DELETE');\n      return this.jsonApi\n        .delete(payload.query)\n        .map((response: HttpResponse<any>) => response.body)\n        .map(\n          data =>\n            new ApiDeleteSuccessAction({\n              jsonApiData: data,\n              query: payload.query,\n            }, action.zoneId)\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiDeleteFailAction(this.toErrorPayload(payload.query, error), action.zoneId)\n          )\n        );\n    });\n\n  @Effect()\n  triggerReadOnQueryRefresh$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_QUERY_REFRESH)\n    .withLatestFrom(this.store, (action: ApiQueryRefreshAction, store) => {\n      let /** @type {?} */ queryId = action.payload;\n      let /** @type {?} */ state = getNgrxJsonApiZone(store, action.zoneId);\n      let /** @type {?} */ query = state.queries[queryId].query;\n      return new ApiGetInitAction(query, action.zoneId);\n    });\n\n  @Effect()\n  refreshQueriesOnDelete$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_DELETE_SUCCESS)\n    .withLatestFrom(this.store, (action: ApiDeleteSuccessAction, store) => {\n      let /** @type {?} */ id = { id: action.payload.query.id, type: action.payload.query.type };\n      if (!id.id || !id.type) {\n        throw new Error(\n          'API_DELETE_SUCCESS did not carry resource id and type information'\n        );\n      }\n\n      let /** @type {?} */ state = getNgrxJsonApiZone(store, action.zoneId);\n      let /** @type {?} */ actions = [];\n      for (let /** @type {?} */ queryId in state.queries) {\n        if (state.queries.hasOwnProperty(queryId)) {\n          let /** @type {?} */ query = state.queries[queryId];\n          if (query.resultIds) {\n            let /** @type {?} */ needsRefresh =\n              _.findIndex(query.resultIds, function(o) {\n                return _.isEqual(id, o);\n              }) !== -1;\n\n            let /** @type {?} */ sameIdRequested =\n              query.query.id === id.id && query.query.type === id.type;\n            if (sameIdRequested && (needsRefresh || _.isEmpty(query.errors))) {\n              throw new Error(\n                'store is in invalid state, queries for deleted' +\n                  ' resource should have been emptied and marked with 404 error'\n              );\n            }\n\n            if (needsRefresh) {\n              actions.push(new ApiQueryRefreshAction(queryId, action.zoneId));\n            }\n          }\n        }\n      }\n      return actions;\n    })\n    .flatMap(actions => Observable.of(...actions));\n/**\n * @param {?} pendingChange\n * @param {?} zoneId\n * @return {?}\n */\nprivate handlePendingCreate(pendingChange: StoreResource, zoneId: string){\n    let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'POST');\n    return this.jsonApi\n      .create(payload.query, payload.jsonApiData)\n      .map(\n        response =>\n          new ApiPostSuccessAction({\n            jsonApiData: response.body,\n            query: payload.query,\n          }, zoneId)\n      )\n      .catch(error =>\n        Observable.of(\n          new ApiPostFailAction(\n            this.toErrorPayload(payload.query, error), zoneId\n          )\n        )\n      );\n  }\n/**\n * @param {?} pendingChange\n * @param {?} zoneId\n * @return {?}\n */\nprivate handlePendingUpdate(pendingChange: StoreResource, zoneId: string) {\n    let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'PATCH');\n    return (\n      this.jsonApi\n        .update(payload.query, payload.jsonApiData)\n        .map(\n          response =>\n            new ApiPatchSuccessAction({\n              jsonApiData: response.body,\n              query: payload.query,\n            }, zoneId)\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiPatchFailAction(\n              this.toErrorPayload(payload.query, error), zoneId\n            )\n          )\n        )\n    );\n  }\n/**\n * @param {?} pendingChange\n * @param {?} zoneId\n * @return {?}\n */\nprivate handlePendingDelete(pendingChange: StoreResource, zoneId: string) {\n    let /** @type {?} */ payload: Payload = this.generatePayload(pendingChange, 'DELETE');\n    return (\n      this.jsonApi\n        .delete(payload.query)\n        .map(\n          response =>\n            new ApiDeleteSuccessAction({\n              jsonApiData: response.body,\n              query: payload.query,\n            }, zoneId)\n        )\n        .catch(error =>\n          Observable.of(\n            new ApiDeleteFailAction(\n              this.toErrorPayload(payload.query, error), zoneId\n            )\n          )\n        )\n    );\n  }\n\n\n  @Effect()\n  applyResources$ = this.actions$\n    .ofType(NgrxJsonApiActionTypes.API_APPLY_INIT)\n    .filter(() => this.jsonApi.config.applyEnabled !== false)\n    .withLatestFrom(this.store,\n      (action: ApiApplyInitAction, storeState: any) => {\n        const /** @type {?} */ ngrxstore = getNgrxJsonApiZone(storeState, action.zoneId);\n        const /** @type {?} */ payload = ( /** @type {?} */((action as ApiApplyInitAction))).payload;\n        const /** @type {?} */ pending: Array<StoreResource> = getPendingChanges(\n          ngrxstore.data,\n          payload.ids,\n          payload.include\n        );\n\n        if (pending.length === 0) {\n          return Observable.of(new ApiApplySuccessAction([], action.zoneId));\n        }\n        const /** @type {?} */ sortedPending = sortPendingChanges(pending);\n        let /** @type {?} */ actions: Array<Observable<Action>> = [];\n        for (let /** @type {?} */ pendingChange of sortedPending) {\n          if (pendingChange.state === 'CREATED') {\n            actions.push(this.handlePendingCreate(pendingChange, action.zoneId));\n          } else if (pendingChange.state === 'UPDATED') {\n            actions.push(this.handlePendingUpdate(pendingChange, action.zoneId));\n          } else if (pendingChange.state === 'DELETED') {\n            actions.push(this.handlePendingDelete(pendingChange, action.zoneId));\n          } else {\n            throw new Error('unknown state ' + pendingChange.state);\n          }\n        }\n        return Observable.of(...actions)\n          .concatAll()\n          .toArray()\n          .map(actions => this.toApplyAction(actions, action.zoneId));\n      }\n    )\n    .flatMap(actions => actions);\nprivate config: NgrxJsonApiConfig;\n/**\n * @param {?} actions$\n * @param {?} jsonApi\n * @param {?} store\n */\nconstructor(\nprivate actions$: Actions,\nprivate jsonApi: NgrxJsonApi,\nprivate store: Store<any>,\n  ) {\n    this.config = this.jsonApi.config;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {}\n/**\n * @param {?} actions\n * @param {?} zoneId\n * @return {?}\n */\nprivate toApplyAction(actions: Array<Action>, zoneId: string): any {\n    for (let /** @type {?} */ action of actions) {\n      if (\n        action.type === NgrxJsonApiActionTypes.API_POST_FAIL ||\n        action.type === NgrxJsonApiActionTypes.API_PATCH_FAIL ||\n        action.type === NgrxJsonApiActionTypes.API_DELETE_FAIL\n      ) {\n        return new ApiApplyFailAction(actions, zoneId);\n      }\n    }\n    return new ApiApplySuccessAction(actions, zoneId);\n  }\n/**\n * @param {?} query\n * @param {?} response\n * @return {?}\n */\nprivate toErrorPayload(\n    query: Query,\n    response: HttpErrorResponse | any\n  ): Payload {\n    let /** @type {?} */ contentType: String = null;\n    if (response && response.headers) {\n      contentType = response.headers.get('Content-Type');\n    }\n    let /** @type {?} */ document = null;\n    if (\n      contentType != null &&\n      contentType.startsWith('application/vnd.api+json')\n    ) {\n      document = response;\n    }\n    if (\n      document &&\n      document.error &&\n      document.error.errors &&\n      document.error.errors.length > 0\n    ) {\n      return {\n        query: query,\n        jsonApiData: document.error,\n      };\n    } else {\n      // transform http to json api error\n      let /** @type {?} */ errors: Array<ResourceError> = [];\n      let /** @type {?} */ error: ResourceError = {\n        status: String(response.status),\n        code: response.statusText,\n      };\n\n      errors.push(error);\n      // got json api errors\n\n      return {\n        query: query,\n        jsonApiData: {\n          errors: errors,\n        },\n      };\n    }\n  }\n/**\n * @param {?} resource\n * @param {?} operation\n * @return {?}\n */\nprivate generatePayload(\n    resource: Resource,\n    operation: OperationType\n  ): Payload {\n    return generatePayload(resource, operation);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Actions, },\n{type: NgrxJsonApi, },\n{type: Store, },\n];\n}\n\nfunction NgrxJsonApiEffects_tsickle_Closure_declarations() {\n/** @type {?} */\nNgrxJsonApiEffects.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgrxJsonApiEffects.ctorParameters;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.createResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.updateResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.readResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.queryStore$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.deleteResource$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.triggerReadOnQueryRefresh$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.refreshQueriesOnDelete$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.applyResources$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.config;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.actions$;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.jsonApi;\n/** @type {?} */\nNgrxJsonApiEffects.prototype.store;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}